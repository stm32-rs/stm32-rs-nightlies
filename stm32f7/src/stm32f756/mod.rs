/*!Peripheral access API for STM32F756 microcontrollers (generated using svd2rust v0.36.1 (4052ce6 2025-04-04))

You can find an overview of the generated API [here].

API features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.

[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api
[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased
[repository]: https://github.com/rust-embedded/svd2rust*/
///Number available in the NVIC for configuring priority
pub const NVIC_PRIO_BITS: u8 = 4;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn PVD();
    fn TAMP_STAMP();
    fn RTC_WKUP();
    fn FLASH();
    fn RCC();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn DMA1_STREAM0();
    fn DMA1_STREAM1();
    fn DMA1_STREAM2();
    fn DMA1_STREAM3();
    fn DMA1_STREAM4();
    fn DMA1_STREAM5();
    fn DMA1_STREAM6();
    fn ADC();
    fn CAN1_TX();
    fn CAN1_RX0();
    fn CAN1_RX1();
    fn CAN1_SCE();
    fn EXTI9_5();
    fn TIM1_BRK_TIM9();
    fn TIM1_UP_TIM10();
    fn TIM1_TRG_COM_TIM11();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM4();
    fn I2C1_EV();
    fn I2C1_ER();
    fn I2C2_EV();
    fn I2C2_ER();
    fn SPI1();
    fn SPI2();
    fn USART1();
    fn USART2();
    fn USART3();
    fn EXTI15_10();
    fn RTC_ALARM();
    fn OTG_FS_WKUP();
    fn TIM8_BRK_TIM12();
    fn TIM8_UP_TIM13();
    fn TIM8_TRG_COM_TIM14();
    fn TIM8_CC();
    fn DMA1_STREAM7();
    fn FMC();
    fn SDMMC1();
    fn TIM5();
    fn SPI3();
    fn UART4();
    fn UART5();
    fn TIM6_DAC();
    fn TIM7();
    fn DMA2_STREAM0();
    fn DMA2_STREAM1();
    fn DMA2_STREAM2();
    fn DMA2_STREAM3();
    fn DMA2_STREAM4();
    fn ETH();
    fn ETH_WKUP();
    fn CAN2_TX();
    fn CAN2_RX0();
    fn CAN2_RX1();
    fn CAN2_SCE();
    fn OTG_FS();
    fn DMA2_STREAM5();
    fn DMA2_STREAM6();
    fn DMA2_STREAM7();
    fn USART6();
    fn I2C3_EV();
    fn I2C3_ER();
    fn OTG_HS_EP1_OUT();
    fn OTG_HS_EP1_IN();
    fn OTG_HS_WKUP();
    fn OTG_HS();
    fn DCMI();
    fn CRYP();
    fn HASH_RNG();
    fn FPU();
    fn UART7();
    fn UART8();
    fn SPI4();
    fn SPI5();
    fn SPI6();
    fn SAI1();
    fn LTDC();
    fn LTDC_ER();
    fn DMA2D();
    fn SAI2();
    fn QUAD_SPI();
    fn LP_TIMER1();
    fn HDMI_CEC();
    fn I2C4_EV();
    fn I2C4_ER();
    fn SPDIFRX();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 98] = [
    Vector { _handler: WWDG },
    Vector { _handler: PVD },
    Vector {
        _handler: TAMP_STAMP,
    },
    Vector { _handler: RTC_WKUP },
    Vector { _handler: FLASH },
    Vector { _handler: RCC },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector {
        _handler: DMA1_STREAM0,
    },
    Vector {
        _handler: DMA1_STREAM1,
    },
    Vector {
        _handler: DMA1_STREAM2,
    },
    Vector {
        _handler: DMA1_STREAM3,
    },
    Vector {
        _handler: DMA1_STREAM4,
    },
    Vector {
        _handler: DMA1_STREAM5,
    },
    Vector {
        _handler: DMA1_STREAM6,
    },
    Vector { _handler: ADC },
    Vector { _handler: CAN1_TX },
    Vector { _handler: CAN1_RX0 },
    Vector { _handler: CAN1_RX1 },
    Vector { _handler: CAN1_SCE },
    Vector { _handler: EXTI9_5 },
    Vector {
        _handler: TIM1_BRK_TIM9,
    },
    Vector {
        _handler: TIM1_UP_TIM10,
    },
    Vector {
        _handler: TIM1_TRG_COM_TIM11,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM4 },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ER },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector {
        _handler: EXTI15_10,
    },
    Vector {
        _handler: RTC_ALARM,
    },
    Vector {
        _handler: OTG_FS_WKUP,
    },
    Vector {
        _handler: TIM8_BRK_TIM12,
    },
    Vector {
        _handler: TIM8_UP_TIM13,
    },
    Vector {
        _handler: TIM8_TRG_COM_TIM14,
    },
    Vector { _handler: TIM8_CC },
    Vector {
        _handler: DMA1_STREAM7,
    },
    Vector { _handler: FMC },
    Vector { _handler: SDMMC1 },
    Vector { _handler: TIM5 },
    Vector { _handler: SPI3 },
    Vector { _handler: UART4 },
    Vector { _handler: UART5 },
    Vector { _handler: TIM6_DAC },
    Vector { _handler: TIM7 },
    Vector {
        _handler: DMA2_STREAM0,
    },
    Vector {
        _handler: DMA2_STREAM1,
    },
    Vector {
        _handler: DMA2_STREAM2,
    },
    Vector {
        _handler: DMA2_STREAM3,
    },
    Vector {
        _handler: DMA2_STREAM4,
    },
    Vector { _handler: ETH },
    Vector { _handler: ETH_WKUP },
    Vector { _handler: CAN2_TX },
    Vector { _handler: CAN2_RX0 },
    Vector { _handler: CAN2_RX1 },
    Vector { _handler: CAN2_SCE },
    Vector { _handler: OTG_FS },
    Vector {
        _handler: DMA2_STREAM5,
    },
    Vector {
        _handler: DMA2_STREAM6,
    },
    Vector {
        _handler: DMA2_STREAM7,
    },
    Vector { _handler: USART6 },
    Vector { _handler: I2C3_EV },
    Vector { _handler: I2C3_ER },
    Vector {
        _handler: OTG_HS_EP1_OUT,
    },
    Vector {
        _handler: OTG_HS_EP1_IN,
    },
    Vector {
        _handler: OTG_HS_WKUP,
    },
    Vector { _handler: OTG_HS },
    Vector { _handler: DCMI },
    Vector { _handler: CRYP },
    Vector { _handler: HASH_RNG },
    Vector { _handler: FPU },
    Vector { _handler: UART7 },
    Vector { _handler: UART8 },
    Vector { _handler: SPI4 },
    Vector { _handler: SPI5 },
    Vector { _handler: SPI6 },
    Vector { _handler: SAI1 },
    Vector { _handler: LTDC },
    Vector { _handler: LTDC_ER },
    Vector { _handler: DMA2D },
    Vector { _handler: SAI2 },
    Vector { _handler: QUAD_SPI },
    Vector {
        _handler: LP_TIMER1,
    },
    Vector { _handler: HDMI_CEC },
    Vector { _handler: I2C4_EV },
    Vector { _handler: I2C4_ER },
    Vector { _handler: SPDIFRX },
];
///Enumeration of all the interrupts.
#[cfg_attr(feature = "defmt", derive(defmt::Format))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    ///0 - Window Watchdog interrupt
    WWDG = 0,
    ///1 - PVD through EXTI line detection INTERRUPT
    PVD = 1,
    ///2 - Tamper and TimeStamp interrupts through the EXTI line
    TAMP_STAMP = 2,
    ///3 - RTC Tamper or TimeStamp /CSS on LSE through EXTI line 19 interrupts
    RTC_WKUP = 3,
    ///4 - Flash global interrupt
    FLASH = 4,
    ///5 - RCC global interrupt
    RCC = 5,
    ///6 - EXTI Line0 interrupt
    EXTI0 = 6,
    ///7 - EXTI Line1 interrupt
    EXTI1 = 7,
    ///8 - EXTI Line2 interrupt
    EXTI2 = 8,
    ///9 - EXTI Line3 interrupt
    EXTI3 = 9,
    ///10 - EXTI Line4 interrupt
    EXTI4 = 10,
    ///11 - DMA1 Stream0 global interrupt
    DMA1_STREAM0 = 11,
    ///12 - DMA1 Stream1 global interrupt
    DMA1_STREAM1 = 12,
    ///13 - DMA1 Stream2 global interrupt
    DMA1_STREAM2 = 13,
    ///14 - DMA1 Stream3 global interrupt
    DMA1_STREAM3 = 14,
    ///15 - DMA1 Stream4 global interrupt
    DMA1_STREAM4 = 15,
    ///16 - DMA1 Stream5 global interrupt
    DMA1_STREAM5 = 16,
    ///17 - DMA1 Stream6 global interrupt
    DMA1_STREAM6 = 17,
    ///18 - ADC1 global interrupt
    ADC = 18,
    ///19 - CAN1 TX interrupts
    CAN1_TX = 19,
    ///20 - CAN1 RX0 interrupts
    CAN1_RX0 = 20,
    ///21 - CAN1 RX1 interrupts
    CAN1_RX1 = 21,
    ///22 - CAN1 SCE interrupt
    CAN1_SCE = 22,
    ///23 - EXTI Line\[9:5\] interrupts
    EXTI9_5 = 23,
    ///24 - TIM1 Break interrupt and TIM9 global interrupt
    TIM1_BRK_TIM9 = 24,
    ///25 - TIM1 Update interrupt and TIM10
    TIM1_UP_TIM10 = 25,
    ///26 - TIM1 Trigger and Commutation interrupts and TIM11 global interrupt
    TIM1_TRG_COM_TIM11 = 26,
    ///27 - TIM1 Capture Compare interrupt
    TIM1_CC = 27,
    ///28 - TIM2 global interrupt
    TIM2 = 28,
    ///29 - TIM3 global interrupt
    TIM3 = 29,
    ///30 - TIM4 global interrupt
    TIM4 = 30,
    ///31 - I2C1 event interrupt
    I2C1_EV = 31,
    ///32 - I2C1 error interrupt
    I2C1_ER = 32,
    ///33 - I2C2 event interrupt
    I2C2_EV = 33,
    ///34 - I2C2 error interrupt
    I2C2_ER = 34,
    ///35 - SPI1 global interrupt
    SPI1 = 35,
    ///36 - SPI2 global interrupt
    SPI2 = 36,
    ///37 - USART1 global interrupt
    USART1 = 37,
    ///38 - USART2 global interrupt
    USART2 = 38,
    ///39 - USART3 global interrupt
    USART3 = 39,
    ///40 - EXTI Line\[15:10\] interrupts
    EXTI15_10 = 40,
    ///41 - RTC alarms through EXTI line 18 interrupts
    RTC_ALARM = 41,
    ///42 - USB On-The-Go FS Wakeup through EXTI line interrupt
    OTG_FS_WKUP = 42,
    ///43 - TIM8 Break interrupt and TIM12 global interrupt
    TIM8_BRK_TIM12 = 43,
    ///44 - TIM8 Update interrupt and TIM13 global interrupt
    TIM8_UP_TIM13 = 44,
    ///45 - TIM8 Trigger and Commutation interrupts and TIM14 global interrupt
    TIM8_TRG_COM_TIM14 = 45,
    ///46 - TIM8 Capture Compare interrupt
    TIM8_CC = 46,
    ///47 - DMA1 Stream7 global interrupt
    DMA1_STREAM7 = 47,
    ///48 - FMC global interrupt
    FMC = 48,
    ///49 - SDMMC1 global interrupt
    SDMMC1 = 49,
    ///50 - TIM5 global interrupt
    TIM5 = 50,
    ///51 - SPI3 global interrupt
    SPI3 = 51,
    ///52 - UART4 global interrupt
    UART4 = 52,
    ///53 - UART5 global interrupt
    UART5 = 53,
    ///54 - TIM6 global interrupt, DAC1 and DAC2 underrun error interrupt
    TIM6_DAC = 54,
    ///55 - TIM7 global interrupt
    TIM7 = 55,
    ///56 - DMA2 Stream0 global interrupt
    DMA2_STREAM0 = 56,
    ///57 - DMA2 Stream1 global interrupt
    DMA2_STREAM1 = 57,
    ///58 - DMA2 Stream2 global interrupt
    DMA2_STREAM2 = 58,
    ///59 - DMA2 Stream3 global interrupt
    DMA2_STREAM3 = 59,
    ///60 - DMA2 Stream4 global interrupt
    DMA2_STREAM4 = 60,
    ///61 - Ethernet global interrupt
    ETH = 61,
    ///62 - Ethernet Wakeup through EXTI line interrupt
    ETH_WKUP = 62,
    ///63 - CAN2 TX interrupts
    CAN2_TX = 63,
    ///64 - CAN2 RX0 interrupts
    CAN2_RX0 = 64,
    ///65 - CAN2 RX1 interrupts
    CAN2_RX1 = 65,
    ///66 - CAN2 SCE interrupt
    CAN2_SCE = 66,
    ///67 - USB On The Go FS global interrupt
    OTG_FS = 67,
    ///68 - DMA2 Stream5 global interrupt
    DMA2_STREAM5 = 68,
    ///69 - DMA2 Stream6 global interrupt
    DMA2_STREAM6 = 69,
    ///70 - DMA2 Stream7 global interrupt
    DMA2_STREAM7 = 70,
    ///71 - USART6 global interrupt
    USART6 = 71,
    ///72 - I2C3 event interrupt
    I2C3_EV = 72,
    ///73 - I2C3 error interrupt
    I2C3_ER = 73,
    ///74 - USB On The Go HS End Point 1 Out global interrupt
    OTG_HS_EP1_OUT = 74,
    ///75 - USB On The Go HS End Point 1 In global interrupt
    OTG_HS_EP1_IN = 75,
    ///76 - USB On The Go HS Wakeup through EXTI interrupt
    OTG_HS_WKUP = 76,
    ///77 - USB On The Go HS global interrupt
    OTG_HS = 77,
    ///78 - DCMI global interrupt
    DCMI = 78,
    ///79 - CRYP crypto global interrupt
    CRYP = 79,
    ///80 - Hash and Rng global interrupt
    HASH_RNG = 80,
    ///81 - Floating point unit interrupt
    FPU = 81,
    ///82 - UART7 global interrupt
    UART7 = 82,
    ///83 - UART 8 global interrupt
    UART8 = 83,
    ///84 - SPI 4 global interrupt
    SPI4 = 84,
    ///85 - SPI 5 global interrupt
    SPI5 = 85,
    ///86 - SPI 6 global interrupt
    SPI6 = 86,
    ///87 - SAI1 global interrupt
    SAI1 = 87,
    ///88 - LTDC global interrupt
    LTDC = 88,
    ///89 - LTDC global error interrupt
    LTDC_ER = 89,
    ///90 - DMA2D global interrupt
    DMA2D = 90,
    ///91 - SAI2 global interrupt
    SAI2 = 91,
    ///92 - QuadSPI global interrupt
    QUAD_SPI = 92,
    ///93 - LP Timer1 global interrupt
    LP_TIMER1 = 93,
    ///94 - HDMI-CEC global interrupt
    HDMI_CEC = 94,
    ///95 - I2C4 event interrupt
    I2C4_EV = 95,
    ///96 - I2C4 Error interrupt
    I2C4_ER = 96,
    ///97 - SPDIFRX global interrupt
    SPDIFRX = 97,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
///Random number generator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#RNG)
pub type RNG = crate::Periph<rng::RegisterBlock, 0x5006_0800>;
impl core::fmt::Debug for RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG").finish()
    }
}
///Random number generator
pub mod rng;
///Hash processor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#HASH)
pub type HASH = crate::Periph<hash::RegisterBlock, 0x5006_0400>;
impl core::fmt::Debug for HASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HASH").finish()
    }
}
///Hash processor
pub mod hash;
///Cryptographic processor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#CRYP)
pub type CRYP = crate::Periph<cryp::RegisterBlock, 0x5006_0000>;
impl core::fmt::Debug for CRYP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRYP").finish()
    }
}
///Cryptographic processor
pub mod cryp;
///Digital camera interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#DCMI)
pub type DCMI = crate::Periph<dcmi::RegisterBlock, 0x5005_0000>;
impl core::fmt::Debug for DCMI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCMI").finish()
    }
}
///Digital camera interface
pub mod dcmi;
///Flexible memory controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#FMC)
pub type FMC = crate::Periph<fmc::RegisterBlock, 0xa000_0000>;
impl core::fmt::Debug for FMC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FMC").finish()
    }
}
///Flexible memory controller
pub mod fmc;
///Debug support
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#DBGMCU)
pub type DBGMCU = crate::Periph<dbgmcu::RegisterBlock, 0xe004_2000>;
impl core::fmt::Debug for DBGMCU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBGMCU").finish()
    }
}
///Debug support
pub mod dbgmcu;
///DMA controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#DMA2)
pub type DMA2 = crate::Periph<dma2::RegisterBlock, 0x4002_6400>;
impl core::fmt::Debug for DMA2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA2").finish()
    }
}
///DMA controller
pub mod dma2;
///DMA controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#DMA2)
pub type DMA1 = crate::Periph<dma2::RegisterBlock, 0x4002_6000>;
impl core::fmt::Debug for DMA1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA1").finish()
    }
}
///DMA controller
pub use self::dma2 as dma1;
///Reset and clock control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#RCC)
pub type RCC = crate::Periph<rcc::RegisterBlock, 0x4002_3800>;
impl core::fmt::Debug for RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC").finish()
    }
}
///Reset and clock control
pub mod rcc;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#GPIOD)
pub type GPIOD = crate::Periph<gpiod::RegisterBlock, 0x4002_0c00>;
impl core::fmt::Debug for GPIOD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOD").finish()
    }
}
///General-purpose I/Os
pub mod gpiod;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#GPIOD)
pub type GPIOC = crate::Periph<gpiod::RegisterBlock, 0x4002_0800>;
impl core::fmt::Debug for GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC").finish()
    }
}
///General-purpose I/Os
pub use self::gpiod as gpioc;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#GPIOD)
pub type GPIOK = crate::Periph<gpiod::RegisterBlock, 0x4002_2800>;
impl core::fmt::Debug for GPIOK {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOK").finish()
    }
}
///General-purpose I/Os
pub use self::gpiod as gpiok;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#GPIOD)
pub type GPIOJ = crate::Periph<gpiod::RegisterBlock, 0x4002_2400>;
impl core::fmt::Debug for GPIOJ {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOJ").finish()
    }
}
///General-purpose I/Os
pub use self::gpiod as gpioj;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#GPIOD)
pub type GPIOI = crate::Periph<gpiod::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for GPIOI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOI").finish()
    }
}
///General-purpose I/Os
pub use self::gpiod as gpioi;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#GPIOD)
pub type GPIOH = crate::Periph<gpiod::RegisterBlock, 0x4002_1c00>;
impl core::fmt::Debug for GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOH").finish()
    }
}
///General-purpose I/Os
pub use self::gpiod as gpioh;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#GPIOD)
pub type GPIOG = crate::Periph<gpiod::RegisterBlock, 0x4002_1800>;
impl core::fmt::Debug for GPIOG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOG").finish()
    }
}
///General-purpose I/Os
pub use self::gpiod as gpiog;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#GPIOD)
pub type GPIOF = crate::Periph<gpiod::RegisterBlock, 0x4002_1400>;
impl core::fmt::Debug for GPIOF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOF").finish()
    }
}
///General-purpose I/Os
pub use self::gpiod as gpiof;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#GPIOD)
pub type GPIOE = crate::Periph<gpiod::RegisterBlock, 0x4002_1000>;
impl core::fmt::Debug for GPIOE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOE").finish()
    }
}
///General-purpose I/Os
pub use self::gpiod as gpioe;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#GPIOB)
pub type GPIOB = crate::Periph<gpiob::RegisterBlock, 0x4002_0400>;
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
///General-purpose I/Os
pub mod gpiob;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#GPIOA)
pub type GPIOA = crate::Periph<gpioa::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
///General-purpose I/Os
pub mod gpioa;
///System configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#SYSCFG)
pub type SYSCFG = crate::Periph<syscfg::RegisterBlock, 0x4001_3800>;
impl core::fmt::Debug for SYSCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCFG").finish()
    }
}
///System configuration controller
pub mod syscfg;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#SPI1)
pub type SPI1 = crate::Periph<spi1::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
///Serial peripheral interface
pub mod spi1;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#SPI1)
pub type SPI3 = crate::Periph<spi1::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi3;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#SPI1)
pub type SPI4 = crate::Periph<spi1::RegisterBlock, 0x4001_3400>;
impl core::fmt::Debug for SPI4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI4").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi4;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#SPI1)
pub type SPI5 = crate::Periph<spi1::RegisterBlock, 0x4001_5000>;
impl core::fmt::Debug for SPI5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI5").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi5;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#SPI1)
pub type SPI6 = crate::Periph<spi1::RegisterBlock, 0x4001_5400>;
impl core::fmt::Debug for SPI6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI6").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi6;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#SPI1)
pub type SPI2 = crate::Periph<spi1::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi2;
///Analog-to-digital converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#ADC1)
pub type ADC1 = crate::Periph<adc1::RegisterBlock, 0x4001_2000>;
impl core::fmt::Debug for ADC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC1").finish()
    }
}
///Analog-to-digital converter
pub mod adc1;
///Analog-to-digital converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#ADC1)
pub type ADC2 = crate::Periph<adc1::RegisterBlock, 0x4001_2100>;
impl core::fmt::Debug for ADC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC2").finish()
    }
}
///Analog-to-digital converter
pub use self::adc1 as adc2;
///Analog-to-digital converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#ADC1)
pub type ADC3 = crate::Periph<adc1::RegisterBlock, 0x4001_2200>;
impl core::fmt::Debug for ADC3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC3").finish()
    }
}
///Analog-to-digital converter
pub use self::adc1 as adc3;
///Digital-to-analog converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#DAC)
pub type DAC = crate::Periph<dac::RegisterBlock, 0x4000_7400>;
impl core::fmt::Debug for DAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DAC").finish()
    }
}
///Digital-to-analog converter
pub mod dac;
///Power control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#PWR)
pub type PWR = crate::Periph<pwr::RegisterBlock, 0x4000_7000>;
impl core::fmt::Debug for PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR").finish()
    }
}
///Power control
pub mod pwr;
///Independent watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#IWDG)
pub type IWDG = crate::Periph<iwdg::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG").finish()
    }
}
///Independent watchdog
pub mod iwdg;
///Window watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#WWDG)
pub type WWDG = crate::Periph<wwdg::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG").finish()
    }
}
///Window watchdog
pub mod wwdg;
///Common ADC registers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#ADC_Common)
pub type ADC_COMMON = crate::Periph<adc_common::RegisterBlock, 0x4001_2300>;
impl core::fmt::Debug for ADC_COMMON {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC_COMMON").finish()
    }
}
///Common ADC registers
pub mod adc_common;
///Advanced-timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM1)
pub type TIM1 = crate::Periph<tim1::RegisterBlock, 0x4001_0000>;
impl core::fmt::Debug for TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1").finish()
    }
}
///Advanced-timers
pub mod tim1;
///Advanced-timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM1)
pub type TIM8 = crate::Periph<tim1::RegisterBlock, 0x4001_0400>;
impl core::fmt::Debug for TIM8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM8").finish()
    }
}
///Advanced-timers
pub use self::tim1 as tim8;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM2)
pub type TIM2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2").finish()
    }
}
///General purpose timers
pub mod tim2;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM3)
pub type TIM3 = crate::Periph<tim3::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3").finish()
    }
}
///General purpose timers
pub mod tim3;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM3)
pub type TIM4 = crate::Periph<tim3::RegisterBlock, 0x4000_0800>;
impl core::fmt::Debug for TIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM4").finish()
    }
}
///General purpose timers
pub use self::tim3 as tim4;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM5)
pub type TIM5 = crate::Periph<tim5::RegisterBlock, 0x4000_0c00>;
impl core::fmt::Debug for TIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM5").finish()
    }
}
///General purpose timers
pub mod tim5;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM9)
pub type TIM9 = crate::Periph<tim9::RegisterBlock, 0x4001_4000>;
impl core::fmt::Debug for TIM9 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM9").finish()
    }
}
///General purpose timers
pub mod tim9;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM9)
pub type TIM12 = crate::Periph<tim9::RegisterBlock, 0x4000_1800>;
impl core::fmt::Debug for TIM12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM12").finish()
    }
}
///General purpose timers
pub use self::tim9 as tim12;
///General-purpose-timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM10)
pub type TIM10 = crate::Periph<tim10::RegisterBlock, 0x4001_4400>;
impl core::fmt::Debug for TIM10 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM10").finish()
    }
}
///General-purpose-timers
pub mod tim10;
///General-purpose-timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM10)
pub type TIM11 = crate::Periph<tim10::RegisterBlock, 0x4001_4800>;
impl core::fmt::Debug for TIM11 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM11").finish()
    }
}
///General-purpose-timers
pub use self::tim10 as tim11;
///General-purpose-timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM10)
pub type TIM13 = crate::Periph<tim10::RegisterBlock, 0x4000_1c00>;
impl core::fmt::Debug for TIM13 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM13").finish()
    }
}
///General-purpose-timers
pub use self::tim10 as tim13;
///General-purpose-timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM10)
pub type TIM14 = crate::Periph<tim10::RegisterBlock, 0x4000_2000>;
impl core::fmt::Debug for TIM14 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM14").finish()
    }
}
///General-purpose-timers
pub use self::tim10 as tim14;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM6)
pub type TIM6 = crate::Periph<tim6::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for TIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM6").finish()
    }
}
///Basic timers
pub mod tim6;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#TIM6)
pub type TIM7 = crate::Periph<tim6::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for TIM7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM7").finish()
    }
}
///Basic timers
pub use self::tim6 as tim7;
///Ethernet: media access control (MAC)
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#Ethernet_MAC)
pub type ETHERNET_MAC = crate::Periph<ethernet_mac::RegisterBlock, 0x4002_8000>;
impl core::fmt::Debug for ETHERNET_MAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ETHERNET_MAC").finish()
    }
}
///Ethernet: media access control (MAC)
pub mod ethernet_mac;
///Ethernet: MAC management counters
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#Ethernet_MMC)
pub type ETHERNET_MMC = crate::Periph<ethernet_mmc::RegisterBlock, 0x4002_8100>;
impl core::fmt::Debug for ETHERNET_MMC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ETHERNET_MMC").finish()
    }
}
///Ethernet: MAC management counters
pub mod ethernet_mmc;
///Ethernet: Precision time protocol
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#Ethernet_PTP)
pub type ETHERNET_PTP = crate::Periph<ethernet_ptp::RegisterBlock, 0x4002_8700>;
impl core::fmt::Debug for ETHERNET_PTP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ETHERNET_PTP").finish()
    }
}
///Ethernet: Precision time protocol
pub mod ethernet_ptp;
///Ethernet: DMA controller operation
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#Ethernet_DMA)
pub type ETHERNET_DMA = crate::Periph<ethernet_dma::RegisterBlock, 0x4002_9000>;
impl core::fmt::Debug for ETHERNET_DMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ETHERNET_DMA").finish()
    }
}
///Ethernet: DMA controller operation
pub mod ethernet_dma;
///Cryptographic processor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#CRC)
pub type CRC = crate::Periph<crc::RegisterBlock, 0x4002_3000>;
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
///Cryptographic processor
pub mod crc;
///Controller area network
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#CAN1)
pub type CAN1 = crate::Periph<can1::RegisterBlock, 0x4000_6400>;
impl core::fmt::Debug for CAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAN1").finish()
    }
}
///Controller area network
pub mod can1;
///Controller area network
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#CAN1)
pub type CAN2 = crate::Periph<can1::RegisterBlock, 0x4000_6800>;
impl core::fmt::Debug for CAN2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAN2").finish()
    }
}
///Controller area network
pub use self::can1 as can2;
///FLASH
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#FLASH)
pub type FLASH = crate::Periph<flash::RegisterBlock, 0x4002_3c00>;
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
///FLASH
pub mod flash;
///External interrupt/event controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#EXTI)
pub type EXTI = crate::Periph<exti::RegisterBlock, 0x4001_3c00>;
impl core::fmt::Debug for EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI").finish()
    }
}
///External interrupt/event controller
pub mod exti;
///LCD-TFT Controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#LTDC)
pub type LTDC = crate::Periph<ltdc::RegisterBlock, 0x4001_6800>;
impl core::fmt::Debug for LTDC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LTDC").finish()
    }
}
///LCD-TFT Controller
pub mod ltdc;
///Serial audio interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#SAI1)
pub type SAI1 = crate::Periph<sai1::RegisterBlock, 0x4001_5800>;
impl core::fmt::Debug for SAI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI1").finish()
    }
}
///Serial audio interface
pub mod sai1;
///Serial audio interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#SAI1)
pub type SAI2 = crate::Periph<sai1::RegisterBlock, 0x4001_5c00>;
impl core::fmt::Debug for SAI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI2").finish()
    }
}
///Serial audio interface
pub use self::sai1 as sai2;
///DMA2D controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#DMA2D)
pub type DMA2D = crate::Periph<dma2d::RegisterBlock, 0x4002_b000>;
impl core::fmt::Debug for DMA2D {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA2D").finish()
    }
}
///DMA2D controller
pub mod dma2d;
///QuadSPI interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#QUADSPI)
pub type QUADSPI = crate::Periph<quadspi::RegisterBlock, 0xa000_1000>;
impl core::fmt::Debug for QUADSPI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("QUADSPI").finish()
    }
}
///QuadSPI interface
pub mod quadspi;
///HDMI-CEC controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#CEC)
pub type CEC = crate::Periph<cec::RegisterBlock, 0x4000_6c00>;
impl core::fmt::Debug for CEC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CEC").finish()
    }
}
///HDMI-CEC controller
pub mod cec;
///Receiver Interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#SPDIFRX)
pub type SPDIFRX = crate::Periph<spdifrx::RegisterBlock, 0x4000_4000>;
impl core::fmt::Debug for SPDIFRX {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPDIFRX").finish()
    }
}
///Receiver Interface
pub mod spdifrx;
///Secure digital input/output interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#SDMMC1)
pub type SDMMC1 = crate::Periph<sdmmc1::RegisterBlock, 0x4001_2c00>;
impl core::fmt::Debug for SDMMC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC1").finish()
    }
}
///Secure digital input/output interface
pub mod sdmmc1;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#LPTIM1)
pub type LPTIM1 = crate::Periph<lptim1::RegisterBlock, 0x4000_2400>;
impl core::fmt::Debug for LPTIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM1").finish()
    }
}
///Low power timer
pub mod lptim1;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#I2C1)
pub type I2C1 = crate::Periph<i2c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
///Inter-integrated circuit
pub mod i2c1;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#I2C1)
pub type I2C2 = crate::Periph<i2c1::RegisterBlock, 0x4000_5800>;
impl core::fmt::Debug for I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c2;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#I2C1)
pub type I2C3 = crate::Periph<i2c1::RegisterBlock, 0x4000_5c00>;
impl core::fmt::Debug for I2C3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C3").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c3;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#I2C1)
pub type I2C4 = crate::Periph<i2c1::RegisterBlock, 0x4000_6000>;
impl core::fmt::Debug for I2C4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C4").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c4;
///Real-time clock
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#RTC)
pub type RTC = crate::Periph<rtc::RegisterBlock, 0x4000_2800>;
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
///Real-time clock
pub mod rtc;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#USART1)
pub type USART1 = crate::Periph<usart1::RegisterBlock, 0x4001_1000>;
impl core::fmt::Debug for USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub mod usart1;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#USART1)
pub type USART6 = crate::Periph<usart1::RegisterBlock, 0x4001_1400>;
impl core::fmt::Debug for USART6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART6").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart6;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#USART1)
pub type USART3 = crate::Periph<usart1::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for USART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART3").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart3;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#USART1)
pub type USART2 = crate::Periph<usart1::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart2;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#USART1)
pub type UART5 = crate::Periph<usart1::RegisterBlock, 0x4000_5000>;
impl core::fmt::Debug for UART5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART5").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart5;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#USART1)
pub type UART4 = crate::Periph<usart1::RegisterBlock, 0x4000_4c00>;
impl core::fmt::Debug for UART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART4").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart4;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#USART1)
pub type UART8 = crate::Periph<usart1::RegisterBlock, 0x4000_7c00>;
impl core::fmt::Debug for UART8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART8").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart8;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#USART1)
pub type UART7 = crate::Periph<usart1::RegisterBlock, 0x4000_7800>;
impl core::fmt::Debug for UART7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART7").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart7;
///USB on the go full speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#OTG_FS_GLOBAL)
pub type OTG_FS_GLOBAL = crate::Periph<otg_fs_global::RegisterBlock, 0x5000_0000>;
impl core::fmt::Debug for OTG_FS_GLOBAL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG_FS_GLOBAL").finish()
    }
}
///USB on the go full speed
pub mod otg_fs_global;
///USB on the go full speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#OTG_FS_HOST)
pub type OTG_FS_HOST = crate::Periph<otg_fs_host::RegisterBlock, 0x5000_0400>;
impl core::fmt::Debug for OTG_FS_HOST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG_FS_HOST").finish()
    }
}
///USB on the go full speed
pub mod otg_fs_host;
///USB on the go full speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#OTG_FS_DEVICE)
pub type OTG_FS_DEVICE = crate::Periph<otg_fs_device::RegisterBlock, 0x5000_0800>;
impl core::fmt::Debug for OTG_FS_DEVICE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG_FS_DEVICE").finish()
    }
}
///USB on the go full speed
pub mod otg_fs_device;
///USB on the go full speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#OTG_FS_PWRCLK)
pub type OTG_FS_PWRCLK = crate::Periph<otg_fs_pwrclk::RegisterBlock, 0x5000_0e00>;
impl core::fmt::Debug for OTG_FS_PWRCLK {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG_FS_PWRCLK").finish()
    }
}
///USB on the go full speed
pub mod otg_fs_pwrclk;
///USB on the go high speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#OTG_HS_GLOBAL)
pub type OTG_HS_GLOBAL = crate::Periph<otg_hs_global::RegisterBlock, 0x4004_0000>;
impl core::fmt::Debug for OTG_HS_GLOBAL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG_HS_GLOBAL").finish()
    }
}
///USB on the go high speed
pub mod otg_hs_global;
///USB on the go high speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#OTG_HS_HOST)
pub type OTG_HS_HOST = crate::Periph<otg_hs_host::RegisterBlock, 0x4004_0400>;
impl core::fmt::Debug for OTG_HS_HOST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG_HS_HOST").finish()
    }
}
///USB on the go high speed
pub mod otg_hs_host;
///USB on the go high speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#OTG_HS_DEVICE)
pub type OTG_HS_DEVICE = crate::Periph<otg_hs_device::RegisterBlock, 0x4004_0800>;
impl core::fmt::Debug for OTG_HS_DEVICE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG_HS_DEVICE").finish()
    }
}
///USB on the go high speed
pub mod otg_hs_device;
///USB on the go high speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32F756.html#OTG_HS_PWRCLK)
pub type OTG_HS_PWRCLK = crate::Periph<otg_hs_pwrclk::RegisterBlock, 0x4004_0e00>;
impl core::fmt::Debug for OTG_HS_PWRCLK {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG_HS_PWRCLK").finish()
    }
}
///USB on the go high speed
pub mod otg_hs_pwrclk;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
/// All the peripherals.
#[allow(non_snake_case)]
pub struct Peripherals {
    ///RNG
    pub RNG: RNG,
    ///HASH
    pub HASH: HASH,
    ///CRYP
    pub CRYP: CRYP,
    ///DCMI
    pub DCMI: DCMI,
    ///FMC
    pub FMC: FMC,
    ///DBGMCU
    pub DBGMCU: DBGMCU,
    ///DMA2
    pub DMA2: DMA2,
    ///DMA1
    pub DMA1: DMA1,
    ///RCC
    pub RCC: RCC,
    ///GPIOD
    pub GPIOD: GPIOD,
    ///GPIOC
    pub GPIOC: GPIOC,
    ///GPIOK
    pub GPIOK: GPIOK,
    ///GPIOJ
    pub GPIOJ: GPIOJ,
    ///GPIOI
    pub GPIOI: GPIOI,
    ///GPIOH
    pub GPIOH: GPIOH,
    ///GPIOG
    pub GPIOG: GPIOG,
    ///GPIOF
    pub GPIOF: GPIOF,
    ///GPIOE
    pub GPIOE: GPIOE,
    ///GPIOB
    pub GPIOB: GPIOB,
    ///GPIOA
    pub GPIOA: GPIOA,
    ///SYSCFG
    pub SYSCFG: SYSCFG,
    ///SPI1
    pub SPI1: SPI1,
    ///SPI3
    pub SPI3: SPI3,
    ///SPI4
    pub SPI4: SPI4,
    ///SPI5
    pub SPI5: SPI5,
    ///SPI6
    pub SPI6: SPI6,
    ///SPI2
    pub SPI2: SPI2,
    ///ADC1
    pub ADC1: ADC1,
    ///ADC2
    pub ADC2: ADC2,
    ///ADC3
    pub ADC3: ADC3,
    ///DAC
    pub DAC: DAC,
    ///PWR
    pub PWR: PWR,
    ///IWDG
    pub IWDG: IWDG,
    ///WWDG
    pub WWDG: WWDG,
    ///ADC_Common
    pub ADC_COMMON: ADC_COMMON,
    ///TIM1
    pub TIM1: TIM1,
    ///TIM8
    pub TIM8: TIM8,
    ///TIM2
    pub TIM2: TIM2,
    ///TIM3
    pub TIM3: TIM3,
    ///TIM4
    pub TIM4: TIM4,
    ///TIM5
    pub TIM5: TIM5,
    ///TIM9
    pub TIM9: TIM9,
    ///TIM12
    pub TIM12: TIM12,
    ///TIM10
    pub TIM10: TIM10,
    ///TIM11
    pub TIM11: TIM11,
    ///TIM13
    pub TIM13: TIM13,
    ///TIM14
    pub TIM14: TIM14,
    ///TIM6
    pub TIM6: TIM6,
    ///TIM7
    pub TIM7: TIM7,
    ///Ethernet_MAC
    pub ETHERNET_MAC: ETHERNET_MAC,
    ///Ethernet_MMC
    pub ETHERNET_MMC: ETHERNET_MMC,
    ///Ethernet_PTP
    pub ETHERNET_PTP: ETHERNET_PTP,
    ///Ethernet_DMA
    pub ETHERNET_DMA: ETHERNET_DMA,
    ///CRC
    pub CRC: CRC,
    ///CAN1
    pub CAN1: CAN1,
    ///CAN2
    pub CAN2: CAN2,
    ///FLASH
    pub FLASH: FLASH,
    ///EXTI
    pub EXTI: EXTI,
    ///LTDC
    pub LTDC: LTDC,
    ///SAI1
    pub SAI1: SAI1,
    ///SAI2
    pub SAI2: SAI2,
    ///DMA2D
    pub DMA2D: DMA2D,
    ///QUADSPI
    pub QUADSPI: QUADSPI,
    ///CEC
    pub CEC: CEC,
    ///SPDIFRX
    pub SPDIFRX: SPDIFRX,
    ///SDMMC1
    pub SDMMC1: SDMMC1,
    ///LPTIM1
    pub LPTIM1: LPTIM1,
    ///I2C1
    pub I2C1: I2C1,
    ///I2C2
    pub I2C2: I2C2,
    ///I2C3
    pub I2C3: I2C3,
    ///I2C4
    pub I2C4: I2C4,
    ///RTC
    pub RTC: RTC,
    ///USART1
    pub USART1: USART1,
    ///USART6
    pub USART6: USART6,
    ///USART3
    pub USART3: USART3,
    ///USART2
    pub USART2: USART2,
    ///UART5
    pub UART5: UART5,
    ///UART4
    pub UART4: UART4,
    ///UART8
    pub UART8: UART8,
    ///UART7
    pub UART7: UART7,
    ///OTG_FS_GLOBAL
    pub OTG_FS_GLOBAL: OTG_FS_GLOBAL,
    ///OTG_FS_HOST
    pub OTG_FS_HOST: OTG_FS_HOST,
    ///OTG_FS_DEVICE
    pub OTG_FS_DEVICE: OTG_FS_DEVICE,
    ///OTG_FS_PWRCLK
    pub OTG_FS_PWRCLK: OTG_FS_PWRCLK,
    ///OTG_HS_GLOBAL
    pub OTG_HS_GLOBAL: OTG_HS_GLOBAL,
    ///OTG_HS_HOST
    pub OTG_HS_HOST: OTG_HS_HOST,
    ///OTG_HS_DEVICE
    pub OTG_HS_DEVICE: OTG_HS_DEVICE,
    ///OTG_HS_PWRCLK
    pub OTG_HS_PWRCLK: OTG_HS_PWRCLK,
}
impl Peripherals {
    /// Returns all the peripherals *once*.
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    /// Unchecked version of `Peripherals::take`.
    ///
    /// # Safety
    ///
    /// Each of the returned peripherals must be used at most once.
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            RNG: RNG::steal(),
            HASH: HASH::steal(),
            CRYP: CRYP::steal(),
            DCMI: DCMI::steal(),
            FMC: FMC::steal(),
            DBGMCU: DBGMCU::steal(),
            DMA2: DMA2::steal(),
            DMA1: DMA1::steal(),
            RCC: RCC::steal(),
            GPIOD: GPIOD::steal(),
            GPIOC: GPIOC::steal(),
            GPIOK: GPIOK::steal(),
            GPIOJ: GPIOJ::steal(),
            GPIOI: GPIOI::steal(),
            GPIOH: GPIOH::steal(),
            GPIOG: GPIOG::steal(),
            GPIOF: GPIOF::steal(),
            GPIOE: GPIOE::steal(),
            GPIOB: GPIOB::steal(),
            GPIOA: GPIOA::steal(),
            SYSCFG: SYSCFG::steal(),
            SPI1: SPI1::steal(),
            SPI3: SPI3::steal(),
            SPI4: SPI4::steal(),
            SPI5: SPI5::steal(),
            SPI6: SPI6::steal(),
            SPI2: SPI2::steal(),
            ADC1: ADC1::steal(),
            ADC2: ADC2::steal(),
            ADC3: ADC3::steal(),
            DAC: DAC::steal(),
            PWR: PWR::steal(),
            IWDG: IWDG::steal(),
            WWDG: WWDG::steal(),
            ADC_COMMON: ADC_COMMON::steal(),
            TIM1: TIM1::steal(),
            TIM8: TIM8::steal(),
            TIM2: TIM2::steal(),
            TIM3: TIM3::steal(),
            TIM4: TIM4::steal(),
            TIM5: TIM5::steal(),
            TIM9: TIM9::steal(),
            TIM12: TIM12::steal(),
            TIM10: TIM10::steal(),
            TIM11: TIM11::steal(),
            TIM13: TIM13::steal(),
            TIM14: TIM14::steal(),
            TIM6: TIM6::steal(),
            TIM7: TIM7::steal(),
            ETHERNET_MAC: ETHERNET_MAC::steal(),
            ETHERNET_MMC: ETHERNET_MMC::steal(),
            ETHERNET_PTP: ETHERNET_PTP::steal(),
            ETHERNET_DMA: ETHERNET_DMA::steal(),
            CRC: CRC::steal(),
            CAN1: CAN1::steal(),
            CAN2: CAN2::steal(),
            FLASH: FLASH::steal(),
            EXTI: EXTI::steal(),
            LTDC: LTDC::steal(),
            SAI1: SAI1::steal(),
            SAI2: SAI2::steal(),
            DMA2D: DMA2D::steal(),
            QUADSPI: QUADSPI::steal(),
            CEC: CEC::steal(),
            SPDIFRX: SPDIFRX::steal(),
            SDMMC1: SDMMC1::steal(),
            LPTIM1: LPTIM1::steal(),
            I2C1: I2C1::steal(),
            I2C2: I2C2::steal(),
            I2C3: I2C3::steal(),
            I2C4: I2C4::steal(),
            RTC: RTC::steal(),
            USART1: USART1::steal(),
            USART6: USART6::steal(),
            USART3: USART3::steal(),
            USART2: USART2::steal(),
            UART5: UART5::steal(),
            UART4: UART4::steal(),
            UART8: UART8::steal(),
            UART7: UART7::steal(),
            OTG_FS_GLOBAL: OTG_FS_GLOBAL::steal(),
            OTG_FS_HOST: OTG_FS_HOST::steal(),
            OTG_FS_DEVICE: OTG_FS_DEVICE::steal(),
            OTG_FS_PWRCLK: OTG_FS_PWRCLK::steal(),
            OTG_HS_GLOBAL: OTG_HS_GLOBAL::steal(),
            OTG_HS_HOST: OTG_HS_HOST::steal(),
            OTG_HS_DEVICE: OTG_HS_DEVICE::steal(),
            OTG_HS_PWRCLK: OTG_HS_PWRCLK::steal(),
        }
    }
}
