/*!Peripheral access API for STM32H503 microcontrollers (generated using svd2rust v0.36.1 (4052ce6 2025-04-04))

You can find an overview of the generated API [here].

API features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.

[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api
[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased
[repository]: https://github.com/rust-embedded/svd2rust*/
///Number available in the NVIC for configuring priority
pub const NVIC_PRIO_BITS: u8 = 4;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn RTC();
    fn TAMP();
    fn RAMCFG();
    fn FLASH();
    fn RCC();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn EXTI5();
    fn EXTI6();
    fn EXTI7();
    fn EXTI8();
    fn EXTI9();
    fn EXTI10();
    fn EXTI11();
    fn EXTI12();
    fn EXTI13();
    fn EXTI14();
    fn EXTI15();
    fn GPDMA1_CH0();
    fn GPDMA1_CH1();
    fn GPDMA1_CH2();
    fn GPDMA1_CH3();
    fn GPDMA1_CH4();
    fn GPDMA1_CH5();
    fn GPDMA1_CH6();
    fn GPDMA1_CH7();
    fn IWDG();
    fn ADC1();
    fn DAC1();
    fn FDCAN1_IT0();
    fn FDCAN1_IT1();
    fn TIM1_BRK_TERR_IERR();
    fn TIM1_UP();
    fn TIM1_TRG_COM_DIR_IDX();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM6();
    fn TIM7();
    fn I2C1_EV();
    fn I2C1_ER();
    fn I2C2_EV();
    fn I2C2_ER();
    fn SPI1();
    fn SPI2();
    fn SPI3();
    fn USART1();
    fn USART2();
    fn USART3();
    fn LPUART1();
    fn LPTIM1();
    fn LPTIM2();
    fn USB_FS();
    fn CRS();
    fn GPDMA2_CH0();
    fn GPDMA2_CH1();
    fn GPDMA2_CH2();
    fn GPDMA2_CH3();
    fn GPDMA2_CH4();
    fn GPDMA2_CH5();
    fn GPDMA2_CH6();
    fn GPDMA2_CH7();
    fn ICACHE();
    fn DTS_WKUP();
    fn RNG();
    fn HASH();
    fn I3C1_EV();
    fn I3C1_ER();
    fn I3C2_EV();
    fn I3C2_ER();
    fn COMP();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 134] = [
    Vector { _handler: WWDG },
    Vector { _reserved: 0 },
    Vector { _handler: RTC },
    Vector { _reserved: 0 },
    Vector { _handler: TAMP },
    Vector { _handler: RAMCFG },
    Vector { _handler: FLASH },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: RCC },
    Vector { _reserved: 0 },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector { _handler: EXTI5 },
    Vector { _handler: EXTI6 },
    Vector { _handler: EXTI7 },
    Vector { _handler: EXTI8 },
    Vector { _handler: EXTI9 },
    Vector { _handler: EXTI10 },
    Vector { _handler: EXTI11 },
    Vector { _handler: EXTI12 },
    Vector { _handler: EXTI13 },
    Vector { _handler: EXTI14 },
    Vector { _handler: EXTI15 },
    Vector {
        _handler: GPDMA1_CH0,
    },
    Vector {
        _handler: GPDMA1_CH1,
    },
    Vector {
        _handler: GPDMA1_CH2,
    },
    Vector {
        _handler: GPDMA1_CH3,
    },
    Vector {
        _handler: GPDMA1_CH4,
    },
    Vector {
        _handler: GPDMA1_CH5,
    },
    Vector {
        _handler: GPDMA1_CH6,
    },
    Vector {
        _handler: GPDMA1_CH7,
    },
    Vector { _handler: IWDG },
    Vector { _reserved: 0 },
    Vector { _handler: ADC1 },
    Vector { _handler: DAC1 },
    Vector {
        _handler: FDCAN1_IT0,
    },
    Vector {
        _handler: FDCAN1_IT1,
    },
    Vector {
        _handler: TIM1_BRK_TERR_IERR,
    },
    Vector { _handler: TIM1_UP },
    Vector {
        _handler: TIM1_TRG_COM_DIR_IDX,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: TIM6 },
    Vector { _handler: TIM7 },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ER },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: SPI3 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: LPUART1 },
    Vector { _handler: LPTIM1 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: LPTIM2 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: USB_FS },
    Vector { _handler: CRS },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: GPDMA2_CH0,
    },
    Vector {
        _handler: GPDMA2_CH1,
    },
    Vector {
        _handler: GPDMA2_CH2,
    },
    Vector {
        _handler: GPDMA2_CH3,
    },
    Vector {
        _handler: GPDMA2_CH4,
    },
    Vector {
        _handler: GPDMA2_CH5,
    },
    Vector {
        _handler: GPDMA2_CH6,
    },
    Vector {
        _handler: GPDMA2_CH7,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: ICACHE },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: DTS_WKUP },
    Vector { _handler: RNG },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: HASH },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: I3C1_EV },
    Vector { _handler: I3C1_ER },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: I3C2_EV },
    Vector { _handler: I3C2_ER },
    Vector { _handler: COMP },
];
///Enumeration of all the interrupts.
#[cfg_attr(feature = "defmt", derive(defmt::Format))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    ///0 - Window Watchdog interrupt
    WWDG = 0,
    ///2 - RTC global interrupt
    RTC = 2,
    ///4 - TAMP global interrupt
    TAMP = 4,
    ///5 - RAM configuration global interrupt
    RAMCFG = 5,
    ///6 - FLASH non-secure global interrupt
    FLASH = 6,
    ///9 - RCC global interrupt
    RCC = 9,
    ///11 - EXTI Line0 interrupt
    EXTI0 = 11,
    ///12 - EXTI Line1 interrupt
    EXTI1 = 12,
    ///13 - EXTI Line2 interrupt
    EXTI2 = 13,
    ///14 - EXTI Line3 interrupt
    EXTI3 = 14,
    ///15 - EXTI Line4 interrupt
    EXTI4 = 15,
    ///16 - EXTI Line5 interrupt
    EXTI5 = 16,
    ///17 - EXTI Line6 interrupt
    EXTI6 = 17,
    ///18 - EXTI Line7 interrupt
    EXTI7 = 18,
    ///19 - EXTI Line8 interrupt
    EXTI8 = 19,
    ///20 - EXTI Line9 interrupt
    EXTI9 = 20,
    ///21 - EXTI Line10 interrupt
    EXTI10 = 21,
    ///22 - EXTI Line11 interrupt
    EXTI11 = 22,
    ///23 - EXTI Line12 interrupt
    EXTI12 = 23,
    ///24 - EXTI Line13 interrupt
    EXTI13 = 24,
    ///25 - EXTI Line14 interrupt
    EXTI14 = 25,
    ///26 - EXTI Line15 interrupt
    EXTI15 = 26,
    ///27 - GPDMA1 channel 0 global interrupt
    GPDMA1_CH0 = 27,
    ///28 - GPDMA1 channel 1 global interrupt
    GPDMA1_CH1 = 28,
    ///29 - GPDMA1 channel 2 global interrupt
    GPDMA1_CH2 = 29,
    ///30 - GPDMA1 channel 3 global interrupt
    GPDMA1_CH3 = 30,
    ///31 - GPDMA1 channel 4 global interrupt
    GPDMA1_CH4 = 31,
    ///32 - GPDMA1 channel 5 global interrupt
    GPDMA1_CH5 = 32,
    ///33 - GPDMA1 channel 6 global interrupt
    GPDMA1_CH6 = 33,
    ///34 - GPDMA1 channel 7 global interrupt
    GPDMA1_CH7 = 34,
    ///35 - IWDG interrupt
    IWDG = 35,
    ///37 - ADC1 global interrupt
    ADC1 = 37,
    ///38 - DAC1 global interrupt
    DAC1 = 38,
    ///39 - FDCAN1 interrupt 0
    FDCAN1_IT0 = 39,
    ///40 - FDCAN1 interrupt 1
    FDCAN1_IT1 = 40,
    ///41 - TIM1 break/TIM1 transition error/TIM1 index error
    TIM1_BRK_TERR_IERR = 41,
    ///42 - TIM1 Update
    TIM1_UP = 42,
    ///43 - TIM1 trigger and commutation/TIM1 direction change interrupt/TIM1 index
    TIM1_TRG_COM_DIR_IDX = 43,
    ///44 - TIM1 capture compare interrupt
    TIM1_CC = 44,
    ///45 - TIM2 global interrupt
    TIM2 = 45,
    ///46 - TIM3 global interrupt
    TIM3 = 46,
    ///49 - TIM6 global interrupt
    TIM6 = 49,
    ///50 - TIM7 global interrupt
    TIM7 = 50,
    ///51 - I2C1 event interrupt
    I2C1_EV = 51,
    ///52 - I2C1 error interrupt
    I2C1_ER = 52,
    ///53 - I2C2 event interrupt
    I2C2_EV = 53,
    ///54 - I2C2 error interrupt
    I2C2_ER = 54,
    ///55 - SPI1 global interrupt
    SPI1 = 55,
    ///56 - SPI2 global interrupt
    SPI2 = 56,
    ///57 - SPI3 global interrupt
    SPI3 = 57,
    ///58 - USART1 global interrupt
    USART1 = 58,
    ///59 - USART2 global interrupt
    USART2 = 59,
    ///60 - USART3 global interrupt
    USART3 = 60,
    ///63 - LPUART1 global interrupt
    LPUART1 = 63,
    ///64 - LPTIM1 global interrupt
    LPTIM1 = 64,
    ///70 - LPTIM2 global interrupt
    LPTIM2 = 70,
    ///74 - USB OTG FS global interrupt
    USB_FS = 74,
    ///75 - Clock Recovery System global interrupt
    CRS = 75,
    ///90 - GPDMA2 channel 0 global interrupt
    GPDMA2_CH0 = 90,
    ///91 - GPDMA2 channel 1 global interrupt
    GPDMA2_CH1 = 91,
    ///92 - GPDMA2 channel 2 global interrupt
    GPDMA2_CH2 = 92,
    ///93 - GPDMA2 channel 3 global interrupt
    GPDMA2_CH3 = 93,
    ///94 - GPDMA2 channel 4 global interrupt
    GPDMA2_CH4 = 94,
    ///95 - GPDMA2 channel 5 global interrupt
    GPDMA2_CH5 = 95,
    ///96 - GPDMA2 channel 6 global interrupt
    GPDMA2_CH6 = 96,
    ///97 - GPDMA2 channel 7 global interrupt
    GPDMA2_CH7 = 97,
    ///104 - Instruction cache global interrupt
    ICACHE = 104,
    ///113 - DTS interrupt or DTS AIT through EXTI line
    DTS_WKUP = 113,
    ///114 - RNG global interrupt
    RNG = 114,
    ///117 - HASH interrupt
    HASH = 117,
    ///123 - I3C1 event interrupt
    I3C1_EV = 123,
    ///124 - I3C1 error interrupt
    I3C1_ER = 124,
    ///131 - I3C2 event interrupt
    I3C2_EV = 131,
    ///132 - I3C2 error interrupt
    I3C2_ER = 132,
    ///133 - COMP global interrupt
    COMP = 133,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
///Analog to digital converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#ADC1)
pub type ADC1 = crate::Periph<adc1::RegisterBlock, 0x4202_8000>;
impl core::fmt::Debug for ADC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC1").finish()
    }
}
///Analog to digital converter
pub mod adc1;
///Comparator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#COMP)
pub type COMP = crate::Periph<comp::RegisterBlock, 0x4000_4000>;
impl core::fmt::Debug for COMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("COMP").finish()
    }
}
///Comparator
pub mod comp;
///Cyclic redundancy check calculation unit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#CRC)
pub type CRC = crate::Periph<crc::RegisterBlock, 0x4002_3000>;
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
///Cyclic redundancy check calculation unit
pub mod crc;
///Clock recovery system
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#CRS)
pub type CRS = crate::Periph<crs::RegisterBlock, 0x4000_6000>;
impl core::fmt::Debug for CRS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRS").finish()
    }
}
///Clock recovery system
pub mod crs;
///Digital to analog converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#DAC)
pub type DAC = crate::Periph<dac::RegisterBlock, 0x4202_8400>;
impl core::fmt::Debug for DAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DAC").finish()
    }
}
///Digital to analog converter
pub mod dac;
///Microcontroller debug unit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#DBGMCU)
pub type DBGMCU = crate::Periph<dbgmcu::RegisterBlock, 0x4402_4000>;
impl core::fmt::Debug for DBGMCU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBGMCU").finish()
    }
}
///Microcontroller debug unit
pub mod dbgmcu;
///Digital temperature sensor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#DTS)
pub type DTS = crate::Periph<dts::RegisterBlock, 0x4000_8c00>;
impl core::fmt::Debug for DTS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DTS").finish()
    }
}
///Digital temperature sensor
pub mod dts;
///Extended interrupt/event controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#EXTI)
pub type EXTI = crate::Periph<exti::RegisterBlock, 0x4402_2000>;
impl core::fmt::Debug for EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI").finish()
    }
}
///Extended interrupt/event controller
pub mod exti;
///Controller area network
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#FDCAN1)
pub type FDCAN1 = crate::Periph<fdcan1::RegisterBlock, 0x4000_a400>;
impl core::fmt::Debug for FDCAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN1").finish()
    }
}
///Controller area network
pub mod fdcan1;
///FLASH address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#FLASH)
pub type FLASH = crate::Periph<flash::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
///FLASH address block description
pub mod flash;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#GPIOA)
pub type GPIOA = crate::Periph<gpioa::RegisterBlock, 0x4202_0000>;
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
///General-purpose I/Os
pub mod gpioa;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#GPIOB)
pub type GPIOB = crate::Periph<gpiob::RegisterBlock, 0x4202_0400>;
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
///General-purpose I/Os
pub mod gpiob;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#GPIOC)
pub type GPIOC = crate::Periph<gpioc::RegisterBlock, 0x4202_0800>;
impl core::fmt::Debug for GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC").finish()
    }
}
///General-purpose I/Os
pub mod gpioc;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#GPIOC)
pub type GPIOD = crate::Periph<gpioc::RegisterBlock, 0x4202_0c00>;
impl core::fmt::Debug for GPIOD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOD").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpiod;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#GPIOH)
pub type GPIOH = crate::Periph<gpioh::RegisterBlock, 0x4202_1c00>;
impl core::fmt::Debug for GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOH").finish()
    }
}
///General-purpose I/Os
pub mod gpioh;
///Global privilege controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#GTZC1)
pub type GTZC1 = crate::Periph<gtzc1::RegisterBlock, 0x4003_2400>;
impl core::fmt::Debug for GTZC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1").finish()
    }
}
///Global privilege controller
pub mod gtzc1;
///General purpose direct memory access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#GPDMA1)
pub type GPDMA1 = crate::Periph<gpdma1::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for GPDMA1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA1").finish()
    }
}
///General purpose direct memory access controller
pub mod gpdma1;
///General purpose direct memory access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#GPDMA1)
pub type GPDMA2 = crate::Periph<gpdma1::RegisterBlock, 0x4002_1000>;
impl core::fmt::Debug for GPDMA2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA2").finish()
    }
}
///General purpose direct memory access controller
pub use self::gpdma1 as gpdma2;
///Hash processor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#HASH)
pub type HASH = crate::Periph<hash::RegisterBlock, 0x420c_0400>;
impl core::fmt::Debug for HASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HASH").finish()
    }
}
///Hash processor
pub mod hash;
///Instruction cache
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#ICACHE)
pub type ICACHE = crate::Periph<icache::RegisterBlock, 0x4003_0400>;
impl core::fmt::Debug for ICACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ICACHE").finish()
    }
}
///Instruction cache
pub mod icache;
///Independent watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#IWDG)
pub type IWDG = crate::Periph<iwdg::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG").finish()
    }
}
///Independent watchdog
pub mod iwdg;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#I2C1)
pub type I2C1 = crate::Periph<i2c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
///Inter-integrated circuit
pub mod i2c1;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#I2C1)
pub type I2C2 = crate::Periph<i2c1::RegisterBlock, 0x4000_5800>;
impl core::fmt::Debug for I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c2;
///Improved inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#I3C1)
pub type I3C1 = crate::Periph<i3c1::RegisterBlock, 0x4000_5c00>;
impl core::fmt::Debug for I3C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C1").finish()
    }
}
///Improved inter-integrated circuit
pub mod i3c1;
///Improved inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#I3C1)
pub type I3C2 = crate::Periph<i3c1::RegisterBlock, 0x4400_3000>;
impl core::fmt::Debug for I3C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C2").finish()
    }
}
///Improved inter-integrated circuit
pub use self::i3c1 as i3c2;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#LPTIM1)
pub type LPTIM1 = crate::Periph<lptim1::RegisterBlock, 0x4400_4400>;
impl core::fmt::Debug for LPTIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM1").finish()
    }
}
///Low power timer
pub mod lptim1;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#LPTIM1)
pub type LPTIM2 = crate::Periph<lptim1::RegisterBlock, 0x4000_9400>;
impl core::fmt::Debug for LPTIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM2").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim2;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#LPUART)
pub type LPUART = crate::Periph<lpuart::RegisterBlock, 0x4400_2400>;
impl core::fmt::Debug for LPUART {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub mod lpuart;
///Operational amplifiers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#OPAMP1)
pub type OPAMP1 = crate::Periph<opamp1::RegisterBlock, 0x4000_3400>;
impl core::fmt::Debug for OPAMP1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OPAMP1").finish()
    }
}
///Operational amplifiers
pub mod opamp1;
///Power control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#PWR)
pub type PWR = crate::Periph<pwr::RegisterBlock, 0x4402_0800>;
impl core::fmt::Debug for PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR").finish()
    }
}
///Power control
pub mod pwr;
///RAMs configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#RAMCFG)
pub type RAMCFG = crate::Periph<ramcfg::RegisterBlock, 0x4002_6000>;
impl core::fmt::Debug for RAMCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAMCFG").finish()
    }
}
///RAMs configuration controller
pub mod ramcfg;
///Reset and clock controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#RCC)
pub type RCC = crate::Periph<rcc::RegisterBlock, 0x4402_0c00>;
impl core::fmt::Debug for RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC").finish()
    }
}
///Reset and clock controller
pub mod rcc;
///True random number generator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#RNG)
pub type RNG = crate::Periph<rng::RegisterBlock, 0x420c_0800>;
impl core::fmt::Debug for RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG").finish()
    }
}
///True random number generator
pub mod rng;
///Real-time clock
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#RTC)
pub type RTC = crate::Periph<rtc::RegisterBlock, 0x4400_7800>;
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
///Real-time clock
pub mod rtc;
///System configuration, boot and security
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#SBS)
pub type SBS = crate::Periph<sbs::RegisterBlock, 0x4400_0400>;
impl core::fmt::Debug for SBS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SBS").finish()
    }
}
///System configuration, boot and security
pub mod sbs;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#SPI1)
pub type SPI1 = crate::Periph<spi1::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
///Serial peripheral interface
pub mod spi1;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#SPI1)
pub type SPI2 = crate::Periph<spi1::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi2;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#SPI1)
pub type SPI3 = crate::Periph<spi1::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi3;
///Tamper and backup registers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#TAMP)
pub type TAMP = crate::Periph<tamp::RegisterBlock, 0x4400_7c00>;
impl core::fmt::Debug for TAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TAMP").finish()
    }
}
///Tamper and backup registers
pub mod tamp;
///Advanced-control timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#TIM1)
pub type TIM1 = crate::Periph<tim1::RegisterBlock, 0x4001_2c00>;
impl core::fmt::Debug for TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1").finish()
    }
}
///Advanced-control timers
pub mod tim1;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#TIM2)
pub type TIM2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2").finish()
    }
}
///General-purpose timers
pub mod tim2;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#TIM3)
pub type TIM3 = crate::Periph<tim3::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3").finish()
    }
}
///General-purpose timers
pub mod tim3;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#TIM6)
pub type TIM6 = crate::Periph<tim6::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for TIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM6").finish()
    }
}
///Basic timers
pub mod tim6;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#TIM6)
pub type TIM7 = crate::Periph<tim6::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for TIM7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM7").finish()
    }
}
///Basic timers
pub use self::tim6 as tim7;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#USART1)
pub type USART1 = crate::Periph<usart1::RegisterBlock, 0x4001_3800>;
impl core::fmt::Debug for USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub mod usart1;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#USART1)
pub type USART2 = crate::Periph<usart1::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart2;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#USART1)
pub type USART3 = crate::Periph<usart1::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for USART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART3").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart3;
///USB full speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#USB)
pub type USB = crate::Periph<usb::RegisterBlock, 0x4001_6000>;
impl core::fmt::Debug for USB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB").finish()
    }
}
///USB full speed
pub mod usb;
///System window watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H503.html#WWDG)
pub type WWDG = crate::Periph<wwdg::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG").finish()
    }
}
///System window watchdog
pub mod wwdg;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
/// All the peripherals.
#[allow(non_snake_case)]
pub struct Peripherals {
    ///ADC1
    pub ADC1: ADC1,
    ///COMP
    pub COMP: COMP,
    ///CRC
    pub CRC: CRC,
    ///CRS
    pub CRS: CRS,
    ///DAC
    pub DAC: DAC,
    ///DBGMCU
    pub DBGMCU: DBGMCU,
    ///DTS
    pub DTS: DTS,
    ///EXTI
    pub EXTI: EXTI,
    ///FDCAN1
    pub FDCAN1: FDCAN1,
    ///FLASH
    pub FLASH: FLASH,
    ///GPIOA
    pub GPIOA: GPIOA,
    ///GPIOB
    pub GPIOB: GPIOB,
    ///GPIOC
    pub GPIOC: GPIOC,
    ///GPIOD
    pub GPIOD: GPIOD,
    ///GPIOH
    pub GPIOH: GPIOH,
    ///GTZC1
    pub GTZC1: GTZC1,
    ///GPDMA1
    pub GPDMA1: GPDMA1,
    ///GPDMA2
    pub GPDMA2: GPDMA2,
    ///HASH
    pub HASH: HASH,
    ///ICACHE
    pub ICACHE: ICACHE,
    ///IWDG
    pub IWDG: IWDG,
    ///I2C1
    pub I2C1: I2C1,
    ///I2C2
    pub I2C2: I2C2,
    ///I3C1
    pub I3C1: I3C1,
    ///I3C2
    pub I3C2: I3C2,
    ///LPTIM1
    pub LPTIM1: LPTIM1,
    ///LPTIM2
    pub LPTIM2: LPTIM2,
    ///LPUART
    pub LPUART: LPUART,
    ///OPAMP1
    pub OPAMP1: OPAMP1,
    ///PWR
    pub PWR: PWR,
    ///RAMCFG
    pub RAMCFG: RAMCFG,
    ///RCC
    pub RCC: RCC,
    ///RNG
    pub RNG: RNG,
    ///RTC
    pub RTC: RTC,
    ///SBS
    pub SBS: SBS,
    ///SPI1
    pub SPI1: SPI1,
    ///SPI2
    pub SPI2: SPI2,
    ///SPI3
    pub SPI3: SPI3,
    ///TAMP
    pub TAMP: TAMP,
    ///TIM1
    pub TIM1: TIM1,
    ///TIM2
    pub TIM2: TIM2,
    ///TIM3
    pub TIM3: TIM3,
    ///TIM6
    pub TIM6: TIM6,
    ///TIM7
    pub TIM7: TIM7,
    ///USART1
    pub USART1: USART1,
    ///USART2
    pub USART2: USART2,
    ///USART3
    pub USART3: USART3,
    ///USB
    pub USB: USB,
    ///WWDG
    pub WWDG: WWDG,
}
impl Peripherals {
    /// Returns all the peripherals *once*.
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    /// Unchecked version of `Peripherals::take`.
    ///
    /// # Safety
    ///
    /// Each of the returned peripherals must be used at most once.
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            ADC1: ADC1::steal(),
            COMP: COMP::steal(),
            CRC: CRC::steal(),
            CRS: CRS::steal(),
            DAC: DAC::steal(),
            DBGMCU: DBGMCU::steal(),
            DTS: DTS::steal(),
            EXTI: EXTI::steal(),
            FDCAN1: FDCAN1::steal(),
            FLASH: FLASH::steal(),
            GPIOA: GPIOA::steal(),
            GPIOB: GPIOB::steal(),
            GPIOC: GPIOC::steal(),
            GPIOD: GPIOD::steal(),
            GPIOH: GPIOH::steal(),
            GTZC1: GTZC1::steal(),
            GPDMA1: GPDMA1::steal(),
            GPDMA2: GPDMA2::steal(),
            HASH: HASH::steal(),
            ICACHE: ICACHE::steal(),
            IWDG: IWDG::steal(),
            I2C1: I2C1::steal(),
            I2C2: I2C2::steal(),
            I3C1: I3C1::steal(),
            I3C2: I3C2::steal(),
            LPTIM1: LPTIM1::steal(),
            LPTIM2: LPTIM2::steal(),
            LPUART: LPUART::steal(),
            OPAMP1: OPAMP1::steal(),
            PWR: PWR::steal(),
            RAMCFG: RAMCFG::steal(),
            RCC: RCC::steal(),
            RNG: RNG::steal(),
            RTC: RTC::steal(),
            SBS: SBS::steal(),
            SPI1: SPI1::steal(),
            SPI2: SPI2::steal(),
            SPI3: SPI3::steal(),
            TAMP: TAMP::steal(),
            TIM1: TIM1::steal(),
            TIM2: TIM2::steal(),
            TIM3: TIM3::steal(),
            TIM6: TIM6::steal(),
            TIM7: TIM7::steal(),
            USART1: USART1::steal(),
            USART2: USART2::steal(),
            USART3: USART3::steal(),
            USB: USB::steal(),
            WWDG: WWDG::steal(),
        }
    }
}
