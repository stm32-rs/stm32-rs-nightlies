/*!Peripheral access API for STM32H523 microcontrollers (generated using svd2rust v0.36.1 (4052ce6 2025-04-04))

You can find an overview of the generated API [here].

API features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.

[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api
[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased
[repository]: https://github.com/rust-embedded/svd2rust*/
///Number available in the NVIC for configuring priority
pub const NVIC_PRIO_BITS: u8 = 4;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn RTC();
    fn RTC_S();
    fn TAMP();
    fn RAMCFG();
    fn FLASH();
    fn FLASH_S();
    fn GTZC();
    fn RCC();
    fn RCC_S();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn EXTI5();
    fn EXTI6();
    fn EXTI7();
    fn EXTI8();
    fn EXTI9();
    fn EXTI10();
    fn EXTI11();
    fn EXTI12();
    fn EXTI13();
    fn EXTI14();
    fn EXTI15();
    fn GPDMA1_CH0();
    fn GPDMA1_CH1();
    fn GPDMA1_CH2();
    fn GPDMA1_CH3();
    fn GPDMA1_CH4();
    fn GPDMA1_CH5();
    fn GPDMA1_CH6();
    fn GPDMA1_CH7();
    fn IWDG();
    fn ADC1();
    fn DAC1();
    fn FDCAN1_IT0();
    fn FDCAN1_IT1();
    fn TIM1_BRK_TERR_IERR();
    fn TIM1_UPD();
    fn TIM1_TRGI_COM_DIR_IDX();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM4();
    fn TIM5();
    fn TIM6();
    fn TIM7();
    fn I2C1_EV();
    fn I2C1_ERR();
    fn I2C2_EV();
    fn I2C2_ERR();
    fn SPI1();
    fn SPI2();
    fn SPI3();
    fn USART1();
    fn USART2();
    fn USART3();
    fn UART4();
    fn UART5();
    fn LPUART1();
    fn LPTIM1();
    fn TIM8_BRK_TERR_IERR();
    fn TIM8_UPD();
    fn TIM8_TRGI_DIR_IDX();
    fn TIM8_CC();
    fn ADC2();
    fn LPTIM2();
    fn TIM15();
    fn USB_FS();
    fn CRS();
    fn UCPD1();
    fn FMC();
    fn OCTOSPI1();
    fn SDMMC1();
    fn I2C3_EV();
    fn I2C3_ERR();
    fn SPI4();
    fn USART6();
    fn GPDMA2_CH0();
    fn GPDMA2_CH1();
    fn GPDMA2_CH2();
    fn GPDMA2_CH3();
    fn GPDMA2_CH4();
    fn GPDMA2_CH5();
    fn GPDMA2_CH6();
    fn GPDMA2_CH7();
    fn FPU();
    fn ICACHE();
    fn DCACHE();
    fn DCMI_PSSI();
    fn FDCAN2_IT0();
    fn FDCAN2_IT1();
    fn DTS_OR_DTS_WKUP();
    fn RNG();
    fn HASH();
    fn CEC();
    fn I3C1_EV();
    fn I3C1_ERR();
    fn I3C2_EV();
    fn I3C2_ERR();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 133] = [
    Vector { _handler: WWDG },
    Vector { _reserved: 0 },
    Vector { _handler: RTC },
    Vector { _handler: RTC_S },
    Vector { _handler: TAMP },
    Vector { _handler: RAMCFG },
    Vector { _handler: FLASH },
    Vector { _handler: FLASH_S },
    Vector { _handler: GTZC },
    Vector { _handler: RCC },
    Vector { _handler: RCC_S },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector { _handler: EXTI5 },
    Vector { _handler: EXTI6 },
    Vector { _handler: EXTI7 },
    Vector { _handler: EXTI8 },
    Vector { _handler: EXTI9 },
    Vector { _handler: EXTI10 },
    Vector { _handler: EXTI11 },
    Vector { _handler: EXTI12 },
    Vector { _handler: EXTI13 },
    Vector { _handler: EXTI14 },
    Vector { _handler: EXTI15 },
    Vector {
        _handler: GPDMA1_CH0,
    },
    Vector {
        _handler: GPDMA1_CH1,
    },
    Vector {
        _handler: GPDMA1_CH2,
    },
    Vector {
        _handler: GPDMA1_CH3,
    },
    Vector {
        _handler: GPDMA1_CH4,
    },
    Vector {
        _handler: GPDMA1_CH5,
    },
    Vector {
        _handler: GPDMA1_CH6,
    },
    Vector {
        _handler: GPDMA1_CH7,
    },
    Vector { _handler: IWDG },
    Vector { _reserved: 0 },
    Vector { _handler: ADC1 },
    Vector { _handler: DAC1 },
    Vector {
        _handler: FDCAN1_IT0,
    },
    Vector {
        _handler: FDCAN1_IT1,
    },
    Vector {
        _handler: TIM1_BRK_TERR_IERR,
    },
    Vector { _handler: TIM1_UPD },
    Vector {
        _handler: TIM1_TRGI_COM_DIR_IDX,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM4 },
    Vector { _handler: TIM5 },
    Vector { _handler: TIM6 },
    Vector { _handler: TIM7 },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ERR },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ERR },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: SPI3 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector { _handler: UART4 },
    Vector { _handler: UART5 },
    Vector { _handler: LPUART1 },
    Vector { _handler: LPTIM1 },
    Vector {
        _handler: TIM8_BRK_TERR_IERR,
    },
    Vector { _handler: TIM8_UPD },
    Vector {
        _handler: TIM8_TRGI_DIR_IDX,
    },
    Vector { _handler: TIM8_CC },
    Vector { _handler: ADC2 },
    Vector { _handler: LPTIM2 },
    Vector { _handler: TIM15 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: USB_FS },
    Vector { _handler: CRS },
    Vector { _handler: UCPD1 },
    Vector { _handler: FMC },
    Vector { _handler: OCTOSPI1 },
    Vector { _handler: SDMMC1 },
    Vector { _handler: I2C3_EV },
    Vector { _handler: I2C3_ERR },
    Vector { _handler: SPI4 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: USART6 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: GPDMA2_CH0,
    },
    Vector {
        _handler: GPDMA2_CH1,
    },
    Vector {
        _handler: GPDMA2_CH2,
    },
    Vector {
        _handler: GPDMA2_CH3,
    },
    Vector {
        _handler: GPDMA2_CH4,
    },
    Vector {
        _handler: GPDMA2_CH5,
    },
    Vector {
        _handler: GPDMA2_CH6,
    },
    Vector {
        _handler: GPDMA2_CH7,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: FPU },
    Vector { _handler: ICACHE },
    Vector { _handler: DCACHE },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: DCMI_PSSI,
    },
    Vector {
        _handler: FDCAN2_IT0,
    },
    Vector {
        _handler: FDCAN2_IT1,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: DTS_OR_DTS_WKUP,
    },
    Vector { _handler: RNG },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: HASH },
    Vector { _reserved: 0 },
    Vector { _handler: CEC },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: I3C1_EV },
    Vector { _handler: I3C1_ERR },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: I3C2_EV },
    Vector { _handler: I3C2_ERR },
];
///Enumeration of all the interrupts.
#[cfg_attr(feature = "defmt", derive(defmt::Format))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    ///0 - Window Watchdog interrupt
    WWDG = 0,
    ///2 - RTC global non-secure interrupts
    RTC = 2,
    ///3 - RTC global secure interrupts
    RTC_S = 3,
    ///4 - Tamper global interrupts
    TAMP = 4,
    ///5 - RAM configuration global interrupt
    RAMCFG = 5,
    ///6 - Flash non-secure global interrupt
    FLASH = 6,
    ///7 - Flash secure global interrupt
    FLASH_S = 7,
    ///8 - GTZC global interrupt
    GTZC = 8,
    ///9 - RCC non-secure global interrupt
    RCC = 9,
    ///10 - RCC secure global interrupt
    RCC_S = 10,
    ///11 - EXTI Line0 interrupt
    EXTI0 = 11,
    ///12 - EXTI Line1 interrupt
    EXTI1 = 12,
    ///13 - EXTI Line2 interrupt
    EXTI2 = 13,
    ///14 - EXTI Line3 interrupt
    EXTI3 = 14,
    ///15 - EXTI Line4 interrupt
    EXTI4 = 15,
    ///16 - EXTI Line5 interrupt
    EXTI5 = 16,
    ///17 - EXTI Line6 interrupt
    EXTI6 = 17,
    ///18 - EXTI Line7 interrupt
    EXTI7 = 18,
    ///19 - EXTI Line8 interrupt
    EXTI8 = 19,
    ///20 - EXTI Line9 interrupt
    EXTI9 = 20,
    ///21 - EXTI Line10 interrupt
    EXTI10 = 21,
    ///22 - EXTI Line11 interrupt
    EXTI11 = 22,
    ///23 - EXTI Line12 interrupt
    EXTI12 = 23,
    ///24 - EXTI Line13 interrupt
    EXTI13 = 24,
    ///25 - EXTI Line14 interrupt
    EXTI14 = 25,
    ///26 - EXTI Line15 interrupt
    EXTI15 = 26,
    ///27 - GPDMA1 channel0 global interrupt
    GPDMA1_CH0 = 27,
    ///28 - GPDMA1 channel1 global interrupt
    GPDMA1_CH1 = 28,
    ///29 - GPDMA1 channel2 global interrupt
    GPDMA1_CH2 = 29,
    ///30 - GPDMA1 channel3 global interrupt
    GPDMA1_CH3 = 30,
    ///31 - GPDMA1 channel4 global interrupt
    GPDMA1_CH4 = 31,
    ///32 - GPDMA1 channel5 global interrupt
    GPDMA1_CH5 = 32,
    ///33 - GPDMA1 channel6 global interrupt
    GPDMA1_CH6 = 33,
    ///34 - GPDMA1 channel7 global interrupt
    GPDMA1_CH7 = 34,
    ///35 - Independent watchdog interrupt
    IWDG = 35,
    ///37 - ADC1 global interrupt
    ADC1 = 37,
    ///38 - DAC1 global interrupt
    DAC1 = 38,
    ///39 - FDCAN1 Interrupt 0
    FDCAN1_IT0 = 39,
    ///40 - FDCAN1 Interrupt 1
    FDCAN1_IT1 = 40,
    ///41 - TIM1 Break/TIM1 Transition error/TIM1 Index error
    TIM1_BRK_TERR_IERR = 41,
    ///42 - TIM1 Update
    TIM1_UPD = 42,
    ///43 - TIM1 trigger and commutation/TIM1 Direction Change interrupt/TIM1 Index
    TIM1_TRGI_COM_DIR_IDX = 43,
    ///44 - TIM1 capture compare interrupt
    TIM1_CC = 44,
    ///45 - TIM2 global interrupt
    TIM2 = 45,
    ///46 - TIM3 global interrupt
    TIM3 = 46,
    ///47 - TIM4 global interrupt
    TIM4 = 47,
    ///48 - TIM5 global interrupt
    TIM5 = 48,
    ///49 - TIM6 global interrupt
    TIM6 = 49,
    ///50 - TIM7 global interrupt
    TIM7 = 50,
    ///51 - I2C1 event interrupt
    I2C1_EV = 51,
    ///52 - I2C1 error interrupt
    I2C1_ERR = 52,
    ///53 - I2C2 event interrupt
    I2C2_EV = 53,
    ///54 - I2C2 error interrupt
    I2C2_ERR = 54,
    ///55 - SPI1 global interrupt
    SPI1 = 55,
    ///56 - SPI2 global interrupt
    SPI2 = 56,
    ///57 - SPI3 global interrupt
    SPI3 = 57,
    ///58 - USART1 global interrupt
    USART1 = 58,
    ///59 - USART2 global interrupt
    USART2 = 59,
    ///60 - USART3 global interrupt
    USART3 = 60,
    ///61 - UART4 global interrupt
    UART4 = 61,
    ///62 - UART5 global interrupt
    UART5 = 62,
    ///63 - LPUART1 global interrupt OR LPUART1 R Wakeup OR LPUART1 T Wakeup Char(10)through EXTI line
    LPUART1 = 63,
    ///64 - LPTIM1 global interrupt OR LPTimer1 AIT through EXTI line
    LPTIM1 = 64,
    ///65 - TIM8 Break interrupt/TIM8 Transition error/TIM8 Index error
    TIM8_BRK_TERR_IERR = 65,
    ///66 - TIM8 Update interrupt
    TIM8_UPD = 66,
    ///67 - TIM8 trigger and commutation interrupt/TIM8 Direction Change interrupt/TIM8 Index
    TIM8_TRGI_DIR_IDX = 67,
    ///68 - TIM8 capture compare interrupt
    TIM8_CC = 68,
    ///69 - ADC2 global interrupt
    ADC2 = 69,
    ///70 - LPTIM2 global interrupt OR LPTimer2 AIT through EXTI line
    LPTIM2 = 70,
    ///71 - TIM15 global interrupt
    TIM15 = 71,
    ///74 - USB OTG FS global interrupt
    USB_FS = 74,
    ///75 - Clock Recovery System global interrupt
    CRS = 75,
    ///76 - UCPD1 global interrupt
    UCPD1 = 76,
    ///77 - FMC global interrupt
    FMC = 77,
    ///78 - OCTOSPI1 global interrupt
    OCTOSPI1 = 78,
    ///79 - SDMMC1 global interrupt
    SDMMC1 = 79,
    ///80 - I2C3 event interrupt
    I2C3_EV = 80,
    ///81 - I2C3 error interrupt
    I2C3_ERR = 81,
    ///82 - SPI4 global interrupt
    SPI4 = 82,
    ///85 - USART6 global interrupt
    USART6 = 85,
    ///90 - GPDMA2 channel0 global interrupt
    GPDMA2_CH0 = 90,
    ///91 - GPDMA2 channel1 global interrupt
    GPDMA2_CH1 = 91,
    ///92 - GPDMA2 channel2 global interrupt
    GPDMA2_CH2 = 92,
    ///93 - GPDMA2 channe3 global interrupt
    GPDMA2_CH3 = 93,
    ///94 - GPDMA2 channel4 global interrupt
    GPDMA2_CH4 = 94,
    ///95 - GPDMA2 channel5 global interrupt
    GPDMA2_CH5 = 95,
    ///96 - GPDMA2 channel6 global interrupt
    GPDMA2_CH6 = 96,
    ///97 - GPDMA2 channel7 global interrupt
    GPDMA2_CH7 = 97,
    ///103 - Floating point interrupt
    FPU = 103,
    ///104 - Instruction cache global interrupt
    ICACHE = 104,
    ///105 - Data cache global interrupt
    DCACHE = 105,
    ///108 - DCMI/PSSI global interrupt
    DCMI_PSSI = 108,
    ///109 - FDCAN2 Interrupt 0
    FDCAN2_IT0 = 109,
    ///110 - FDCAN2 Interrupt 1
    FDCAN2_IT1 = 110,
    ///113 - DTS interrupt OR DTS AIT through EXTI line
    DTS_OR_DTS_WKUP = 113,
    ///114 - RNG global interrupt
    RNG = 114,
    ///117 - HASH interrupt
    HASH = 117,
    ///119 - HDMI-CEC global interrupt
    CEC = 119,
    ///123 - I3C1 event interrupt
    I3C1_EV = 123,
    ///124 - I3C1 error interrupt
    I3C1_ERR = 124,
    ///131 - I3C2 event interrupt
    I3C2_EV = 131,
    ///132 - I3C2 error interrupt
    I3C2_ERR = 132,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
///ADC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#ADC1)
pub type ADC1 = crate::Periph<adc1::RegisterBlock, 0x4202_8000>;
impl core::fmt::Debug for ADC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC1").finish()
    }
}
///ADC register block
pub mod adc1;
///ADC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#ADC1)
pub type ADC1_S = crate::Periph<adc1::RegisterBlock, 0x5202_8000>;
impl core::fmt::Debug for ADC1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC1_S").finish()
    }
}
///ADC register block
pub use self::adc1 as adc1_s;
///ADC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#ADC1)
pub type ADC2 = crate::Periph<adc1::RegisterBlock, 0x4202_8100>;
impl core::fmt::Debug for ADC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC2").finish()
    }
}
///ADC register block
pub use self::adc1 as adc2;
///ADC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#ADC1)
pub type ADC2_S = crate::Periph<adc1::RegisterBlock, 0x5202_8100>;
impl core::fmt::Debug for ADC2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC2_S").finish()
    }
}
///ADC register block
pub use self::adc1 as adc2_s;
///ADC common registers block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#ADCC)
pub type ADCC = crate::Periph<adcc::RegisterBlock, 0x4202_8300>;
impl core::fmt::Debug for ADCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADCC").finish()
    }
}
///ADC common registers block
pub mod adcc;
///ADC common registers block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#ADCC)
pub type SEC_ADCC = crate::Periph<adcc::RegisterBlock, 0x5202_8300>;
impl core::fmt::Debug for SEC_ADCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_ADCC").finish()
    }
}
///ADC common registers block
pub use self::adcc as sec_adcc;
///CRC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#CRC)
pub type CRC = crate::Periph<crc::RegisterBlock, 0x4002_3000>;
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
///CRC address block description
pub mod crc;
///CRC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#CRC)
pub type CRC_S = crate::Periph<crc::RegisterBlock, 0x5002_3000>;
impl core::fmt::Debug for CRC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC_S").finish()
    }
}
///CRC address block description
pub use self::crc as crc_s;
///CRS address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#CRS)
pub type CRS = crate::Periph<crs::RegisterBlock, 0x4000_6000>;
impl core::fmt::Debug for CRS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRS").finish()
    }
}
///CRS address block description
pub mod crs;
///CRS address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#CRS)
pub type CRS_S = crate::Periph<crs::RegisterBlock, 0x5000_6000>;
impl core::fmt::Debug for CRS_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRS_S").finish()
    }
}
///CRS address block description
pub use self::crs as crs_s;
///DAC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DAC)
pub type DAC = crate::Periph<dac::RegisterBlock, 0x4202_8400>;
impl core::fmt::Debug for DAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DAC").finish()
    }
}
///DAC address block description
pub mod dac;
///DAC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DAC)
pub type DAC_S = crate::Periph<dac::RegisterBlock, 0x5202_8400>;
impl core::fmt::Debug for DAC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DAC_S").finish()
    }
}
///DAC address block description
pub use self::dac as dac_s;
///DBGMCU register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DBGMCU)
pub type DBGMCU = crate::Periph<dbgmcu::RegisterBlock, 0x4402_4000>;
impl core::fmt::Debug for DBGMCU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBGMCU").finish()
    }
}
///DBGMCU register block
pub mod dbgmcu;
///DBGMCU register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DBGMCU)
pub type DBGMCU_S = crate::Periph<dbgmcu::RegisterBlock, 0x5402_4000>;
impl core::fmt::Debug for DBGMCU_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBGMCU_S").finish()
    }
}
///DBGMCU register block
pub use self::dbgmcu as dbgmcu_s;
///DCACHE register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DCACHE)
pub type DCACHE = crate::Periph<dcache::RegisterBlock, 0x4003_1400>;
impl core::fmt::Debug for DCACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCACHE").finish()
    }
}
///DCACHE register block
pub mod dcache;
///DCACHE register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DCACHE)
pub type DCACHE_S = crate::Periph<dcache::RegisterBlock, 0x5003_1400>;
impl core::fmt::Debug for DCACHE_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCACHE_S").finish()
    }
}
///DCACHE register block
pub use self::dcache as dcache_s;
///DCMI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DCMI)
pub type DCMI = crate::Periph<dcmi::RegisterBlock, 0x4202_c000>;
impl core::fmt::Debug for DCMI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCMI").finish()
    }
}
///DCMI address block description
pub mod dcmi;
///DCMI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DCMI)
pub type DCMI_S = crate::Periph<dcmi::RegisterBlock, 0x5202_c000>;
impl core::fmt::Debug for DCMI_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCMI_S").finish()
    }
}
///DCMI address block description
pub use self::dcmi as dcmi_s;
///DLYB address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DLYBOS1)
pub type DLYBOS1 = crate::Periph<dlybos1::RegisterBlock, 0x4600_f000>;
impl core::fmt::Debug for DLYBOS1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBOS1").finish()
    }
}
///DLYB address block description
pub mod dlybos1;
///DLYB address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DLYBOS1)
pub type DLYBOS1_S = crate::Periph<dlybos1::RegisterBlock, 0x5600_f000>;
impl core::fmt::Debug for DLYBOS1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBOS1_S").finish()
    }
}
///DLYB address block description
pub use self::dlybos1 as dlybos1_s;
///DLYB address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DLYBOS1)
pub type DLYBSD1 = crate::Periph<dlybos1::RegisterBlock, 0x4600_8400>;
impl core::fmt::Debug for DLYBSD1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBSD1").finish()
    }
}
///DLYB address block description
pub use self::dlybos1 as dlybsd1;
///DLYB address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DLYBOS1)
pub type DLYBSD1_S = crate::Periph<dlybos1::RegisterBlock, 0x5600_8400>;
impl core::fmt::Debug for DLYBSD1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBSD1_S").finish()
    }
}
///DLYB address block description
pub use self::dlybos1 as dlybsd1_s;
///DTS address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DTS)
pub type DTS = crate::Periph<dts::RegisterBlock, 0x4000_8c00>;
impl core::fmt::Debug for DTS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DTS").finish()
    }
}
///DTS address block description
pub mod dts;
///DTS address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#DTS)
pub type DTS_S = crate::Periph<dts::RegisterBlock, 0x5000_8c00>;
impl core::fmt::Debug for DTS_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DTS_S").finish()
    }
}
///DTS address block description
pub use self::dts as dts_s;
///EXTI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#EXTI)
pub type EXTI = crate::Periph<exti::RegisterBlock, 0x4402_2000>;
impl core::fmt::Debug for EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI").finish()
    }
}
///EXTI address block description
pub mod exti;
///EXTI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#EXTI)
pub type EXTI_S = crate::Periph<exti::RegisterBlock, 0x5402_2000>;
impl core::fmt::Debug for EXTI_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI_S").finish()
    }
}
///EXTI address block description
pub use self::exti as exti_s;
///FDCAN register blank and RAM
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#FDCAN1)
pub type FDCAN1 = crate::Periph<fdcan1::RegisterBlock, 0x4000_a400>;
impl core::fmt::Debug for FDCAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN1").finish()
    }
}
///FDCAN register blank and RAM
pub mod fdcan1;
///FDCAN register blank and RAM
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#FDCAN1)
pub type FDCAN1_S = crate::Periph<fdcan1::RegisterBlock, 0x5000_a400>;
impl core::fmt::Debug for FDCAN1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN1_S").finish()
    }
}
///FDCAN register blank and RAM
pub use self::fdcan1 as fdcan1_s;
///FDCAN register blank and RAM
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#FDCAN1)
pub type FDCAN2 = crate::Periph<fdcan1::RegisterBlock, 0x4000_a800>;
impl core::fmt::Debug for FDCAN2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN2").finish()
    }
}
///FDCAN register blank and RAM
pub use self::fdcan1 as fdcan2;
///FDCAN register blank and RAM
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#FDCAN1)
pub type FDCAN2_S = crate::Periph<fdcan1::RegisterBlock, 0x5000_a800>;
impl core::fmt::Debug for FDCAN2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN2_S").finish()
    }
}
///FDCAN register blank and RAM
pub use self::fdcan1 as fdcan2_s;
///Mustang_FLASH register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#FLASH)
pub type FLASH = crate::Periph<flash::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
///Mustang_FLASH register block
pub mod flash;
///Mustang_FLASH register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#FLASH)
pub type FLASH_S = crate::Periph<flash::RegisterBlock, 0x5002_2000>;
impl core::fmt::Debug for FLASH_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH_S").finish()
    }
}
///Mustang_FLASH register block
pub use self::flash as flash_s;
///FMC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#FMC)
pub type FMC = crate::Periph<fmc::RegisterBlock, 0x4700_0400>;
impl core::fmt::Debug for FMC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FMC").finish()
    }
}
///FMC address block description
pub mod fmc;
///FMC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#FMC)
pub type FMC_S = crate::Periph<fmc::RegisterBlock, 0x5700_0400>;
impl core::fmt::Debug for FMC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FMC_S").finish()
    }
}
///FMC address block description
pub use self::fmc as fmc_s;
///GPDMA register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPDMA1)
pub type GPDMA1 = crate::Periph<gpdma1::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for GPDMA1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA1").finish()
    }
}
///GPDMA register block
pub mod gpdma1;
///GPDMA register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPDMA1)
pub type GPDMA1_S = crate::Periph<gpdma1::RegisterBlock, 0x5002_0000>;
impl core::fmt::Debug for GPDMA1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA1_S").finish()
    }
}
///GPDMA register block
pub use self::gpdma1 as gpdma1_s;
///GPDMA register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPDMA1)
pub type GPDMA2 = crate::Periph<gpdma1::RegisterBlock, 0x4002_1000>;
impl core::fmt::Debug for GPDMA2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA2").finish()
    }
}
///GPDMA register block
pub use self::gpdma1 as gpdma2;
///GPDMA register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPDMA1)
pub type GPDMA2_S = crate::Periph<gpdma1::RegisterBlock, 0x5002_1000>;
impl core::fmt::Debug for GPDMA2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA2_S").finish()
    }
}
///GPDMA register block
pub use self::gpdma1 as gpdma2_s;
///GPIOA address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOA)
pub type GPIOA = crate::Periph<gpioa::RegisterBlock, 0x4202_0000>;
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
///GPIOA address block description
pub mod gpioa;
///GPIOA address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOA)
pub type GPIOA_S = crate::Periph<gpioa::RegisterBlock, 0x5202_0000>;
impl core::fmt::Debug for GPIOA_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA_S").finish()
    }
}
///GPIOA address block description
pub use self::gpioa as gpioa_s;
///GPIOB address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOB)
pub type GPIOB = crate::Periph<gpiob::RegisterBlock, 0x4202_0400>;
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
///GPIOB address block description
pub mod gpiob;
///GPIOB address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOB)
pub type GPIOB_S = crate::Periph<gpiob::RegisterBlock, 0x5202_0400>;
impl core::fmt::Debug for GPIOB_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB_S").finish()
    }
}
///GPIOB address block description
pub use self::gpiob as gpiob_s;
///GPIOC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOC)
pub type GPIOC = crate::Periph<gpioc::RegisterBlock, 0x4202_0800>;
impl core::fmt::Debug for GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC").finish()
    }
}
///GPIOC address block description
pub mod gpioc;
///GPIOC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOC)
pub type GPIOC_S = crate::Periph<gpioc::RegisterBlock, 0x5202_0800>;
impl core::fmt::Debug for GPIOC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC_S").finish()
    }
}
///GPIOC address block description
pub use self::gpioc as gpioc_s;
///GPIOD address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOD)
pub type GPIOD = crate::Periph<gpiod::RegisterBlock, 0x4202_0c00>;
impl core::fmt::Debug for GPIOD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOD").finish()
    }
}
///GPIOD address block description
pub mod gpiod;
///GPIOD address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOD)
pub type GPIOD_S = crate::Periph<gpiod::RegisterBlock, 0x5202_0c00>;
impl core::fmt::Debug for GPIOD_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOD_S").finish()
    }
}
///GPIOD address block description
pub use self::gpiod as gpiod_s;
///GPIOE address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOE)
pub type GPIOE = crate::Periph<gpioe::RegisterBlock, 0x4202_1000>;
impl core::fmt::Debug for GPIOE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOE").finish()
    }
}
///GPIOE address block description
pub mod gpioe;
///GPIOE address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOE)
pub type GPIOE_S = crate::Periph<gpioe::RegisterBlock, 0x5202_1000>;
impl core::fmt::Debug for GPIOE_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOE_S").finish()
    }
}
///GPIOE address block description
pub use self::gpioe as gpioe_s;
///GPIOF address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOF)
pub type GPIOF = crate::Periph<gpiof::RegisterBlock, 0x4202_1400>;
impl core::fmt::Debug for GPIOF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOF").finish()
    }
}
///GPIOF address block description
pub mod gpiof;
///GPIOF address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOF)
pub type GPIOF_S = crate::Periph<gpiof::RegisterBlock, 0x5202_1400>;
impl core::fmt::Debug for GPIOF_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOF_S").finish()
    }
}
///GPIOF address block description
pub use self::gpiof as gpiof_s;
///GPIOG address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOG)
pub type GPIOG = crate::Periph<gpiog::RegisterBlock, 0x4202_1800>;
impl core::fmt::Debug for GPIOG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOG").finish()
    }
}
///GPIOG address block description
pub mod gpiog;
///GPIOG address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOG)
pub type GPIOG_S = crate::Periph<gpiog::RegisterBlock, 0x5202_1800>;
impl core::fmt::Debug for GPIOG_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOG_S").finish()
    }
}
///GPIOG address block description
pub use self::gpiog as gpiog_s;
///GPIOH address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOH)
pub type GPIOH = crate::Periph<gpioh::RegisterBlock, 0x4202_1c00>;
impl core::fmt::Debug for GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOH").finish()
    }
}
///GPIOH address block description
pub mod gpioh;
///GPIOH address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOH)
pub type GPIOH_S = crate::Periph<gpioh::RegisterBlock, 0x5202_1c00>;
impl core::fmt::Debug for GPIOH_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOH_S").finish()
    }
}
///GPIOH address block description
pub use self::gpioh as gpioh_s;
///GPIOI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOI)
pub type GPIOI = crate::Periph<gpioi::RegisterBlock, 0x01a0>;
impl core::fmt::Debug for GPIOI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOI").finish()
    }
}
///GPIOI address block description
pub mod gpioi;
///GPIOI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GPIOI)
pub type GPIOI_S = crate::Periph<gpioi::RegisterBlock, 0x1000_01a0>;
impl core::fmt::Debug for GPIOI_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOI_S").finish()
    }
}
///GPIOI address block description
pub use self::gpioi as gpioi_s;
///GTZC1_MPCBBz register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GTZC1_TZIC)
pub type GTZC1_TZIC = crate::Periph<gtzc1_tzic::RegisterBlock, 0x4003_2400>;
impl core::fmt::Debug for GTZC1_TZIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_TZIC").finish()
    }
}
///GTZC1_MPCBBz register block
pub mod gtzc1_tzic;
///GTZC1_MPCBBz register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GTZC1_TZIC)
pub type GTZC1_TZIC_S = crate::Periph<gtzc1_tzic::RegisterBlock, 0x5003_2400>;
impl core::fmt::Debug for GTZC1_TZIC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_TZIC_S").finish()
    }
}
///GTZC1_MPCBBz register block
pub use self::gtzc1_tzic as gtzc1_tzic_s;
///GTZC1_MPCBBz register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GTZC1_TZSC)
pub type GTZC1_TZSC = crate::Periph<gtzc1_tzsc::RegisterBlock, 0x4003_6400>;
impl core::fmt::Debug for GTZC1_TZSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_TZSC").finish()
    }
}
///GTZC1_MPCBBz register block
pub mod gtzc1_tzsc;
///GTZC1_MPCBBz register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#GTZC1_TZSC)
pub type GTZC1_TZSC_S = crate::Periph<gtzc1_tzsc::RegisterBlock, 0x5003_6400>;
impl core::fmt::Debug for GTZC1_TZSC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_TZSC_S").finish()
    }
}
///GTZC1_MPCBBz register block
pub use self::gtzc1_tzsc as gtzc1_tzsc_s;
///HASH register bank
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#HASH)
pub type HASH = crate::Periph<hash::RegisterBlock, 0x420c_0400>;
impl core::fmt::Debug for HASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HASH").finish()
    }
}
///HASH register bank
pub mod hash;
///HASH register bank
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#HASH)
pub type HASH_S = crate::Periph<hash::RegisterBlock, 0x520c_0400>;
impl core::fmt::Debug for HASH_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HASH_S").finish()
    }
}
///HASH register bank
pub use self::hash as hash_s;
///I2C address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#I2C1)
pub type I2C1 = crate::Periph<i2c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
///I2C address block description
pub mod i2c1;
///I2C address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#I2C1)
pub type I2C1_S = crate::Periph<i2c1::RegisterBlock, 0x5000_5400>;
impl core::fmt::Debug for I2C1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1_S").finish()
    }
}
///I2C address block description
pub use self::i2c1 as i2c1_s;
///I2C address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#I2C1)
pub type I2C2 = crate::Periph<i2c1::RegisterBlock, 0x4000_5800>;
impl core::fmt::Debug for I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2").finish()
    }
}
///I2C address block description
pub use self::i2c1 as i2c2;
///I2C address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#I2C1)
pub type I2C2_S = crate::Periph<i2c1::RegisterBlock, 0x5000_5800>;
impl core::fmt::Debug for I2C2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2_S").finish()
    }
}
///I2C address block description
pub use self::i2c1 as i2c2_s;
///I2C address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#I2C1)
pub type I2C3 = crate::Periph<i2c1::RegisterBlock, 0x4400_2800>;
impl core::fmt::Debug for I2C3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C3").finish()
    }
}
///I2C address block description
pub use self::i2c1 as i2c3;
///I2C address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#I2C1)
pub type I2C3_S = crate::Periph<i2c1::RegisterBlock, 0x5400_2800>;
impl core::fmt::Debug for I2C3_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C3_S").finish()
    }
}
///I2C address block description
pub use self::i2c1 as i2c3_s;
///I3C register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#I3C1)
pub type I3C1 = crate::Periph<i3c1::RegisterBlock, 0x4000_5c00>;
impl core::fmt::Debug for I3C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C1").finish()
    }
}
///I3C register block
pub mod i3c1;
///I3C register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#I3C1)
pub type I3C1_S = crate::Periph<i3c1::RegisterBlock, 0x5000_5c00>;
impl core::fmt::Debug for I3C1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C1_S").finish()
    }
}
///I3C register block
pub use self::i3c1 as i3c1_s;
///I3C register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#I3C1)
pub type I3C2 = crate::Periph<i3c1::RegisterBlock, 0x4400_3000>;
impl core::fmt::Debug for I3C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C2").finish()
    }
}
///I3C register block
pub use self::i3c1 as i3c2;
///I3C register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#I3C1)
pub type I3C2_S = crate::Periph<i3c1::RegisterBlock, 0x5400_3000>;
impl core::fmt::Debug for I3C2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C2_S").finish()
    }
}
///I3C register block
pub use self::i3c1 as i3c2_s;
///ICACHE register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#ICACHE)
pub type ICACHE = crate::Periph<icache::RegisterBlock, 0x4003_0400>;
impl core::fmt::Debug for ICACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ICACHE").finish()
    }
}
///ICACHE register block
pub mod icache;
///ICACHE register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#ICACHE)
pub type ICACHE_S = crate::Periph<icache::RegisterBlock, 0x5003_0400>;
impl core::fmt::Debug for ICACHE_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ICACHE_S").finish()
    }
}
///ICACHE register block
pub use self::icache as icache_s;
///IWDG address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#IWDG)
pub type IWDG = crate::Periph<iwdg::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG").finish()
    }
}
///IWDG address block description
pub mod iwdg;
///IWDG address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#IWDG)
pub type IWDG_S = crate::Periph<iwdg::RegisterBlock, 0x5000_3000>;
impl core::fmt::Debug for IWDG_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG_S").finish()
    }
}
///IWDG address block description
pub use self::iwdg as iwdg_s;
///LPTIM1 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#LPTIM1)
pub type LPTIM1 = crate::Periph<lptim1::RegisterBlock, 0x4400_4400>;
impl core::fmt::Debug for LPTIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM1").finish()
    }
}
///LPTIM1 address block description
pub mod lptim1;
///LPTIM1 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#LPTIM1)
pub type LPTIM1_S = crate::Periph<lptim1::RegisterBlock, 0x5400_4400>;
impl core::fmt::Debug for LPTIM1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM1_S").finish()
    }
}
///LPTIM1 address block description
pub use self::lptim1 as lptim1_s;
///LPTIM2 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#LPTIM1)
pub type LPTIM2 = crate::Periph<lptim1::RegisterBlock, 0x4000_9400>;
impl core::fmt::Debug for LPTIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM2").finish()
    }
}
///LPTIM2 address block description
pub use self::lptim1 as lptim2;
///LPTIM1 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#LPTIM1)
pub type LPTIM2_S = crate::Periph<lptim1::RegisterBlock, 0x5000_9400>;
impl core::fmt::Debug for LPTIM2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM2_S").finish()
    }
}
///LPTIM1 address block description
pub use self::lptim1 as lptim2_s;
///LPUART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#LPUART)
pub type LPUART = crate::Periph<lpuart::RegisterBlock, 0x4400_2400>;
impl core::fmt::Debug for LPUART {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART").finish()
    }
}
///LPUART address block description
pub mod lpuart;
///LPUART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#LPUART)
pub type LPUART_S = crate::Periph<lpuart::RegisterBlock, 0x5400_2400>;
impl core::fmt::Debug for LPUART_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART_S").finish()
    }
}
///LPUART address block description
pub use self::lpuart as lpuart_s;
///OCTOSPI register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#OCTOSPI)
pub type OCTOSPI = crate::Periph<octospi::RegisterBlock, 0x4700_1400>;
impl core::fmt::Debug for OCTOSPI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OCTOSPI").finish()
    }
}
///OCTOSPI register block
pub mod octospi;
///OCTOSPI register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#OCTOSPI)
pub type OCTOSPI_S = crate::Periph<octospi::RegisterBlock, 0x5700_1400>;
impl core::fmt::Debug for OCTOSPI_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OCTOSPI_S").finish()
    }
}
///OCTOSPI register block
pub use self::octospi as octospi_s;
///PSSI register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#PSSI)
pub type PSSI = crate::Periph<pssi::RegisterBlock, 0x4202_c400>;
impl core::fmt::Debug for PSSI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PSSI").finish()
    }
}
///PSSI register block
pub mod pssi;
///PSSI register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#PSSI)
pub type PSSI_S = crate::Periph<pssi::RegisterBlock, 0x5202_c400>;
impl core::fmt::Debug for PSSI_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PSSI_S").finish()
    }
}
///PSSI register block
pub use self::pssi as pssi_s;
///PWR address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#PWR)
pub type PWR = crate::Periph<pwr::RegisterBlock, 0x4402_0800>;
impl core::fmt::Debug for PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR").finish()
    }
}
///PWR address block description
pub mod pwr;
///PWR address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#PWR)
pub type PWR_S = crate::Periph<pwr::RegisterBlock, 0x5402_0800>;
impl core::fmt::Debug for PWR_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR_S").finish()
    }
}
///PWR address block description
pub use self::pwr as pwr_s;
///RAMCFG address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#RAMCFG)
pub type RAMCFG = crate::Periph<ramcfg::RegisterBlock, 0x4002_6000>;
impl core::fmt::Debug for RAMCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAMCFG").finish()
    }
}
///RAMCFG address block description
pub mod ramcfg;
///RAMCFG address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#RAMCFG)
pub type RAMCFG_S = crate::Periph<ramcfg::RegisterBlock, 0x5002_6000>;
impl core::fmt::Debug for RAMCFG_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAMCFG_S").finish()
    }
}
///RAMCFG address block description
pub use self::ramcfg as ramcfg_s;
///RCC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#RCC)
pub type RCC = crate::Periph<rcc::RegisterBlock, 0x4402_0c00>;
impl core::fmt::Debug for RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC").finish()
    }
}
///RCC address block description
pub mod rcc;
///RCC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#RCC)
pub type RCC_S = crate::Periph<rcc::RegisterBlock, 0x5402_0c00>;
impl core::fmt::Debug for RCC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC_S").finish()
    }
}
///RCC address block description
pub use self::rcc as rcc_s;
///RNG address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#RNG)
pub type RNG = crate::Periph<rng::RegisterBlock, 0x420c_0800>;
impl core::fmt::Debug for RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG").finish()
    }
}
///RNG address block description
pub mod rng;
///RNG address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#RNG)
pub type RNG_S = crate::Periph<rng::RegisterBlock, 0x520c_0800>;
impl core::fmt::Debug for RNG_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG_S").finish()
    }
}
///RNG address block description
pub use self::rng as rng_s;
///RTC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#RTC)
pub type RTC = crate::Periph<rtc::RegisterBlock, 0x4400_7800>;
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
///RTC register block
pub mod rtc;
///RTC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#RTC)
pub type RTC_S = crate::Periph<rtc::RegisterBlock, 0x5400_7800>;
impl core::fmt::Debug for RTC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC_S").finish()
    }
}
///RTC register block
pub use self::rtc as rtc_s;
///SBS address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#SBS)
pub type SBS = crate::Periph<sbs::RegisterBlock, 0x4400_0400>;
impl core::fmt::Debug for SBS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SBS").finish()
    }
}
///SBS address block description
pub mod sbs;
///SBS address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#SBS)
pub type SBS_S = crate::Periph<sbs::RegisterBlock, 0x5400_0400>;
impl core::fmt::Debug for SBS_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SBS_S").finish()
    }
}
///SBS address block description
pub use self::sbs as sbs_s;
///SDMMC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#SDMMC1)
pub type SDMMC1 = crate::Periph<sdmmc1::RegisterBlock, 0x4600_8000>;
impl core::fmt::Debug for SDMMC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC1").finish()
    }
}
///SDMMC address block description
pub mod sdmmc1;
///SDMMC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#SDMMC1)
pub type SDMMC1_S = crate::Periph<sdmmc1::RegisterBlock, 0x5600_8000>;
impl core::fmt::Debug for SDMMC1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC1_S").finish()
    }
}
///SDMMC address block description
pub use self::sdmmc1 as sdmmc1_s;
///SPI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#SPI1)
pub type SPI1 = crate::Periph<spi1::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
///SPI address block description
pub mod spi1;
///SPI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#SPI1)
pub type SPI1_S = crate::Periph<spi1::RegisterBlock, 0x5001_3000>;
impl core::fmt::Debug for SPI1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1_S").finish()
    }
}
///SPI address block description
pub use self::spi1 as spi1_s;
///SPI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#SPI1)
pub type SPI2 = crate::Periph<spi1::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
///SPI address block description
pub use self::spi1 as spi2;
///SPI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#SPI1)
pub type SPI2_S = crate::Periph<spi1::RegisterBlock, 0x5000_3800>;
impl core::fmt::Debug for SPI2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2_S").finish()
    }
}
///SPI address block description
pub use self::spi1 as spi2_s;
///SPI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#SPI1)
pub type SPI3 = crate::Periph<spi1::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
///SPI address block description
pub use self::spi1 as spi3;
///SPI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#SPI1)
pub type SPI3_S = crate::Periph<spi1::RegisterBlock, 0x5000_3c00>;
impl core::fmt::Debug for SPI3_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3_S").finish()
    }
}
///SPI address block description
pub use self::spi1 as spi3_s;
///SPI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#SPI1)
pub type SPI4 = crate::Periph<spi1::RegisterBlock, 0x4001_4c00>;
impl core::fmt::Debug for SPI4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI4").finish()
    }
}
///SPI address block description
pub use self::spi1 as spi4;
///SPI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#SPI1)
pub type SPI4_S = crate::Periph<spi1::RegisterBlock, 0x5001_4c00>;
impl core::fmt::Debug for SPI4_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI4_S").finish()
    }
}
///SPI address block description
pub use self::spi1 as spi4_s;
///TAMP register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TAMP)
pub type TAMP = crate::Periph<tamp::RegisterBlock, 0x4400_7c00>;
impl core::fmt::Debug for TAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TAMP").finish()
    }
}
///TAMP register block
pub mod tamp;
///TAMP register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TAMP)
pub type TAMP_S = crate::Periph<tamp::RegisterBlock, 0x5400_7c00>;
impl core::fmt::Debug for TAMP_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TAMP_S").finish()
    }
}
///TAMP register block
pub use self::tamp as tamp_s;
///TIM1 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM1)
pub type TIM1 = crate::Periph<tim1::RegisterBlock, 0x4001_2c00>;
impl core::fmt::Debug for TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1").finish()
    }
}
///TIM1 address block description
pub mod tim1;
///TIM1 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM1)
pub type TIM1_S = crate::Periph<tim1::RegisterBlock, 0x5001_2c00>;
impl core::fmt::Debug for TIM1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1_S").finish()
    }
}
///TIM1 address block description
pub use self::tim1 as tim1_s;
///TIM2 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM2)
pub type TIM2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2").finish()
    }
}
///TIM2 address block description
pub mod tim2;
///TIM2 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM2)
pub type TIM2_S = crate::Periph<tim2::RegisterBlock, 0x5000_0000>;
impl core::fmt::Debug for TIM2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2_S").finish()
    }
}
///TIM2 address block description
pub use self::tim2 as tim2_s;
///TIM3 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM3)
pub type TIM3 = crate::Periph<tim3::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3").finish()
    }
}
///TIM3 address block description
pub mod tim3;
///TIM3 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM3)
pub type TIM3_S = crate::Periph<tim3::RegisterBlock, 0x5000_0400>;
impl core::fmt::Debug for TIM3_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3_S").finish()
    }
}
///TIM3 address block description
pub use self::tim3 as tim3_s;
///TIM4 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM4)
pub type TIM4 = crate::Periph<tim4::RegisterBlock, 0x4000_0800>;
impl core::fmt::Debug for TIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM4").finish()
    }
}
///TIM4 address block description
pub mod tim4;
///TIM4 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM4)
pub type TIM4_S = crate::Periph<tim4::RegisterBlock, 0x5000_0800>;
impl core::fmt::Debug for TIM4_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM4_S").finish()
    }
}
///TIM4 address block description
pub use self::tim4 as tim4_s;
///TIM5 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM5)
pub type TIM5 = crate::Periph<tim5::RegisterBlock, 0x4000_0c00>;
impl core::fmt::Debug for TIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM5").finish()
    }
}
///TIM5 address block description
pub mod tim5;
///TIM5 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM5)
pub type TIM5_S = crate::Periph<tim5::RegisterBlock, 0x5000_0c00>;
impl core::fmt::Debug for TIM5_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM5_S").finish()
    }
}
///TIM5 address block description
pub use self::tim5 as tim5_s;
///TIM6 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM6)
pub type TIM6 = crate::Periph<tim6::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for TIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM6").finish()
    }
}
///TIM6 address block description
pub mod tim6;
///TIM6 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM6)
pub type TIM6_S = crate::Periph<tim6::RegisterBlock, 0x5000_1000>;
impl core::fmt::Debug for TIM6_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM6_S").finish()
    }
}
///TIM6 address block description
pub use self::tim6 as tim6_s;
///TIM7 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM6)
pub type TIM7 = crate::Periph<tim6::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for TIM7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM7").finish()
    }
}
///TIM7 address block description
pub use self::tim6 as tim7;
///TIM6 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM6)
pub type TIM7_S = crate::Periph<tim6::RegisterBlock, 0x5000_1400>;
impl core::fmt::Debug for TIM7_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM7_S").finish()
    }
}
///TIM6 address block description
pub use self::tim6 as tim7_s;
///TIM8 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM8)
pub type TIM8 = crate::Periph<tim8::RegisterBlock, 0x4001_3400>;
impl core::fmt::Debug for TIM8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM8").finish()
    }
}
///TIM8 address block description
pub mod tim8;
///TIM8 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM8)
pub type TIM8_S = crate::Periph<tim8::RegisterBlock, 0x5001_3400>;
impl core::fmt::Debug for TIM8_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM8_S").finish()
    }
}
///TIM8 address block description
pub use self::tim8 as tim8_s;
///TIM15 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM15)
pub type TIM15 = crate::Periph<tim15::RegisterBlock, 0x4001_4000>;
impl core::fmt::Debug for TIM15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM15").finish()
    }
}
///TIM15 address block description
pub mod tim15;
///TIM15 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#TIM15)
pub type TIM15_S = crate::Periph<tim15::RegisterBlock, 0x5001_4000>;
impl core::fmt::Debug for TIM15_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM15_S").finish()
    }
}
///TIM15 address block description
pub use self::tim15 as tim15_s;
///UCPD register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#UCPD1)
pub type UCPD1 = crate::Periph<ucpd1::RegisterBlock, 0x4000_dc00>;
impl core::fmt::Debug for UCPD1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UCPD1").finish()
    }
}
///UCPD register block
pub mod ucpd1;
///UCPD register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#UCPD1)
pub type UCPD1_S = crate::Periph<ucpd1::RegisterBlock, 0x5000_dc00>;
impl core::fmt::Debug for UCPD1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UCPD1_S").finish()
    }
}
///UCPD register block
pub use self::ucpd1 as ucpd1_s;
///USART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USART1)
pub type USART1 = crate::Periph<usart1::RegisterBlock, 0x4001_3800>;
impl core::fmt::Debug for USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1").finish()
    }
}
///USART address block description
pub mod usart1;
///USART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USART1)
pub type USART1_S = crate::Periph<usart1::RegisterBlock, 0x5001_3800>;
impl core::fmt::Debug for USART1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1_S").finish()
    }
}
///USART address block description
pub use self::usart1 as usart1_s;
///USART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USART1)
pub type USART2 = crate::Periph<usart1::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2").finish()
    }
}
///USART address block description
pub use self::usart1 as usart2;
///USART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USART1)
pub type USART2_S = crate::Periph<usart1::RegisterBlock, 0x5000_4400>;
impl core::fmt::Debug for USART2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2_S").finish()
    }
}
///USART address block description
pub use self::usart1 as usart2_s;
///USART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USART1)
pub type USART3 = crate::Periph<usart1::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for USART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART3").finish()
    }
}
///USART address block description
pub use self::usart1 as usart3;
///USART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USART1)
pub type USART3_S = crate::Periph<usart1::RegisterBlock, 0x5000_4800>;
impl core::fmt::Debug for USART3_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART3_S").finish()
    }
}
///USART address block description
pub use self::usart1 as usart3_s;
///USART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USART1)
pub type UART4 = crate::Periph<usart1::RegisterBlock, 0x4000_4c00>;
impl core::fmt::Debug for UART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART4").finish()
    }
}
///USART address block description
pub use self::usart1 as uart4;
///USART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USART1)
pub type UART4_S = crate::Periph<usart1::RegisterBlock, 0x5000_4c00>;
impl core::fmt::Debug for UART4_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART4_S").finish()
    }
}
///USART address block description
pub use self::usart1 as uart4_s;
///USART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USART1)
pub type UART5 = crate::Periph<usart1::RegisterBlock, 0x4000_5000>;
impl core::fmt::Debug for UART5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART5").finish()
    }
}
///USART address block description
pub use self::usart1 as uart5;
///USART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USART1)
pub type UART5_S = crate::Periph<usart1::RegisterBlock, 0x5000_5000>;
impl core::fmt::Debug for UART5_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART5_S").finish()
    }
}
///USART address block description
pub use self::usart1 as uart5_s;
///USART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USART1)
pub type USART6 = crate::Periph<usart1::RegisterBlock, 0x4000_6400>;
impl core::fmt::Debug for USART6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART6").finish()
    }
}
///USART address block description
pub use self::usart1 as usart6;
///USART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USART1)
pub type USART6_S = crate::Periph<usart1::RegisterBlock, 0x5000_6400>;
impl core::fmt::Debug for USART6_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART6_S").finish()
    }
}
///USART address block description
pub use self::usart1 as usart6_s;
///USB address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USB)
pub type USB = crate::Periph<usb::RegisterBlock, 0x4001_6000>;
impl core::fmt::Debug for USB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB").finish()
    }
}
///USB address block description
pub mod usb;
///USB address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USB)
pub type USB_S = crate::Periph<usb::RegisterBlock, 0x5001_6000>;
impl core::fmt::Debug for USB_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USB_S").finish()
    }
}
///USB address block description
pub use self::usb as usb_s;
///USBSRAM address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USBSRAM)
pub type USBSRAM = crate::Periph<usbsram::RegisterBlock, 0x4001_6400>;
impl core::fmt::Debug for USBSRAM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USBSRAM").finish()
    }
}
///USBSRAM address block description
pub mod usbsram;
///USBSRAM address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#USBSRAM)
pub type USBSRAM_S = crate::Periph<usbsram::RegisterBlock, 0x5001_6400>;
impl core::fmt::Debug for USBSRAM_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USBSRAM_S").finish()
    }
}
///USBSRAM address block description
pub use self::usbsram as usbsram_s;
///VREFBUF address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#VREFBUF)
pub type VREFBUF = crate::Periph<vrefbuf::RegisterBlock, 0x4400_7400>;
impl core::fmt::Debug for VREFBUF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VREFBUF").finish()
    }
}
///VREFBUF address block description
pub mod vrefbuf;
///VREFBUF address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#VREFBUF)
pub type VREFBUF_S = crate::Periph<vrefbuf::RegisterBlock, 0x5400_7400>;
impl core::fmt::Debug for VREFBUF_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VREFBUF_S").finish()
    }
}
///VREFBUF address block description
pub use self::vrefbuf as vrefbuf_s;
///WWDG address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#WWDG)
pub type WWDG = crate::Periph<wwdg::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG").finish()
    }
}
///WWDG address block description
pub mod wwdg;
///WWDG address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H523.html#WWDG)
pub type WWDG_S = crate::Periph<wwdg::RegisterBlock, 0x5000_2c00>;
impl core::fmt::Debug for WWDG_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG_S").finish()
    }
}
///WWDG address block description
pub use self::wwdg as wwdg_s;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
/// All the peripherals.
#[allow(non_snake_case)]
pub struct Peripherals {
    ///ADC1
    pub ADC1: ADC1,
    ///ADC1_S
    pub ADC1_S: ADC1_S,
    ///ADC2
    pub ADC2: ADC2,
    ///ADC2_S
    pub ADC2_S: ADC2_S,
    ///ADCC
    pub ADCC: ADCC,
    ///SEC_ADCC
    pub SEC_ADCC: SEC_ADCC,
    ///CRC
    pub CRC: CRC,
    ///CRC_S
    pub CRC_S: CRC_S,
    ///CRS
    pub CRS: CRS,
    ///CRS_S
    pub CRS_S: CRS_S,
    ///DAC
    pub DAC: DAC,
    ///DAC_S
    pub DAC_S: DAC_S,
    ///DBGMCU
    pub DBGMCU: DBGMCU,
    ///DBGMCU_S
    pub DBGMCU_S: DBGMCU_S,
    ///DCACHE
    pub DCACHE: DCACHE,
    ///DCACHE_S
    pub DCACHE_S: DCACHE_S,
    ///DCMI
    pub DCMI: DCMI,
    ///DCMI_S
    pub DCMI_S: DCMI_S,
    ///DLYBOS1
    pub DLYBOS1: DLYBOS1,
    ///DLYBOS1_S
    pub DLYBOS1_S: DLYBOS1_S,
    ///DLYBSD1
    pub DLYBSD1: DLYBSD1,
    ///DLYBSD1_S
    pub DLYBSD1_S: DLYBSD1_S,
    ///DTS
    pub DTS: DTS,
    ///DTS_S
    pub DTS_S: DTS_S,
    ///EXTI
    pub EXTI: EXTI,
    ///EXTI_S
    pub EXTI_S: EXTI_S,
    ///FDCAN1
    pub FDCAN1: FDCAN1,
    ///FDCAN1_S
    pub FDCAN1_S: FDCAN1_S,
    ///FDCAN2
    pub FDCAN2: FDCAN2,
    ///FDCAN2_S
    pub FDCAN2_S: FDCAN2_S,
    ///FLASH
    pub FLASH: FLASH,
    ///FLASH_S
    pub FLASH_S: FLASH_S,
    ///FMC
    pub FMC: FMC,
    ///FMC_S
    pub FMC_S: FMC_S,
    ///GPDMA1
    pub GPDMA1: GPDMA1,
    ///GPDMA1_S
    pub GPDMA1_S: GPDMA1_S,
    ///GPDMA2
    pub GPDMA2: GPDMA2,
    ///GPDMA2_S
    pub GPDMA2_S: GPDMA2_S,
    ///GPIOA
    pub GPIOA: GPIOA,
    ///GPIOA_S
    pub GPIOA_S: GPIOA_S,
    ///GPIOB
    pub GPIOB: GPIOB,
    ///GPIOB_S
    pub GPIOB_S: GPIOB_S,
    ///GPIOC
    pub GPIOC: GPIOC,
    ///GPIOC_S
    pub GPIOC_S: GPIOC_S,
    ///GPIOD
    pub GPIOD: GPIOD,
    ///GPIOD_S
    pub GPIOD_S: GPIOD_S,
    ///GPIOE
    pub GPIOE: GPIOE,
    ///GPIOE_S
    pub GPIOE_S: GPIOE_S,
    ///GPIOF
    pub GPIOF: GPIOF,
    ///GPIOF_S
    pub GPIOF_S: GPIOF_S,
    ///GPIOG
    pub GPIOG: GPIOG,
    ///GPIOG_S
    pub GPIOG_S: GPIOG_S,
    ///GPIOH
    pub GPIOH: GPIOH,
    ///GPIOH_S
    pub GPIOH_S: GPIOH_S,
    ///GPIOI
    pub GPIOI: GPIOI,
    ///GPIOI_S
    pub GPIOI_S: GPIOI_S,
    ///GTZC1_TZIC
    pub GTZC1_TZIC: GTZC1_TZIC,
    ///GTZC1_TZIC_S
    pub GTZC1_TZIC_S: GTZC1_TZIC_S,
    ///GTZC1_TZSC
    pub GTZC1_TZSC: GTZC1_TZSC,
    ///GTZC1_TZSC_S
    pub GTZC1_TZSC_S: GTZC1_TZSC_S,
    ///HASH
    pub HASH: HASH,
    ///HASH_S
    pub HASH_S: HASH_S,
    ///I2C1
    pub I2C1: I2C1,
    ///I2C1_S
    pub I2C1_S: I2C1_S,
    ///I2C2
    pub I2C2: I2C2,
    ///I2C2_S
    pub I2C2_S: I2C2_S,
    ///I2C3
    pub I2C3: I2C3,
    ///I2C3_S
    pub I2C3_S: I2C3_S,
    ///I3C1
    pub I3C1: I3C1,
    ///I3C1_S
    pub I3C1_S: I3C1_S,
    ///I3C2
    pub I3C2: I3C2,
    ///I3C2_S
    pub I3C2_S: I3C2_S,
    ///ICACHE
    pub ICACHE: ICACHE,
    ///ICACHE_S
    pub ICACHE_S: ICACHE_S,
    ///IWDG
    pub IWDG: IWDG,
    ///IWDG_S
    pub IWDG_S: IWDG_S,
    ///LPTIM1
    pub LPTIM1: LPTIM1,
    ///LPTIM1_S
    pub LPTIM1_S: LPTIM1_S,
    ///LPTIM2
    pub LPTIM2: LPTIM2,
    ///LPTIM2_S
    pub LPTIM2_S: LPTIM2_S,
    ///LPUART
    pub LPUART: LPUART,
    ///LPUART_S
    pub LPUART_S: LPUART_S,
    ///OCTOSPI
    pub OCTOSPI: OCTOSPI,
    ///OCTOSPI_S
    pub OCTOSPI_S: OCTOSPI_S,
    ///PSSI
    pub PSSI: PSSI,
    ///PSSI_S
    pub PSSI_S: PSSI_S,
    ///PWR
    pub PWR: PWR,
    ///PWR_S
    pub PWR_S: PWR_S,
    ///RAMCFG
    pub RAMCFG: RAMCFG,
    ///RAMCFG_S
    pub RAMCFG_S: RAMCFG_S,
    ///RCC
    pub RCC: RCC,
    ///RCC_S
    pub RCC_S: RCC_S,
    ///RNG
    pub RNG: RNG,
    ///RNG_S
    pub RNG_S: RNG_S,
    ///RTC
    pub RTC: RTC,
    ///RTC_S
    pub RTC_S: RTC_S,
    ///SBS
    pub SBS: SBS,
    ///SBS_S
    pub SBS_S: SBS_S,
    ///SDMMC1
    pub SDMMC1: SDMMC1,
    ///SDMMC1_S
    pub SDMMC1_S: SDMMC1_S,
    ///SPI1
    pub SPI1: SPI1,
    ///SPI1_S
    pub SPI1_S: SPI1_S,
    ///SPI2
    pub SPI2: SPI2,
    ///SPI2_S
    pub SPI2_S: SPI2_S,
    ///SPI3
    pub SPI3: SPI3,
    ///SPI3_S
    pub SPI3_S: SPI3_S,
    ///SPI4
    pub SPI4: SPI4,
    ///SPI4_S
    pub SPI4_S: SPI4_S,
    ///TAMP
    pub TAMP: TAMP,
    ///TAMP_S
    pub TAMP_S: TAMP_S,
    ///TIM1
    pub TIM1: TIM1,
    ///TIM1_S
    pub TIM1_S: TIM1_S,
    ///TIM2
    pub TIM2: TIM2,
    ///TIM2_S
    pub TIM2_S: TIM2_S,
    ///TIM3
    pub TIM3: TIM3,
    ///TIM3_S
    pub TIM3_S: TIM3_S,
    ///TIM4
    pub TIM4: TIM4,
    ///TIM4_S
    pub TIM4_S: TIM4_S,
    ///TIM5
    pub TIM5: TIM5,
    ///TIM5_S
    pub TIM5_S: TIM5_S,
    ///TIM6
    pub TIM6: TIM6,
    ///TIM6_S
    pub TIM6_S: TIM6_S,
    ///TIM7
    pub TIM7: TIM7,
    ///TIM7_S
    pub TIM7_S: TIM7_S,
    ///TIM8
    pub TIM8: TIM8,
    ///TIM8_S
    pub TIM8_S: TIM8_S,
    ///TIM15
    pub TIM15: TIM15,
    ///TIM15_S
    pub TIM15_S: TIM15_S,
    ///UCPD1
    pub UCPD1: UCPD1,
    ///UCPD1_S
    pub UCPD1_S: UCPD1_S,
    ///USART1
    pub USART1: USART1,
    ///USART1_S
    pub USART1_S: USART1_S,
    ///USART2
    pub USART2: USART2,
    ///USART2_S
    pub USART2_S: USART2_S,
    ///USART3
    pub USART3: USART3,
    ///USART3_S
    pub USART3_S: USART3_S,
    ///UART4
    pub UART4: UART4,
    ///UART4_S
    pub UART4_S: UART4_S,
    ///UART5
    pub UART5: UART5,
    ///UART5_S
    pub UART5_S: UART5_S,
    ///USART6
    pub USART6: USART6,
    ///USART6_S
    pub USART6_S: USART6_S,
    ///USB
    pub USB: USB,
    ///USB_S
    pub USB_S: USB_S,
    ///USBSRAM
    pub USBSRAM: USBSRAM,
    ///USBSRAM_S
    pub USBSRAM_S: USBSRAM_S,
    ///VREFBUF
    pub VREFBUF: VREFBUF,
    ///VREFBUF_S
    pub VREFBUF_S: VREFBUF_S,
    ///WWDG
    pub WWDG: WWDG,
    ///WWDG_S
    pub WWDG_S: WWDG_S,
}
impl Peripherals {
    /// Returns all the peripherals *once*.
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    /// Unchecked version of `Peripherals::take`.
    ///
    /// # Safety
    ///
    /// Each of the returned peripherals must be used at most once.
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            ADC1: ADC1::steal(),
            ADC1_S: ADC1_S::steal(),
            ADC2: ADC2::steal(),
            ADC2_S: ADC2_S::steal(),
            ADCC: ADCC::steal(),
            SEC_ADCC: SEC_ADCC::steal(),
            CRC: CRC::steal(),
            CRC_S: CRC_S::steal(),
            CRS: CRS::steal(),
            CRS_S: CRS_S::steal(),
            DAC: DAC::steal(),
            DAC_S: DAC_S::steal(),
            DBGMCU: DBGMCU::steal(),
            DBGMCU_S: DBGMCU_S::steal(),
            DCACHE: DCACHE::steal(),
            DCACHE_S: DCACHE_S::steal(),
            DCMI: DCMI::steal(),
            DCMI_S: DCMI_S::steal(),
            DLYBOS1: DLYBOS1::steal(),
            DLYBOS1_S: DLYBOS1_S::steal(),
            DLYBSD1: DLYBSD1::steal(),
            DLYBSD1_S: DLYBSD1_S::steal(),
            DTS: DTS::steal(),
            DTS_S: DTS_S::steal(),
            EXTI: EXTI::steal(),
            EXTI_S: EXTI_S::steal(),
            FDCAN1: FDCAN1::steal(),
            FDCAN1_S: FDCAN1_S::steal(),
            FDCAN2: FDCAN2::steal(),
            FDCAN2_S: FDCAN2_S::steal(),
            FLASH: FLASH::steal(),
            FLASH_S: FLASH_S::steal(),
            FMC: FMC::steal(),
            FMC_S: FMC_S::steal(),
            GPDMA1: GPDMA1::steal(),
            GPDMA1_S: GPDMA1_S::steal(),
            GPDMA2: GPDMA2::steal(),
            GPDMA2_S: GPDMA2_S::steal(),
            GPIOA: GPIOA::steal(),
            GPIOA_S: GPIOA_S::steal(),
            GPIOB: GPIOB::steal(),
            GPIOB_S: GPIOB_S::steal(),
            GPIOC: GPIOC::steal(),
            GPIOC_S: GPIOC_S::steal(),
            GPIOD: GPIOD::steal(),
            GPIOD_S: GPIOD_S::steal(),
            GPIOE: GPIOE::steal(),
            GPIOE_S: GPIOE_S::steal(),
            GPIOF: GPIOF::steal(),
            GPIOF_S: GPIOF_S::steal(),
            GPIOG: GPIOG::steal(),
            GPIOG_S: GPIOG_S::steal(),
            GPIOH: GPIOH::steal(),
            GPIOH_S: GPIOH_S::steal(),
            GPIOI: GPIOI::steal(),
            GPIOI_S: GPIOI_S::steal(),
            GTZC1_TZIC: GTZC1_TZIC::steal(),
            GTZC1_TZIC_S: GTZC1_TZIC_S::steal(),
            GTZC1_TZSC: GTZC1_TZSC::steal(),
            GTZC1_TZSC_S: GTZC1_TZSC_S::steal(),
            HASH: HASH::steal(),
            HASH_S: HASH_S::steal(),
            I2C1: I2C1::steal(),
            I2C1_S: I2C1_S::steal(),
            I2C2: I2C2::steal(),
            I2C2_S: I2C2_S::steal(),
            I2C3: I2C3::steal(),
            I2C3_S: I2C3_S::steal(),
            I3C1: I3C1::steal(),
            I3C1_S: I3C1_S::steal(),
            I3C2: I3C2::steal(),
            I3C2_S: I3C2_S::steal(),
            ICACHE: ICACHE::steal(),
            ICACHE_S: ICACHE_S::steal(),
            IWDG: IWDG::steal(),
            IWDG_S: IWDG_S::steal(),
            LPTIM1: LPTIM1::steal(),
            LPTIM1_S: LPTIM1_S::steal(),
            LPTIM2: LPTIM2::steal(),
            LPTIM2_S: LPTIM2_S::steal(),
            LPUART: LPUART::steal(),
            LPUART_S: LPUART_S::steal(),
            OCTOSPI: OCTOSPI::steal(),
            OCTOSPI_S: OCTOSPI_S::steal(),
            PSSI: PSSI::steal(),
            PSSI_S: PSSI_S::steal(),
            PWR: PWR::steal(),
            PWR_S: PWR_S::steal(),
            RAMCFG: RAMCFG::steal(),
            RAMCFG_S: RAMCFG_S::steal(),
            RCC: RCC::steal(),
            RCC_S: RCC_S::steal(),
            RNG: RNG::steal(),
            RNG_S: RNG_S::steal(),
            RTC: RTC::steal(),
            RTC_S: RTC_S::steal(),
            SBS: SBS::steal(),
            SBS_S: SBS_S::steal(),
            SDMMC1: SDMMC1::steal(),
            SDMMC1_S: SDMMC1_S::steal(),
            SPI1: SPI1::steal(),
            SPI1_S: SPI1_S::steal(),
            SPI2: SPI2::steal(),
            SPI2_S: SPI2_S::steal(),
            SPI3: SPI3::steal(),
            SPI3_S: SPI3_S::steal(),
            SPI4: SPI4::steal(),
            SPI4_S: SPI4_S::steal(),
            TAMP: TAMP::steal(),
            TAMP_S: TAMP_S::steal(),
            TIM1: TIM1::steal(),
            TIM1_S: TIM1_S::steal(),
            TIM2: TIM2::steal(),
            TIM2_S: TIM2_S::steal(),
            TIM3: TIM3::steal(),
            TIM3_S: TIM3_S::steal(),
            TIM4: TIM4::steal(),
            TIM4_S: TIM4_S::steal(),
            TIM5: TIM5::steal(),
            TIM5_S: TIM5_S::steal(),
            TIM6: TIM6::steal(),
            TIM6_S: TIM6_S::steal(),
            TIM7: TIM7::steal(),
            TIM7_S: TIM7_S::steal(),
            TIM8: TIM8::steal(),
            TIM8_S: TIM8_S::steal(),
            TIM15: TIM15::steal(),
            TIM15_S: TIM15_S::steal(),
            UCPD1: UCPD1::steal(),
            UCPD1_S: UCPD1_S::steal(),
            USART1: USART1::steal(),
            USART1_S: USART1_S::steal(),
            USART2: USART2::steal(),
            USART2_S: USART2_S::steal(),
            USART3: USART3::steal(),
            USART3_S: USART3_S::steal(),
            UART4: UART4::steal(),
            UART4_S: UART4_S::steal(),
            UART5: UART5::steal(),
            UART5_S: UART5_S::steal(),
            USART6: USART6::steal(),
            USART6_S: USART6_S::steal(),
            USB: USB::steal(),
            USB_S: USB_S::steal(),
            USBSRAM: USBSRAM::steal(),
            USBSRAM_S: USBSRAM_S::steal(),
            VREFBUF: VREFBUF::steal(),
            VREFBUF_S: VREFBUF_S::steal(),
            WWDG: WWDG::steal(),
            WWDG_S: WWDG_S::steal(),
        }
    }
}
