/*!Peripheral access API for STM32H725 microcontrollers (generated using svd2rust v0.36.1 (4052ce6 2025-04-04))

You can find an overview of the generated API [here].

API features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.

[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api
[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased
[repository]: https://github.com/rust-embedded/svd2rust*/
///Number available in the NVIC for configuring priority
pub const NVIC_PRIO_BITS: u8 = 4;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG1();
    fn PVD_PVM();
    fn RTC_TAMP_STAMP_CSS_LSE();
    fn RTC_WKUP();
    fn FLASH();
    fn RCC();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn DMA_STR0();
    fn DMA_STR1();
    fn DMA_STR2();
    fn DMA_STR3();
    fn DMA_STR4();
    fn DMA_STR5();
    fn DMA_STR6();
    fn ADC1_2();
    fn FDCAN1_IT0();
    fn FDCAN2_IT0();
    fn FDCAN1_IT1();
    fn FDCAN2_IT1();
    fn EXTI9_5();
    fn TIM1_BRK();
    fn TIM1_UP();
    fn TIM1_TRG_COM();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM4();
    fn I2C1_EV();
    fn I2C1_ER();
    fn I2C2_EV();
    fn I2C2_ER();
    fn SPI1();
    fn SPI2();
    fn USART1();
    fn USART2();
    fn USART3();
    fn EXTI15_10();
    fn RTC_ALARM();
    fn TIM8_BRK_TIM12();
    fn TIM8_UP_TIM13();
    fn TIM8_TRG_COM_TIM14();
    fn TIM8_CC();
    fn DMA1_STR7();
    fn FMC();
    fn SDMMC1();
    fn TIM5();
    fn SPI3();
    fn UART4();
    fn UART5();
    fn TIM6_DAC();
    fn TIM7();
    fn DMA2_STR0();
    fn DMA2_STR1();
    fn DMA2_STR2();
    fn DMA2_STR3();
    fn DMA2_STR4();
    fn ETH();
    fn ETH_WKUP();
    fn FDCAN_CAL();
    fn DMA2_STR5();
    fn DMA2_STR6();
    fn DMA2_STR7();
    fn USART6();
    fn I2C3_EV();
    fn I2C3_ER();
    fn OTG_HS_EP1_OUT();
    fn OTG_HS_EP1_IN();
    fn OTG_HS_WKUP();
    fn OTG_HS();
    fn DCMI_PSSI();
    fn FPU();
    fn UART7();
    fn UART8();
    fn SPI4();
    fn SPI5();
    fn SPI6();
    fn SAI1();
    fn LTDC();
    fn LTDC_ERR();
    fn DMA2D();
    fn OCTOSPI1();
    fn LPTIM1();
    fn CEC();
    fn I2C4_EV();
    fn I2C4_ER();
    fn SPDIF();
    fn DMAMUX1_OV();
    fn DFSDM1_FLT0();
    fn DFSDM1_FLT1();
    fn DFSDM1_FLT2();
    fn DFSDM1_FLT3();
    fn SWPMI1();
    fn TIM15();
    fn TIM16();
    fn TIM17();
    fn MDIOS_WKUP();
    fn MDIOS();
    fn MDMA();
    fn SDMMC2();
    fn HSEM0();
    fn ADC3();
    fn DMAMUX2_OVR();
    fn BDMA_CH0();
    fn BDMA_CH1();
    fn BDMA_CH2();
    fn BDMA_CH3();
    fn BDMA_CH4();
    fn BDMA_CH5();
    fn BDMA_CH6();
    fn BDMA_CH7();
    fn COMP();
    fn LPTIM2();
    fn LPTIM3();
    fn LPTIM4();
    fn LPTIM5();
    fn LPUART();
    fn CRS();
    fn ECC();
    fn SAI4();
    fn TEMP_IT();
    fn WKUP();
    fn OCTOSPI2();
    fn OTFDEC1();
    fn OTFDEC2();
    fn FMAC();
    fn CORDIC_IT();
    fn UART9();
    fn USART10();
    fn I2C5_EV();
    fn I2C5_ER();
    fn FDCAN3_IT0();
    fn FDCAN3_IT1();
    fn TIM23();
    fn TIM24();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 163] = [
    Vector { _handler: WWDG1 },
    Vector { _handler: PVD_PVM },
    Vector {
        _handler: RTC_TAMP_STAMP_CSS_LSE,
    },
    Vector { _handler: RTC_WKUP },
    Vector { _handler: FLASH },
    Vector { _handler: RCC },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector { _handler: DMA_STR0 },
    Vector { _handler: DMA_STR1 },
    Vector { _handler: DMA_STR2 },
    Vector { _handler: DMA_STR3 },
    Vector { _handler: DMA_STR4 },
    Vector { _handler: DMA_STR5 },
    Vector { _handler: DMA_STR6 },
    Vector { _handler: ADC1_2 },
    Vector {
        _handler: FDCAN1_IT0,
    },
    Vector {
        _handler: FDCAN2_IT0,
    },
    Vector {
        _handler: FDCAN1_IT1,
    },
    Vector {
        _handler: FDCAN2_IT1,
    },
    Vector { _handler: EXTI9_5 },
    Vector { _handler: TIM1_BRK },
    Vector { _handler: TIM1_UP },
    Vector {
        _handler: TIM1_TRG_COM,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM4 },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ER },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector {
        _handler: EXTI15_10,
    },
    Vector {
        _handler: RTC_ALARM,
    },
    Vector { _reserved: 0 },
    Vector {
        _handler: TIM8_BRK_TIM12,
    },
    Vector {
        _handler: TIM8_UP_TIM13,
    },
    Vector {
        _handler: TIM8_TRG_COM_TIM14,
    },
    Vector { _handler: TIM8_CC },
    Vector {
        _handler: DMA1_STR7,
    },
    Vector { _handler: FMC },
    Vector { _handler: SDMMC1 },
    Vector { _handler: TIM5 },
    Vector { _handler: SPI3 },
    Vector { _handler: UART4 },
    Vector { _handler: UART5 },
    Vector { _handler: TIM6_DAC },
    Vector { _handler: TIM7 },
    Vector {
        _handler: DMA2_STR0,
    },
    Vector {
        _handler: DMA2_STR1,
    },
    Vector {
        _handler: DMA2_STR2,
    },
    Vector {
        _handler: DMA2_STR3,
    },
    Vector {
        _handler: DMA2_STR4,
    },
    Vector { _handler: ETH },
    Vector { _handler: ETH_WKUP },
    Vector {
        _handler: FDCAN_CAL,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: DMA2_STR5,
    },
    Vector {
        _handler: DMA2_STR6,
    },
    Vector {
        _handler: DMA2_STR7,
    },
    Vector { _handler: USART6 },
    Vector { _handler: I2C3_EV },
    Vector { _handler: I2C3_ER },
    Vector {
        _handler: OTG_HS_EP1_OUT,
    },
    Vector {
        _handler: OTG_HS_EP1_IN,
    },
    Vector {
        _handler: OTG_HS_WKUP,
    },
    Vector { _handler: OTG_HS },
    Vector {
        _handler: DCMI_PSSI,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: FPU },
    Vector { _handler: UART7 },
    Vector { _handler: UART8 },
    Vector { _handler: SPI4 },
    Vector { _handler: SPI5 },
    Vector { _handler: SPI6 },
    Vector { _handler: SAI1 },
    Vector { _handler: LTDC },
    Vector { _handler: LTDC_ERR },
    Vector { _handler: DMA2D },
    Vector { _reserved: 0 },
    Vector { _handler: OCTOSPI1 },
    Vector { _handler: LPTIM1 },
    Vector { _handler: CEC },
    Vector { _handler: I2C4_EV },
    Vector { _handler: I2C4_ER },
    Vector { _handler: SPDIF },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: DMAMUX1_OV,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: DFSDM1_FLT0,
    },
    Vector {
        _handler: DFSDM1_FLT1,
    },
    Vector {
        _handler: DFSDM1_FLT2,
    },
    Vector {
        _handler: DFSDM1_FLT3,
    },
    Vector { _reserved: 0 },
    Vector { _handler: SWPMI1 },
    Vector { _handler: TIM15 },
    Vector { _handler: TIM16 },
    Vector { _handler: TIM17 },
    Vector {
        _handler: MDIOS_WKUP,
    },
    Vector { _handler: MDIOS },
    Vector { _reserved: 0 },
    Vector { _handler: MDMA },
    Vector { _reserved: 0 },
    Vector { _handler: SDMMC2 },
    Vector { _handler: HSEM0 },
    Vector { _reserved: 0 },
    Vector { _handler: ADC3 },
    Vector {
        _handler: DMAMUX2_OVR,
    },
    Vector { _handler: BDMA_CH0 },
    Vector { _handler: BDMA_CH1 },
    Vector { _handler: BDMA_CH2 },
    Vector { _handler: BDMA_CH3 },
    Vector { _handler: BDMA_CH4 },
    Vector { _handler: BDMA_CH5 },
    Vector { _handler: BDMA_CH6 },
    Vector { _handler: BDMA_CH7 },
    Vector { _handler: COMP },
    Vector { _handler: LPTIM2 },
    Vector { _handler: LPTIM3 },
    Vector { _handler: LPTIM4 },
    Vector { _handler: LPTIM5 },
    Vector { _handler: LPUART },
    Vector { _reserved: 0 },
    Vector { _handler: CRS },
    Vector { _handler: ECC },
    Vector { _handler: SAI4 },
    Vector { _handler: TEMP_IT },
    Vector { _reserved: 0 },
    Vector { _handler: WKUP },
    Vector { _handler: OCTOSPI2 },
    Vector { _handler: OTFDEC1 },
    Vector { _handler: OTFDEC2 },
    Vector { _handler: FMAC },
    Vector {
        _handler: CORDIC_IT,
    },
    Vector { _handler: UART9 },
    Vector { _handler: USART10 },
    Vector { _handler: I2C5_EV },
    Vector { _handler: I2C5_ER },
    Vector {
        _handler: FDCAN3_IT0,
    },
    Vector {
        _handler: FDCAN3_IT1,
    },
    Vector { _handler: TIM23 },
    Vector { _handler: TIM24 },
];
///Enumeration of all the interrupts.
#[cfg_attr(feature = "defmt", derive(defmt::Format))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    ///0 - Window Watchdog interrupt
    WWDG1 = 0,
    ///1 - PVD through EXTI line
    PVD_PVM = 1,
    ///2 - RTC tamper, timestamp
    RTC_TAMP_STAMP_CSS_LSE = 2,
    ///3 - RTC Wakeup interrupt
    RTC_WKUP = 3,
    ///4 - Flash memory
    FLASH = 4,
    ///5 - RCC global interrupt
    RCC = 5,
    ///6 - EXTI Line 0 interrupt
    EXTI0 = 6,
    ///7 - EXTI Line 1 interrupt
    EXTI1 = 7,
    ///8 - EXTI Line 2 interrupt
    EXTI2 = 8,
    ///9 - EXTI Line 3interrupt
    EXTI3 = 9,
    ///10 - EXTI Line 4interrupt
    EXTI4 = 10,
    ///11 - DMA1 Stream0
    DMA_STR0 = 11,
    ///12 - DMA1 Stream1
    DMA_STR1 = 12,
    ///13 - DMA1 Stream2
    DMA_STR2 = 13,
    ///14 - DMA1 Stream3
    DMA_STR3 = 14,
    ///15 - DMA1 Stream4
    DMA_STR4 = 15,
    ///16 - DMA1 Stream5
    DMA_STR5 = 16,
    ///17 - DMA1 Stream6
    DMA_STR6 = 17,
    ///18 - ADC1 and ADC2
    ADC1_2 = 18,
    ///19 - FDCAN1 Interrupt 0
    FDCAN1_IT0 = 19,
    ///20 - FDCAN2 Interrupt 0
    FDCAN2_IT0 = 20,
    ///21 - FDCAN1 Interrupt 1
    FDCAN1_IT1 = 21,
    ///22 - FDCAN2 Interrupt 1
    FDCAN2_IT1 = 22,
    ///23 - EXTI Line\[9:5\] interrupts
    EXTI9_5 = 23,
    ///24 - TIM1 break interrupt
    TIM1_BRK = 24,
    ///25 - TIM1 update interrupt
    TIM1_UP = 25,
    ///26 - TIM1 trigger and commutation
    TIM1_TRG_COM = 26,
    ///27 - TIM1 capture / compare
    TIM1_CC = 27,
    ///28 - TIM2 global interrupt
    TIM2 = 28,
    ///29 - TIM3 global interrupt
    TIM3 = 29,
    ///30 - TIM4 global interrupt
    TIM4 = 30,
    ///31 - I2C1 event interrupt
    I2C1_EV = 31,
    ///32 - I2C1 global error interrupt
    I2C1_ER = 32,
    ///33 - I2C2 event interrupt
    I2C2_EV = 33,
    ///34 - I2C2 global error interrupt
    I2C2_ER = 34,
    ///35 - SPI1 global interrupt
    SPI1 = 35,
    ///36 - SPI2 global interrupt
    SPI2 = 36,
    ///37 - USART1 global interrupt
    USART1 = 37,
    ///38 - USART2 global interrupt
    USART2 = 38,
    ///39 - USART3 global interrupt
    USART3 = 39,
    ///40 - EXTI Line\[15:10\] interrupts
    EXTI15_10 = 40,
    ///41 - RTC alarms (A and B)
    RTC_ALARM = 41,
    ///43 - TIM8 and 12 break global
    TIM8_BRK_TIM12 = 43,
    ///44 - TIM8 and 13 update global
    TIM8_UP_TIM13 = 44,
    ///45 - TIM8 and 14 trigger /commutation and global
    TIM8_TRG_COM_TIM14 = 45,
    ///46 - TIM8 capture / compare
    TIM8_CC = 46,
    ///47 - DMA1 Stream7
    DMA1_STR7 = 47,
    ///48 - FMC global interrupt
    FMC = 48,
    ///49 - SDMMC1 global interrupt
    SDMMC1 = 49,
    ///50 - TIM5 global interrupt
    TIM5 = 50,
    ///51 - SPI3 global interrupt
    SPI3 = 51,
    ///52 - UART4 global interrupt
    UART4 = 52,
    ///53 - UART5 global interrupt
    UART5 = 53,
    ///54 - TIM6 global interrupt
    TIM6_DAC = 54,
    ///55 - TIM7 global interrupt
    TIM7 = 55,
    ///56 - DMA2 Stream0 interrupt
    DMA2_STR0 = 56,
    ///57 - DMA2 Stream1 interrupt
    DMA2_STR1 = 57,
    ///58 - DMA2 Stream2 interrupt
    DMA2_STR2 = 58,
    ///59 - DMA2 Stream3 interrupt
    DMA2_STR3 = 59,
    ///60 - DMA2 Stream4 interrupt
    DMA2_STR4 = 60,
    ///61 - Ethernet global interrupt
    ETH = 61,
    ///62 - Ethernet wakeup through EXTI
    ETH_WKUP = 62,
    ///63 - CAN2TX interrupts
    FDCAN_CAL = 63,
    ///68 - DMA2 Stream5 interrupt
    DMA2_STR5 = 68,
    ///69 - DMA2 Stream6 interrupt
    DMA2_STR6 = 69,
    ///70 - DMA2 Stream7 interrupt
    DMA2_STR7 = 70,
    ///71 - USART6 global interrupt
    USART6 = 71,
    ///72 - I2C3 event interrupt
    I2C3_EV = 72,
    ///73 - I2C3 error interrupt
    I2C3_ER = 73,
    ///74 - USB OTG_HS OUT endpoint1 global interrupt
    OTG_HS_EP1_OUT = 74,
    ///75 - USB OTG_HS IN endpoint1 global interrupt
    OTG_HS_EP1_IN = 75,
    ///76 - USB OTG_HS wakeup Interrupt through EXTI line
    OTG_HS_WKUP = 76,
    ///77 - USB OTG_HS global interrupt
    OTG_HS = 77,
    ///78 - DCMI/PSSI global interrupt
    DCMI_PSSI = 78,
    ///81 - CPU FPU interrupt
    FPU = 81,
    ///82 - UART7 global interrupt
    UART7 = 82,
    ///83 - UART8 global interrupt
    UART8 = 83,
    ///84 - SPI4 global interrupt
    SPI4 = 84,
    ///85 - SPI5 global interrupt
    SPI5 = 85,
    ///86 - SPI6 global interrupt
    SPI6 = 86,
    ///87 - SAI1 global interrupt
    SAI1 = 87,
    ///88 - LCD-TFT global interrupt
    LTDC = 88,
    ///89 - LCD-TFT global Error interrupt
    LTDC_ERR = 89,
    ///90 - DMA2D global interrupt
    DMA2D = 90,
    ///92 - OCTOSPI1 global interrupt
    OCTOSPI1 = 92,
    ///93 - LPTIM1 global interrupt
    LPTIM1 = 93,
    ///94 - HDMI-CEC global interrupt
    CEC = 94,
    ///95 - I2C4 event interrupt
    I2C4_EV = 95,
    ///96 - I2C4 error interrupt
    I2C4_ER = 96,
    ///97 - SPDIFRX global interrupt
    SPDIF = 97,
    ///102 - DMAMUX1 overrun interrupt
    DMAMUX1_OV = 102,
    ///110 - DFSDM1 filter 0 interrupt
    DFSDM1_FLT0 = 110,
    ///111 - DFSDM1 filter 1 interrupt
    DFSDM1_FLT1 = 111,
    ///112 - DFSDM1 filter 2 interrupt
    DFSDM1_FLT2 = 112,
    ///113 - DFSDM1 filter 3 interrupt
    DFSDM1_FLT3 = 113,
    ///115 - SWPMI global interrupt
    SWPMI1 = 115,
    ///116 - TIM15 global interrupt
    TIM15 = 116,
    ///117 - TIM16 global interrupt
    TIM16 = 117,
    ///118 - TIM17 global interrupt
    TIM17 = 118,
    ///119 - MDIOS wakeup
    MDIOS_WKUP = 119,
    ///120 - MDIOS global interrupt
    MDIOS = 120,
    ///122 - MDMA Global interrupt
    MDMA = 122,
    ///124 - SDMMC2 global interrupt
    SDMMC2 = 124,
    ///125 - HSEM global interrupt 1
    HSEM0 = 125,
    ///127 - ADC3 global interrupt
    ADC3 = 127,
    ///128 - DMAMUX2 overrun interrupt
    DMAMUX2_OVR = 128,
    ///129 - BDMA channel 0 interrupt
    BDMA_CH0 = 129,
    ///130 - BDMA channel 1 interrupt
    BDMA_CH1 = 130,
    ///131 - BDMA channel 2 interrupt
    BDMA_CH2 = 131,
    ///132 - BDMA channel 3 interrupt
    BDMA_CH3 = 132,
    ///133 - BDMA channel 4 interrupt
    BDMA_CH4 = 133,
    ///134 - BDMA channel 5 interrupt
    BDMA_CH5 = 134,
    ///135 - BDMA channel 6 interrupt
    BDMA_CH6 = 135,
    ///136 - BDMA channel 7 interrupt
    BDMA_CH7 = 136,
    ///137 - COMP1 and COMP2 global interrupt
    COMP = 137,
    ///138 - LPTIM2 timer interrupt
    LPTIM2 = 138,
    ///139 - LPTIM2 timer interrupt
    LPTIM3 = 139,
    ///140 - LPTIM2 timer interrupt
    LPTIM4 = 140,
    ///141 - LPTIM2 timer interrupt
    LPTIM5 = 141,
    ///142 - LPUART global interrupt
    LPUART = 142,
    ///144 - Clock Recovery System global interrupt
    CRS = 144,
    ///145 - ECC diagnostic global interrupt
    ECC = 145,
    ///146 - SAI4 global interrupt
    SAI4 = 146,
    ///147 - Temperature sensor global interrupt
    TEMP_IT = 147,
    ///149 - WKUP1 to WKUP6 pins
    WKUP = 149,
    ///150 - OCTOSPI2 global interrupt
    OCTOSPI2 = 150,
    ///151 - OTFDEC1 interrupt
    OTFDEC1 = 151,
    ///152 - OTFDEC2 interrupt
    OTFDEC2 = 152,
    ///153 - FMAC interrupt
    FMAC = 153,
    ///154 - CORDIC interrupt
    CORDIC_IT = 154,
    ///155 - UART9 interrupt
    UART9 = 155,
    ///156 - USART10 interrupt
    USART10 = 156,
    ///157 - I2C5 event interrupt
    I2C5_EV = 157,
    ///158 - I2C5 error interrupt
    I2C5_ER = 158,
    ///159 - FDCAN3 Interrupt 0
    FDCAN3_IT0 = 159,
    ///160 - FDCAN3 Interrupt 1
    FDCAN3_IT1 = 160,
    ///161 - TIM23 global interrupt
    TIM23 = 161,
    ///162 - TIM24 global interrupt
    TIM24 = 162,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
///Analog to Digital Converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#ADC1)
pub type ADC1 = crate::Periph<adc1::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for ADC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC1").finish()
    }
}
///Analog to Digital Converter
pub mod adc1;
///Analog to Digital Converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#ADC1)
pub type ADC2 = crate::Periph<adc1::RegisterBlock, 0x4002_2100>;
impl core::fmt::Debug for ADC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC2").finish()
    }
}
///Analog to Digital Converter
pub use self::adc1 as adc2;
///Analog-to-Digital Converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#ADC12_Common)
pub type ADC12_COMMON = crate::Periph<adc12_common::RegisterBlock, 0x4002_2300>;
impl core::fmt::Debug for ADC12_COMMON {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC12_COMMON").finish()
    }
}
///Analog-to-Digital Converter
pub mod adc12_common;
///Analog-to-Digital Converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#ADC3)
pub type ADC3 = crate::Periph<adc3::RegisterBlock, 0x5802_6000>;
impl core::fmt::Debug for ADC3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC3").finish()
    }
}
///Analog-to-Digital Converter
pub mod adc3;
///Analog-to-Digital Converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#ADC3_Common)
pub type ADC3_COMMON = crate::Periph<adc3_common::RegisterBlock, 0x5802_6300>;
impl core::fmt::Debug for ADC3_COMMON {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC3_COMMON").finish()
    }
}
///Analog-to-Digital Converter
pub mod adc3_common;
///AXI interconnect registers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#AXI)
pub type AXI = crate::Periph<axi::RegisterBlock, 0x5100_0000>;
impl core::fmt::Debug for AXI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AXI").finish()
    }
}
///AXI interconnect registers
pub mod axi;
///BDMA
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#BDMA)
pub type BDMA = crate::Periph<bdma::RegisterBlock, 0x5802_5400>;
impl core::fmt::Debug for BDMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BDMA").finish()
    }
}
///BDMA
pub mod bdma;
///CCU registers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#CAN_CCU)
pub type CAN_CCU = crate::Periph<can_ccu::RegisterBlock, 0x4000_a800>;
impl core::fmt::Debug for CAN_CCU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CAN_CCU").finish()
    }
}
///CCU registers
pub mod can_ccu;
///CEC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#CEC)
pub type CEC = crate::Periph<cec::RegisterBlock, 0x4000_6c00>;
impl core::fmt::Debug for CEC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CEC").finish()
    }
}
///CEC
pub mod cec;
///COMP1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#COMP1)
pub type COMP1 = crate::Periph<comp1::RegisterBlock, 0x5800_3800>;
impl core::fmt::Debug for COMP1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("COMP1").finish()
    }
}
///COMP1
pub mod comp1;
///CORDIC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#CORDIC)
pub type CORDIC = crate::Periph<cordic::RegisterBlock, 0x4802_4400>;
impl core::fmt::Debug for CORDIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CORDIC").finish()
    }
}
///CORDIC register block
pub mod cordic;
///Cryptographic processor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#CRC)
pub type CRC = crate::Periph<crc::RegisterBlock, 0x5802_4c00>;
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
///Cryptographic processor
pub mod crc;
///Clock Recovery System
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#CRS)
pub type CRS = crate::Periph<crs::RegisterBlock, 0x4000_8400>;
impl core::fmt::Debug for CRS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRS").finish()
    }
}
///Clock Recovery System
pub mod crs;
///DAC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#DAC)
pub type DAC = crate::Periph<dac::RegisterBlock, 0x4000_7400>;
impl core::fmt::Debug for DAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DAC").finish()
    }
}
///DAC
pub mod dac;
///Microcontroller Debug Unit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#DBGMCU)
pub type DBGMCU = crate::Periph<dbgmcu::RegisterBlock, 0x5c00_1000>;
impl core::fmt::Debug for DBGMCU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBGMCU").finish()
    }
}
///Microcontroller Debug Unit
pub mod dbgmcu;
///Digital camera interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#DCMI)
pub type DCMI = crate::Periph<dcmi::RegisterBlock, 0x4802_0000>;
impl core::fmt::Debug for DCMI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCMI").finish()
    }
}
///Digital camera interface
pub mod dcmi;
///DELAY_Block_SDMMC1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#DELAY_Block_SDMMC1)
pub type DELAY_BLOCK_SDMMC1 = crate::Periph<delay_block_sdmmc1::RegisterBlock, 0x5200_8000>;
impl core::fmt::Debug for DELAY_BLOCK_SDMMC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DELAY_BLOCK_SDMMC1").finish()
    }
}
///DELAY_Block_SDMMC1
pub mod delay_block_sdmmc1;
///DELAY_Block_SDMMC1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#DELAY_Block_SDMMC1)
pub type DELAY_BLOCK_SDMMC2 = crate::Periph<delay_block_sdmmc1::RegisterBlock, 0x4802_2800>;
impl core::fmt::Debug for DELAY_BLOCK_SDMMC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DELAY_BLOCK_SDMMC2").finish()
    }
}
///DELAY_Block_SDMMC1
pub use self::delay_block_sdmmc1 as delay_block_sdmmc2;
///Digital filter for sigma delta modulators
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#DFSDM)
pub type DFSDM = crate::Periph<dfsdm::RegisterBlock, 0x4001_7800>;
impl core::fmt::Debug for DFSDM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DFSDM").finish()
    }
}
///Digital filter for sigma delta modulators
pub mod dfsdm;
///DMA controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#DMA1)
pub type DMA1 = crate::Periph<dma1::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for DMA1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA1").finish()
    }
}
///DMA controller
pub mod dma1;
///DMA controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#DMA1)
pub type DMA2 = crate::Periph<dma1::RegisterBlock, 0x4002_0400>;
impl core::fmt::Debug for DMA2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA2").finish()
    }
}
///DMA controller
pub use self::dma1 as dma2;
///DMA2D
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#DMA2D)
pub type DMA2D = crate::Periph<dma2d::RegisterBlock, 0x5200_1000>;
impl core::fmt::Debug for DMA2D {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA2D").finish()
    }
}
///DMA2D
pub mod dma2d;
///DMAMUX
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#DMAMUX1)
pub type DMAMUX1 = crate::Periph<dmamux1::RegisterBlock, 0x4002_0800>;
impl core::fmt::Debug for DMAMUX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMAMUX1").finish()
    }
}
///DMAMUX
pub mod dmamux1;
///DMAMUX
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#DMAMUX2)
pub type DMAMUX2 = crate::Periph<dmamux2::RegisterBlock, 0x5802_5800>;
impl core::fmt::Debug for DMAMUX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMAMUX2").finish()
    }
}
///DMAMUX
pub mod dmamux2;
///DELAY_Block_SDMMC1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#DELAY_Block_SDMMC1)
pub type DELAY_BLOCK_OCTOSPI1 = crate::Periph<delay_block_sdmmc1::RegisterBlock, 0x5200_6000>;
impl core::fmt::Debug for DELAY_BLOCK_OCTOSPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DELAY_BLOCK_OCTOSPI1").finish()
    }
}
///DELAY_Block_SDMMC1
pub use self::delay_block_sdmmc1 as delay_block_octospi1;
///DELAY_Block_SDMMC1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#DELAY_Block_SDMMC1)
pub type DELAY_BLOCK_OCTOSPI2 = crate::Periph<delay_block_sdmmc1::RegisterBlock, 0x5200_b000>;
impl core::fmt::Debug for DELAY_BLOCK_OCTOSPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DELAY_BLOCK_OCTOSPI2").finish()
    }
}
///DELAY_Block_SDMMC1
pub use self::delay_block_sdmmc1 as delay_block_octospi2;
///External interrupt/event controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#EXTI)
pub type EXTI = crate::Periph<exti::RegisterBlock, 0x5800_0000>;
impl core::fmt::Debug for EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI").finish()
    }
}
///External interrupt/event controller
pub mod exti;
///Ethernet: media access control (MAC)
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#Ethernet_MAC)
pub type ETHERNET_MAC = crate::Periph<ethernet_mac::RegisterBlock, 0x4002_8000>;
impl core::fmt::Debug for ETHERNET_MAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ETHERNET_MAC").finish()
    }
}
///Ethernet: media access control (MAC)
pub mod ethernet_mac;
///Ethernet MTL
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#Ethernet_MTL)
pub type ETHERNET_MTL = crate::Periph<ethernet_mtl::RegisterBlock, 0x4002_8c00>;
impl core::fmt::Debug for ETHERNET_MTL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ETHERNET_MTL").finish()
    }
}
///Ethernet MTL
pub mod ethernet_mtl;
///Ethernet DMA
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#Ethernet_DMA)
pub type ETHERNET_DMA = crate::Periph<ethernet_dma::RegisterBlock, 0x4002_9000>;
impl core::fmt::Debug for ETHERNET_DMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ETHERNET_DMA").finish()
    }
}
///Ethernet DMA
pub mod ethernet_dma;
///FDCAN1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#FDCAN1)
pub type FDCAN1 = crate::Periph<fdcan1::RegisterBlock, 0x4000_a000>;
impl core::fmt::Debug for FDCAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN1").finish()
    }
}
///FDCAN1
pub mod fdcan1;
///FDCAN1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#FDCAN1)
pub type FDCAN2 = crate::Periph<fdcan1::RegisterBlock, 0x4000_a400>;
impl core::fmt::Debug for FDCAN2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN2").finish()
    }
}
///FDCAN1
pub use self::fdcan1 as fdcan2;
///FDCAN1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#FDCAN1)
pub type FDCAN3 = crate::Periph<fdcan1::RegisterBlock, 0x4000_d400>;
impl core::fmt::Debug for FDCAN3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN3").finish()
    }
}
///FDCAN1
pub use self::fdcan1 as fdcan3;
///FMAC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#FMAC)
pub type FMAC = crate::Periph<fmac::RegisterBlock, 0x4802_4000>;
impl core::fmt::Debug for FMAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FMAC").finish()
    }
}
///FMAC register block
pub mod fmac;
///FMC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#FMC)
pub type FMC = crate::Periph<fmc::RegisterBlock, 0x5200_4000>;
impl core::fmt::Debug for FMC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FMC").finish()
    }
}
///FMC
pub mod fmc;
///Flash
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#FLASH)
pub type FLASH = crate::Periph<flash::RegisterBlock, 0x5200_2000>;
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
///Flash
pub mod flash;
///GPIO
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#GPIOA)
pub type GPIOA = crate::Periph<gpioa::RegisterBlock, 0x5802_0000>;
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
///GPIO
pub mod gpioa;
///GPIO
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#GPIOC)
pub type GPIOC = crate::Periph<gpioc::RegisterBlock, 0x5802_0800>;
impl core::fmt::Debug for GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC").finish()
    }
}
///GPIO
pub mod gpioc;
///GPIO
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#GPIOC)
pub type GPIOD = crate::Periph<gpioc::RegisterBlock, 0x5802_0c00>;
impl core::fmt::Debug for GPIOD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOD").finish()
    }
}
///GPIO
pub use self::gpioc as gpiod;
///GPIO
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#GPIOC)
pub type GPIOE = crate::Periph<gpioc::RegisterBlock, 0x5802_1000>;
impl core::fmt::Debug for GPIOE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOE").finish()
    }
}
///GPIO
pub use self::gpioc as gpioe;
///GPIO
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#GPIOC)
pub type GPIOF = crate::Periph<gpioc::RegisterBlock, 0x5802_1400>;
impl core::fmt::Debug for GPIOF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOF").finish()
    }
}
///GPIO
pub use self::gpioc as gpiof;
///GPIO
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#GPIOC)
pub type GPIOG = crate::Periph<gpioc::RegisterBlock, 0x5802_1800>;
impl core::fmt::Debug for GPIOG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOG").finish()
    }
}
///GPIO
pub use self::gpioc as gpiog;
///GPIO
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#GPIOC)
pub type GPIOH = crate::Periph<gpioc::RegisterBlock, 0x5802_1c00>;
impl core::fmt::Debug for GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOH").finish()
    }
}
///GPIO
pub use self::gpioc as gpioh;
///HSEM
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#HSEM)
pub type HSEM = crate::Periph<hsem::RegisterBlock, 0x5802_6400>;
impl core::fmt::Debug for HSEM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HSEM").finish()
    }
}
///HSEM
pub mod hsem;
///I2C
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#I2C1)
pub type I2C1 = crate::Periph<i2c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
///I2C
pub mod i2c1;
///I2C
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#I2C1)
pub type I2C2 = crate::Periph<i2c1::RegisterBlock, 0x4000_5800>;
impl core::fmt::Debug for I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2").finish()
    }
}
///I2C
pub use self::i2c1 as i2c2;
///I2C
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#I2C1)
pub type I2C3 = crate::Periph<i2c1::RegisterBlock, 0x4000_5c00>;
impl core::fmt::Debug for I2C3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C3").finish()
    }
}
///I2C
pub use self::i2c1 as i2c3;
///I2C
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#I2C1)
pub type I2C4 = crate::Periph<i2c1::RegisterBlock, 0x5800_1c00>;
impl core::fmt::Debug for I2C4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C4").finish()
    }
}
///I2C
pub use self::i2c1 as i2c4;
///I2C
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#I2C1)
pub type I2C5 = crate::Periph<i2c1::RegisterBlock, 0x4000_6400>;
impl core::fmt::Debug for I2C5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C5").finish()
    }
}
///I2C
pub use self::i2c1 as i2c5;
///IWDG
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#IWDG1)
pub type IWDG1 = crate::Periph<iwdg1::RegisterBlock, 0x5800_4800>;
impl core::fmt::Debug for IWDG1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG1").finish()
    }
}
///IWDG
pub mod iwdg1;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#LPTIM1)
pub type LPTIM1 = crate::Periph<lptim1::RegisterBlock, 0x4000_2400>;
impl core::fmt::Debug for LPTIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM1").finish()
    }
}
///Low power timer
pub mod lptim1;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#LPTIM1)
pub type LPTIM2 = crate::Periph<lptim1::RegisterBlock, 0x5800_2400>;
impl core::fmt::Debug for LPTIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM2").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim2;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#LPTIM1)
pub type LPTIM3 = crate::Periph<lptim1::RegisterBlock, 0x5800_2800>;
impl core::fmt::Debug for LPTIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM3").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim3;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#LPTIM1)
pub type LPTIM4 = crate::Periph<lptim1::RegisterBlock, 0x5800_2c00>;
impl core::fmt::Debug for LPTIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM4").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim4;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#LPTIM1)
pub type LPTIM5 = crate::Periph<lptim1::RegisterBlock, 0x5800_3000>;
impl core::fmt::Debug for LPTIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM5").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim5;
///LPUART1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#LPUART1)
pub type LPUART1 = crate::Periph<lpuart1::RegisterBlock, 0x5800_0c00>;
impl core::fmt::Debug for LPUART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART1").finish()
    }
}
///LPUART1
pub mod lpuart1;
///LCD-TFT Controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#LTDC)
pub type LTDC = crate::Periph<ltdc::RegisterBlock, 0x5000_1000>;
impl core::fmt::Debug for LTDC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LTDC").finish()
    }
}
///LCD-TFT Controller
pub mod ltdc;
///Management data input/output slave
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#MDIOS)
pub type MDIOS = crate::Periph<mdios::RegisterBlock, 0x4000_9400>;
impl core::fmt::Debug for MDIOS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDIOS").finish()
    }
}
///Management data input/output slave
pub mod mdios;
///MDMA
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#MDMA)
pub type MDMA = crate::Periph<mdma::RegisterBlock, 0x5200_0000>;
impl core::fmt::Debug for MDMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDMA").finish()
    }
}
///MDMA
pub mod mdma;
///OctoSPI
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#OCTOSPI1)
pub type OCTOSPI1 = crate::Periph<octospi1::RegisterBlock, 0x5200_5000>;
impl core::fmt::Debug for OCTOSPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OCTOSPI1").finish()
    }
}
///OctoSPI
pub mod octospi1;
///OctoSPI
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#OCTOSPI1)
pub type OCTOSPI2 = crate::Periph<octospi1::RegisterBlock, 0x5200_a000>;
impl core::fmt::Debug for OCTOSPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OCTOSPI2").finish()
    }
}
///OctoSPI
pub use self::octospi1 as octospi2;
///Operational amplifiers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#OPAMP)
pub type OPAMP = crate::Periph<opamp::RegisterBlock, 0x4000_9000>;
impl core::fmt::Debug for OPAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OPAMP").finish()
    }
}
///Operational amplifiers
pub mod opamp;
///USB 1 on the go high speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#OTG1_HS_DEVICE)
pub type OTG1_HS_DEVICE = crate::Periph<otg1_hs_device::RegisterBlock, 0x4004_0800>;
impl core::fmt::Debug for OTG1_HS_DEVICE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG1_HS_DEVICE").finish()
    }
}
///USB 1 on the go high speed
pub mod otg1_hs_device;
///USB 1 on the go high speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#OTG1_HS_DEVICE)
pub type OTG2_HS_DEVICE = crate::Periph<otg1_hs_device::RegisterBlock, 0x4008_0800>;
impl core::fmt::Debug for OTG2_HS_DEVICE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG2_HS_DEVICE").finish()
    }
}
///USB 1 on the go high speed
pub use self::otg1_hs_device as otg2_hs_device;
///USB 1 on the go high speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#OTG1_HS_GLOBAL)
pub type OTG1_HS_GLOBAL = crate::Periph<otg1_hs_global::RegisterBlock, 0x4004_0000>;
impl core::fmt::Debug for OTG1_HS_GLOBAL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG1_HS_GLOBAL").finish()
    }
}
///USB 1 on the go high speed
pub mod otg1_hs_global;
///USB 1 on the go high speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#OTG1_HS_HOST)
pub type OTG1_HS_HOST = crate::Periph<otg1_hs_host::RegisterBlock, 0x4004_0400>;
impl core::fmt::Debug for OTG1_HS_HOST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG1_HS_HOST").finish()
    }
}
///USB 1 on the go high speed
pub mod otg1_hs_host;
///USB 1 on the go high speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#OTG1_HS_HOST)
pub type OTG2_HS_HOST = crate::Periph<otg1_hs_host::RegisterBlock, 0x4008_0400>;
impl core::fmt::Debug for OTG2_HS_HOST {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG2_HS_HOST").finish()
    }
}
///USB 1 on the go high speed
pub use self::otg1_hs_host as otg2_hs_host;
///USB 1 on the go high speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#OTG1_HS_PWRCLK)
pub type OTG1_HS_PWRCLK = crate::Periph<otg1_hs_pwrclk::RegisterBlock, 0x4004_0e00>;
impl core::fmt::Debug for OTG1_HS_PWRCLK {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG1_HS_PWRCLK").finish()
    }
}
///USB 1 on the go high speed
pub mod otg1_hs_pwrclk;
///USB 1 on the go high speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#OTG1_HS_PWRCLK)
pub type OTG2_HS_PWRCLK = crate::Periph<otg1_hs_pwrclk::RegisterBlock, 0x4008_0e00>;
impl core::fmt::Debug for OTG2_HS_PWRCLK {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG2_HS_PWRCLK").finish()
    }
}
///USB 1 on the go high speed
pub use self::otg1_hs_pwrclk as otg2_hs_pwrclk;
///OctoSPI IO Manager
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#OctoSPII_O_Manager)
pub type OCTO_SPII_O_MANAGER = crate::Periph<octo_spii_o_manager::RegisterBlock, 0x5200_b400>;
impl core::fmt::Debug for OCTO_SPII_O_MANAGER {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OCTO_SPII_O_MANAGER").finish()
    }
}
///OctoSPI IO Manager
pub mod octo_spii_o_manager;
///OTFDEC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#OTFDEC1)
pub type OTFDEC1 = crate::Periph<otfdec1::RegisterBlock, 0x5200_b800>;
impl core::fmt::Debug for OTFDEC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTFDEC1").finish()
    }
}
///OTFDEC address block description
pub mod otfdec1;
///OTFDEC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#OTFDEC1)
pub type OTFDEC2 = crate::Periph<otfdec1::RegisterBlock, 0x5200_bc00>;
impl core::fmt::Debug for OTFDEC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTFDEC2").finish()
    }
}
///OTFDEC address block description
pub use self::otfdec1 as otfdec2;
///PSSI register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#PSSI)
pub type PSSI = crate::Periph<pssi::RegisterBlock, 0x4802_0400>;
impl core::fmt::Debug for PSSI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PSSI").finish()
    }
}
///PSSI register block
pub mod pssi;
///PWR
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#PWR)
pub type PWR = crate::Periph<pwr::RegisterBlock, 0x5802_4800>;
impl core::fmt::Debug for PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR").finish()
    }
}
///PWR
pub mod pwr;
///ECC controller is associated to each RAM area
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#RAMECC1)
pub type RAMECC1 = crate::Periph<ramecc1::RegisterBlock, 0x5200_9000>;
impl core::fmt::Debug for RAMECC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAMECC1").finish()
    }
}
///ECC controller is associated to each RAM area
pub mod ramecc1;
///ECC controller is associated to each RAM area
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#RAMECC1)
pub type RAMECC2 = crate::Periph<ramecc1::RegisterBlock, 0x4802_3000>;
impl core::fmt::Debug for RAMECC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAMECC2").finish()
    }
}
///ECC controller is associated to each RAM area
pub use self::ramecc1 as ramecc2;
///ECC controller is associated to each RAM area
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#RAMECC3)
pub type RAMECC3 = crate::Periph<ramecc3::RegisterBlock, 0x5802_7000>;
impl core::fmt::Debug for RAMECC3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAMECC3").finish()
    }
}
///ECC controller is associated to each RAM area
pub mod ramecc3;
///Reset and clock control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#RCC)
pub type RCC = crate::Periph<rcc::RegisterBlock, 0x5802_4400>;
impl core::fmt::Debug for RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC").finish()
    }
}
///Reset and clock control
pub mod rcc;
///RNG
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#RNG)
pub type RNG = crate::Periph<rng::RegisterBlock, 0x4802_1800>;
impl core::fmt::Debug for RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG").finish()
    }
}
///RNG
pub mod rng;
///RTC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#RTC)
pub type RTC = crate::Periph<rtc::RegisterBlock, 0x5800_4000>;
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
///RTC
pub mod rtc;
///SAI
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#SAI1)
pub type SAI1 = crate::Periph<sai1::RegisterBlock, 0x4001_5800>;
impl core::fmt::Debug for SAI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI1").finish()
    }
}
///SAI
pub mod sai1;
///SAI
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#SAI1)
pub type SAI4 = crate::Periph<sai1::RegisterBlock, 0x5800_5400>;
impl core::fmt::Debug for SAI4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI4").finish()
    }
}
///SAI
pub use self::sai1 as sai4;
///SDMMC1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#SDMMC1)
pub type SDMMC1 = crate::Periph<sdmmc1::RegisterBlock, 0x5200_7000>;
impl core::fmt::Debug for SDMMC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC1").finish()
    }
}
///SDMMC1
pub mod sdmmc1;
///SDMMC1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#SDMMC1)
pub type SDMMC2 = crate::Periph<sdmmc1::RegisterBlock, 0x4802_2400>;
impl core::fmt::Debug for SDMMC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC2").finish()
    }
}
///SDMMC1
pub use self::sdmmc1 as sdmmc2;
///Receiver Interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#SPDIFRX)
pub type SPDIFRX = crate::Periph<spdifrx::RegisterBlock, 0x4000_4000>;
impl core::fmt::Debug for SPDIFRX {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPDIFRX").finish()
    }
}
///Receiver Interface
pub mod spdifrx;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#SPI1)
pub type SPI1 = crate::Periph<spi1::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
///Serial peripheral interface
pub mod spi1;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#SPI1)
pub type SPI2 = crate::Periph<spi1::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi2;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#SPI1)
pub type SPI3 = crate::Periph<spi1::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi3;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#SPI1)
pub type SPI4 = crate::Periph<spi1::RegisterBlock, 0x4001_3400>;
impl core::fmt::Debug for SPI4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI4").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi4;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#SPI1)
pub type SPI5 = crate::Periph<spi1::RegisterBlock, 0x4001_5000>;
impl core::fmt::Debug for SPI5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI5").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi5;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#SPI1)
pub type SPI6 = crate::Periph<spi1::RegisterBlock, 0x5800_1400>;
impl core::fmt::Debug for SPI6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI6").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi6;
///Single Wire Protocol Master Interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#SWPMI)
pub type SWPMI = crate::Periph<swpmi::RegisterBlock, 0x4000_8800>;
impl core::fmt::Debug for SWPMI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SWPMI").finish()
    }
}
///Single Wire Protocol Master Interface
pub mod swpmi;
///System configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#SYSCFG)
pub type SYSCFG = crate::Periph<syscfg::RegisterBlock, 0x5800_0400>;
impl core::fmt::Debug for SYSCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCFG").finish()
    }
}
///System configuration controller
pub mod syscfg;
///Advanced-timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM1)
pub type TIM1 = crate::Periph<tim1::RegisterBlock, 0x4001_0000>;
impl core::fmt::Debug for TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1").finish()
    }
}
///Advanced-timers
pub mod tim1;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM2)
pub type TIM2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2").finish()
    }
}
///General purpose timers
pub mod tim2;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM3)
pub type TIM3 = crate::Periph<tim3::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3").finish()
    }
}
///General purpose timers
pub mod tim3;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM3)
pub type TIM4 = crate::Periph<tim3::RegisterBlock, 0x4000_0800>;
impl core::fmt::Debug for TIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM4").finish()
    }
}
///General purpose timers
pub use self::tim3 as tim4;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM2)
pub type TIM5 = crate::Periph<tim2::RegisterBlock, 0x4000_0c00>;
impl core::fmt::Debug for TIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM5").finish()
    }
}
///General purpose timers
pub use self::tim2 as tim5;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM6)
pub type TIM6 = crate::Periph<tim6::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for TIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM6").finish()
    }
}
///Basic timers
pub mod tim6;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM6)
pub type TIM7 = crate::Periph<tim6::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for TIM7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM7").finish()
    }
}
///Basic timers
pub use self::tim6 as tim7;
///Advanced-timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM1)
pub type TIM8 = crate::Periph<tim1::RegisterBlock, 0x4001_0400>;
impl core::fmt::Debug for TIM8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM8").finish()
    }
}
///Advanced-timers
pub use self::tim1 as tim8;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM12)
pub type TIM12 = crate::Periph<tim12::RegisterBlock, 0x4000_1800>;
impl core::fmt::Debug for TIM12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM12").finish()
    }
}
///General purpose timers
pub mod tim12;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM13)
pub type TIM13 = crate::Periph<tim13::RegisterBlock, 0x4000_1c00>;
impl core::fmt::Debug for TIM13 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM13").finish()
    }
}
///General purpose timers
pub mod tim13;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM13)
pub type TIM14 = crate::Periph<tim13::RegisterBlock, 0x4000_2000>;
impl core::fmt::Debug for TIM14 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM14").finish()
    }
}
///General purpose timers
pub use self::tim13 as tim14;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM15)
pub type TIM15 = crate::Periph<tim15::RegisterBlock, 0x4001_4000>;
impl core::fmt::Debug for TIM15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM15").finish()
    }
}
///General purpose timers
pub mod tim15;
///General-purpose-timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM16)
pub type TIM16 = crate::Periph<tim16::RegisterBlock, 0x4001_4400>;
impl core::fmt::Debug for TIM16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM16").finish()
    }
}
///General-purpose-timers
pub mod tim16;
///General-purpose-timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM17)
pub type TIM17 = crate::Periph<tim17::RegisterBlock, 0x4001_4800>;
impl core::fmt::Debug for TIM17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM17").finish()
    }
}
///General-purpose-timers
pub mod tim17;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM2)
pub type TIM23 = crate::Periph<tim2::RegisterBlock, 0x4000_e000>;
impl core::fmt::Debug for TIM23 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM23").finish()
    }
}
///General purpose timers
pub use self::tim2 as tim23;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#TIM2)
pub type TIM24 = crate::Periph<tim2::RegisterBlock, 0x4000_e400>;
impl core::fmt::Debug for TIM24 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM24").finish()
    }
}
///General purpose timers
pub use self::tim2 as tim24;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#USART1)
pub type USART1 = crate::Periph<usart1::RegisterBlock, 0x4001_1000>;
impl core::fmt::Debug for USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub mod usart1;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#USART1)
pub type USART2 = crate::Periph<usart1::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart2;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#USART1)
pub type USART3 = crate::Periph<usart1::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for USART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART3").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart3;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#USART1)
pub type UART4 = crate::Periph<usart1::RegisterBlock, 0x4000_4c00>;
impl core::fmt::Debug for UART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART4").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart4;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#USART1)
pub type UART5 = crate::Periph<usart1::RegisterBlock, 0x4000_5000>;
impl core::fmt::Debug for UART5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART5").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart5;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#USART1)
pub type USART6 = crate::Periph<usart1::RegisterBlock, 0x4001_1400>;
impl core::fmt::Debug for USART6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART6").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart6;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#USART1)
pub type UART7 = crate::Periph<usart1::RegisterBlock, 0x4000_7800>;
impl core::fmt::Debug for UART7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART7").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart7;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#USART1)
pub type UART8 = crate::Periph<usart1::RegisterBlock, 0x4000_7c00>;
impl core::fmt::Debug for UART8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART8").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart8;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#USART1)
pub type UART9 = crate::Periph<usart1::RegisterBlock, 0x4001_1800>;
impl core::fmt::Debug for UART9 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART9").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as uart9;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#USART1)
pub type USART10 = crate::Periph<usart1::RegisterBlock, 0x4001_1c00>;
impl core::fmt::Debug for USART10 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART10").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub use self::usart1 as usart10;
///VREFBUF
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#VREFBUF)
pub type VREFBUF = crate::Periph<vrefbuf::RegisterBlock, 0x5800_3c00>;
impl core::fmt::Debug for VREFBUF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VREFBUF").finish()
    }
}
///VREFBUF
pub mod vrefbuf;
///WWDG
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#WWDG1)
pub type WWDG1 = crate::Periph<wwdg1::RegisterBlock, 0x5000_3000>;
impl core::fmt::Debug for WWDG1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG1").finish()
    }
}
///WWDG
pub mod wwdg1;
///GPIO
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#GPIOJ)
pub type GPIOJ = crate::Periph<gpioj::RegisterBlock, 0x5802_2400>;
impl core::fmt::Debug for GPIOJ {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOJ").finish()
    }
}
///GPIO
pub mod gpioj;
///GPIO
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#GPIOK)
pub type GPIOK = crate::Periph<gpiok::RegisterBlock, 0x5802_2800>;
impl core::fmt::Debug for GPIOK {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOK").finish()
    }
}
///GPIO
pub mod gpiok;
///GPIO
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H725.html#GPIOB)
pub type GPIOB = crate::Periph<gpiob::RegisterBlock, 0x5802_0400>;
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
///GPIO
pub mod gpiob;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
/// All the peripherals.
#[allow(non_snake_case)]
pub struct Peripherals {
    ///ADC1
    pub ADC1: ADC1,
    ///ADC2
    pub ADC2: ADC2,
    ///ADC12_Common
    pub ADC12_COMMON: ADC12_COMMON,
    ///ADC3
    pub ADC3: ADC3,
    ///ADC3_Common
    pub ADC3_COMMON: ADC3_COMMON,
    ///AXI
    pub AXI: AXI,
    ///BDMA
    pub BDMA: BDMA,
    ///CAN_CCU
    pub CAN_CCU: CAN_CCU,
    ///CEC
    pub CEC: CEC,
    ///COMP1
    pub COMP1: COMP1,
    ///CORDIC
    pub CORDIC: CORDIC,
    ///CRC
    pub CRC: CRC,
    ///CRS
    pub CRS: CRS,
    ///DAC
    pub DAC: DAC,
    ///DBGMCU
    pub DBGMCU: DBGMCU,
    ///DCMI
    pub DCMI: DCMI,
    ///DELAY_Block_SDMMC1
    pub DELAY_BLOCK_SDMMC1: DELAY_BLOCK_SDMMC1,
    ///DELAY_Block_SDMMC2
    pub DELAY_BLOCK_SDMMC2: DELAY_BLOCK_SDMMC2,
    ///DFSDM
    pub DFSDM: DFSDM,
    ///DMA1
    pub DMA1: DMA1,
    ///DMA2
    pub DMA2: DMA2,
    ///DMA2D
    pub DMA2D: DMA2D,
    ///DMAMUX1
    pub DMAMUX1: DMAMUX1,
    ///DMAMUX2
    pub DMAMUX2: DMAMUX2,
    ///Delay_Block_OCTOSPI1
    pub DELAY_BLOCK_OCTOSPI1: DELAY_BLOCK_OCTOSPI1,
    ///Delay_Block_OCTOSPI2
    pub DELAY_BLOCK_OCTOSPI2: DELAY_BLOCK_OCTOSPI2,
    ///EXTI
    pub EXTI: EXTI,
    ///Ethernet_MAC
    pub ETHERNET_MAC: ETHERNET_MAC,
    ///Ethernet_MTL
    pub ETHERNET_MTL: ETHERNET_MTL,
    ///Ethernet_DMA
    pub ETHERNET_DMA: ETHERNET_DMA,
    ///FDCAN1
    pub FDCAN1: FDCAN1,
    ///FDCAN2
    pub FDCAN2: FDCAN2,
    ///FDCAN3
    pub FDCAN3: FDCAN3,
    ///FMAC
    pub FMAC: FMAC,
    ///FMC
    pub FMC: FMC,
    ///FLASH
    pub FLASH: FLASH,
    ///GPIOA
    pub GPIOA: GPIOA,
    ///GPIOC
    pub GPIOC: GPIOC,
    ///GPIOD
    pub GPIOD: GPIOD,
    ///GPIOE
    pub GPIOE: GPIOE,
    ///GPIOF
    pub GPIOF: GPIOF,
    ///GPIOG
    pub GPIOG: GPIOG,
    ///GPIOH
    pub GPIOH: GPIOH,
    ///HSEM
    pub HSEM: HSEM,
    ///I2C1
    pub I2C1: I2C1,
    ///I2C2
    pub I2C2: I2C2,
    ///I2C3
    pub I2C3: I2C3,
    ///I2C4
    pub I2C4: I2C4,
    ///I2C5
    pub I2C5: I2C5,
    ///IWDG1
    pub IWDG1: IWDG1,
    ///LPTIM1
    pub LPTIM1: LPTIM1,
    ///LPTIM2
    pub LPTIM2: LPTIM2,
    ///LPTIM3
    pub LPTIM3: LPTIM3,
    ///LPTIM4
    pub LPTIM4: LPTIM4,
    ///LPTIM5
    pub LPTIM5: LPTIM5,
    ///LPUART1
    pub LPUART1: LPUART1,
    ///LTDC
    pub LTDC: LTDC,
    ///MDIOS
    pub MDIOS: MDIOS,
    ///MDMA
    pub MDMA: MDMA,
    ///OCTOSPI1
    pub OCTOSPI1: OCTOSPI1,
    ///OCTOSPI2
    pub OCTOSPI2: OCTOSPI2,
    ///OPAMP
    pub OPAMP: OPAMP,
    ///OTG1_HS_DEVICE
    pub OTG1_HS_DEVICE: OTG1_HS_DEVICE,
    ///OTG2_HS_DEVICE
    pub OTG2_HS_DEVICE: OTG2_HS_DEVICE,
    ///OTG1_HS_GLOBAL
    pub OTG1_HS_GLOBAL: OTG1_HS_GLOBAL,
    ///OTG1_HS_HOST
    pub OTG1_HS_HOST: OTG1_HS_HOST,
    ///OTG2_HS_HOST
    pub OTG2_HS_HOST: OTG2_HS_HOST,
    ///OTG1_HS_PWRCLK
    pub OTG1_HS_PWRCLK: OTG1_HS_PWRCLK,
    ///OTG2_HS_PWRCLK
    pub OTG2_HS_PWRCLK: OTG2_HS_PWRCLK,
    ///OctoSPII_O_Manager
    pub OCTO_SPII_O_MANAGER: OCTO_SPII_O_MANAGER,
    ///OTFDEC1
    pub OTFDEC1: OTFDEC1,
    ///OTFDEC2
    pub OTFDEC2: OTFDEC2,
    ///PSSI
    pub PSSI: PSSI,
    ///PWR
    pub PWR: PWR,
    ///RAMECC1
    pub RAMECC1: RAMECC1,
    ///RAMECC2
    pub RAMECC2: RAMECC2,
    ///RAMECC3
    pub RAMECC3: RAMECC3,
    ///RCC
    pub RCC: RCC,
    ///RNG
    pub RNG: RNG,
    ///RTC
    pub RTC: RTC,
    ///SAI1
    pub SAI1: SAI1,
    ///SAI4
    pub SAI4: SAI4,
    ///SDMMC1
    pub SDMMC1: SDMMC1,
    ///SDMMC2
    pub SDMMC2: SDMMC2,
    ///SPDIFRX
    pub SPDIFRX: SPDIFRX,
    ///SPI1
    pub SPI1: SPI1,
    ///SPI2
    pub SPI2: SPI2,
    ///SPI3
    pub SPI3: SPI3,
    ///SPI4
    pub SPI4: SPI4,
    ///SPI5
    pub SPI5: SPI5,
    ///SPI6
    pub SPI6: SPI6,
    ///SWPMI
    pub SWPMI: SWPMI,
    ///SYSCFG
    pub SYSCFG: SYSCFG,
    ///TIM1
    pub TIM1: TIM1,
    ///TIM2
    pub TIM2: TIM2,
    ///TIM3
    pub TIM3: TIM3,
    ///TIM4
    pub TIM4: TIM4,
    ///TIM5
    pub TIM5: TIM5,
    ///TIM6
    pub TIM6: TIM6,
    ///TIM7
    pub TIM7: TIM7,
    ///TIM8
    pub TIM8: TIM8,
    ///TIM12
    pub TIM12: TIM12,
    ///TIM13
    pub TIM13: TIM13,
    ///TIM14
    pub TIM14: TIM14,
    ///TIM15
    pub TIM15: TIM15,
    ///TIM16
    pub TIM16: TIM16,
    ///TIM17
    pub TIM17: TIM17,
    ///TIM23
    pub TIM23: TIM23,
    ///TIM24
    pub TIM24: TIM24,
    ///USART1
    pub USART1: USART1,
    ///USART2
    pub USART2: USART2,
    ///USART3
    pub USART3: USART3,
    ///UART4
    pub UART4: UART4,
    ///UART5
    pub UART5: UART5,
    ///USART6
    pub USART6: USART6,
    ///UART7
    pub UART7: UART7,
    ///UART8
    pub UART8: UART8,
    ///UART9
    pub UART9: UART9,
    ///USART10
    pub USART10: USART10,
    ///VREFBUF
    pub VREFBUF: VREFBUF,
    ///WWDG1
    pub WWDG1: WWDG1,
    ///GPIOJ
    pub GPIOJ: GPIOJ,
    ///GPIOK
    pub GPIOK: GPIOK,
    ///GPIOB
    pub GPIOB: GPIOB,
}
impl Peripherals {
    /// Returns all the peripherals *once*.
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    /// Unchecked version of `Peripherals::take`.
    ///
    /// # Safety
    ///
    /// Each of the returned peripherals must be used at most once.
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            ADC1: ADC1::steal(),
            ADC2: ADC2::steal(),
            ADC12_COMMON: ADC12_COMMON::steal(),
            ADC3: ADC3::steal(),
            ADC3_COMMON: ADC3_COMMON::steal(),
            AXI: AXI::steal(),
            BDMA: BDMA::steal(),
            CAN_CCU: CAN_CCU::steal(),
            CEC: CEC::steal(),
            COMP1: COMP1::steal(),
            CORDIC: CORDIC::steal(),
            CRC: CRC::steal(),
            CRS: CRS::steal(),
            DAC: DAC::steal(),
            DBGMCU: DBGMCU::steal(),
            DCMI: DCMI::steal(),
            DELAY_BLOCK_SDMMC1: DELAY_BLOCK_SDMMC1::steal(),
            DELAY_BLOCK_SDMMC2: DELAY_BLOCK_SDMMC2::steal(),
            DFSDM: DFSDM::steal(),
            DMA1: DMA1::steal(),
            DMA2: DMA2::steal(),
            DMA2D: DMA2D::steal(),
            DMAMUX1: DMAMUX1::steal(),
            DMAMUX2: DMAMUX2::steal(),
            DELAY_BLOCK_OCTOSPI1: DELAY_BLOCK_OCTOSPI1::steal(),
            DELAY_BLOCK_OCTOSPI2: DELAY_BLOCK_OCTOSPI2::steal(),
            EXTI: EXTI::steal(),
            ETHERNET_MAC: ETHERNET_MAC::steal(),
            ETHERNET_MTL: ETHERNET_MTL::steal(),
            ETHERNET_DMA: ETHERNET_DMA::steal(),
            FDCAN1: FDCAN1::steal(),
            FDCAN2: FDCAN2::steal(),
            FDCAN3: FDCAN3::steal(),
            FMAC: FMAC::steal(),
            FMC: FMC::steal(),
            FLASH: FLASH::steal(),
            GPIOA: GPIOA::steal(),
            GPIOC: GPIOC::steal(),
            GPIOD: GPIOD::steal(),
            GPIOE: GPIOE::steal(),
            GPIOF: GPIOF::steal(),
            GPIOG: GPIOG::steal(),
            GPIOH: GPIOH::steal(),
            HSEM: HSEM::steal(),
            I2C1: I2C1::steal(),
            I2C2: I2C2::steal(),
            I2C3: I2C3::steal(),
            I2C4: I2C4::steal(),
            I2C5: I2C5::steal(),
            IWDG1: IWDG1::steal(),
            LPTIM1: LPTIM1::steal(),
            LPTIM2: LPTIM2::steal(),
            LPTIM3: LPTIM3::steal(),
            LPTIM4: LPTIM4::steal(),
            LPTIM5: LPTIM5::steal(),
            LPUART1: LPUART1::steal(),
            LTDC: LTDC::steal(),
            MDIOS: MDIOS::steal(),
            MDMA: MDMA::steal(),
            OCTOSPI1: OCTOSPI1::steal(),
            OCTOSPI2: OCTOSPI2::steal(),
            OPAMP: OPAMP::steal(),
            OTG1_HS_DEVICE: OTG1_HS_DEVICE::steal(),
            OTG2_HS_DEVICE: OTG2_HS_DEVICE::steal(),
            OTG1_HS_GLOBAL: OTG1_HS_GLOBAL::steal(),
            OTG1_HS_HOST: OTG1_HS_HOST::steal(),
            OTG2_HS_HOST: OTG2_HS_HOST::steal(),
            OTG1_HS_PWRCLK: OTG1_HS_PWRCLK::steal(),
            OTG2_HS_PWRCLK: OTG2_HS_PWRCLK::steal(),
            OCTO_SPII_O_MANAGER: OCTO_SPII_O_MANAGER::steal(),
            OTFDEC1: OTFDEC1::steal(),
            OTFDEC2: OTFDEC2::steal(),
            PSSI: PSSI::steal(),
            PWR: PWR::steal(),
            RAMECC1: RAMECC1::steal(),
            RAMECC2: RAMECC2::steal(),
            RAMECC3: RAMECC3::steal(),
            RCC: RCC::steal(),
            RNG: RNG::steal(),
            RTC: RTC::steal(),
            SAI1: SAI1::steal(),
            SAI4: SAI4::steal(),
            SDMMC1: SDMMC1::steal(),
            SDMMC2: SDMMC2::steal(),
            SPDIFRX: SPDIFRX::steal(),
            SPI1: SPI1::steal(),
            SPI2: SPI2::steal(),
            SPI3: SPI3::steal(),
            SPI4: SPI4::steal(),
            SPI5: SPI5::steal(),
            SPI6: SPI6::steal(),
            SWPMI: SWPMI::steal(),
            SYSCFG: SYSCFG::steal(),
            TIM1: TIM1::steal(),
            TIM2: TIM2::steal(),
            TIM3: TIM3::steal(),
            TIM4: TIM4::steal(),
            TIM5: TIM5::steal(),
            TIM6: TIM6::steal(),
            TIM7: TIM7::steal(),
            TIM8: TIM8::steal(),
            TIM12: TIM12::steal(),
            TIM13: TIM13::steal(),
            TIM14: TIM14::steal(),
            TIM15: TIM15::steal(),
            TIM16: TIM16::steal(),
            TIM17: TIM17::steal(),
            TIM23: TIM23::steal(),
            TIM24: TIM24::steal(),
            USART1: USART1::steal(),
            USART2: USART2::steal(),
            USART3: USART3::steal(),
            UART4: UART4::steal(),
            UART5: UART5::steal(),
            USART6: USART6::steal(),
            UART7: UART7::steal(),
            UART8: UART8::steal(),
            UART9: UART9::steal(),
            USART10: USART10::steal(),
            VREFBUF: VREFBUF::steal(),
            WWDG1: WWDG1::steal(),
            GPIOJ: GPIOJ::steal(),
            GPIOK: GPIOK::steal(),
            GPIOB: GPIOB::steal(),
        }
    }
}
