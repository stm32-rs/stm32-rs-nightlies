/*!Peripheral access API for STM32H7R microcontrollers (generated using svd2rust v0.36.1 (4052ce6 2025-04-04))

You can find an overview of the generated API [here].

API features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.

[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api
[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased
[repository]: https://github.com/rust-embedded/svd2rust*/
///Number available in the NVIC for configuring priority
pub const NVIC_PRIO_BITS: u8 = 4;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn PVD_AVD();
    fn DTS();
    fn IWDG();
    fn WWDG();
    fn RCC();
    fn LOOKUP();
    fn CACHE_ECC();
    fn FLASH();
    fn ECC_FPU();
    fn FPU();
    fn TAMP();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn EXTI5();
    fn EXTI6();
    fn EXTI7();
    fn EXTI8();
    fn EXTI9();
    fn EXTI10();
    fn EXTI11();
    fn EXTI12();
    fn EXTI13();
    fn EXTI14();
    fn EXTI15();
    fn RTC();
    fn HASH();
    fn RNG();
    fn ADC1_2();
    fn GPDMA1_CH0();
    fn GPDMA1_CH1();
    fn GPDMA1_CH2();
    fn GPDMA1_CH3();
    fn GPDMA1_CH4();
    fn GPDMA1_CH5();
    fn GPDMA1_CH6();
    fn GPDMA1_CH7();
    fn TIM1_BRK();
    fn TIM1_UP();
    fn TIM1_TRG_COM();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM4();
    fn TIM5();
    fn TIM6();
    fn TIM7();
    fn TIM9();
    fn SPI1();
    fn SPI2();
    fn SPI3();
    fn SPI4();
    fn SPI5();
    fn SPI6();
    fn HPDMA1_CH0();
    fn HPDMA1_CH1();
    fn HPDMA1_CH2();
    fn HPDMA1_CH3();
    fn HPDMA1_CH4();
    fn HPDMA1_CH5();
    fn HPDMA1_CH6();
    fn HPDMA1_CH7();
    fn SAI1_A();
    fn SAI1_B();
    fn SAI2_A();
    fn SAI2_B();
    fn I2C1_EV();
    fn I2C1_ER();
    fn I2C2_EV();
    fn I2C2_ER();
    fn I2C3_EV();
    fn I2C3_ER();
    fn USART1();
    fn USART2();
    fn USART3();
    fn UART4();
    fn UART5();
    fn UART7();
    fn UART8();
    fn I3C1_EV();
    fn I3C1_ER();
    fn OTG_HS();
    fn ETH();
    fn CORDIC();
    fn GFXTIM();
    fn DCMIPP();
    fn LTDC();
    fn LTDC_ER();
    fn DMA2D();
    fn JPEG();
    fn GFXMMU();
    fn I3C1_WKUP();
    fn OSPI1();
    fn OSPI2();
    fn FMC();
    fn SDMMC1();
    fn SDMMC2();
    fn OTG_FS();
    fn TIM12();
    fn TIM13();
    fn TIM14();
    fn TIM15();
    fn TIM16();
    fn TIM17();
    fn LPTIM1();
    fn LPTIM2();
    fn LPTIM3();
    fn LPTIM4();
    fn LPTIM5();
    fn SPDIF_RX();
    fn MDIOS();
    fn ADF1_FLT0();
    fn CRS();
    fn UCPD1();
    fn CEC();
    fn PSSI();
    fn LPUART1();
    fn WAKEUP_PIN();
    fn GPDMA1_CH8();
    fn GPDMA1_CH9();
    fn GPDMA1_CH10();
    fn GPDMA1_CH11();
    fn GPDMA1_CH12();
    fn GPDMA1_CH13();
    fn GPDMA1_CH14();
    fn GPDMA1_CH15();
    fn HPDMA1_CH8();
    fn HPDMA1_CH9();
    fn HPDMA1_CH10();
    fn HPDMA1_CH11();
    fn HPDMA1_CH12();
    fn HPDMA1_CH13();
    fn HPDMA1_CH14();
    fn HPDMA1_CH15();
    fn GPU2D();
    fn GPU2D_ER();
    fn TCACHE();
    fn FDCAN1_IT0();
    fn FDCAN1_IT1();
    fn FDCAN2_IT0();
    fn FDCAN2_IT1();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 156] = [
    Vector { _handler: PVD_AVD },
    Vector { _reserved: 0 },
    Vector { _handler: DTS },
    Vector { _handler: IWDG },
    Vector { _handler: WWDG },
    Vector { _handler: RCC },
    Vector { _handler: LOOKUP },
    Vector {
        _handler: CACHE_ECC,
    },
    Vector { _handler: FLASH },
    Vector { _handler: ECC_FPU },
    Vector { _handler: FPU },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: TAMP },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector { _handler: EXTI5 },
    Vector { _handler: EXTI6 },
    Vector { _handler: EXTI7 },
    Vector { _handler: EXTI8 },
    Vector { _handler: EXTI9 },
    Vector { _handler: EXTI10 },
    Vector { _handler: EXTI11 },
    Vector { _handler: EXTI12 },
    Vector { _handler: EXTI13 },
    Vector { _handler: EXTI14 },
    Vector { _handler: EXTI15 },
    Vector { _handler: RTC },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: HASH },
    Vector { _handler: RNG },
    Vector { _handler: ADC1_2 },
    Vector {
        _handler: GPDMA1_CH0,
    },
    Vector {
        _handler: GPDMA1_CH1,
    },
    Vector {
        _handler: GPDMA1_CH2,
    },
    Vector {
        _handler: GPDMA1_CH3,
    },
    Vector {
        _handler: GPDMA1_CH4,
    },
    Vector {
        _handler: GPDMA1_CH5,
    },
    Vector {
        _handler: GPDMA1_CH6,
    },
    Vector {
        _handler: GPDMA1_CH7,
    },
    Vector { _handler: TIM1_BRK },
    Vector { _handler: TIM1_UP },
    Vector {
        _handler: TIM1_TRG_COM,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM4 },
    Vector { _handler: TIM5 },
    Vector { _handler: TIM6 },
    Vector { _handler: TIM7 },
    Vector { _handler: TIM9 },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: SPI3 },
    Vector { _handler: SPI4 },
    Vector { _handler: SPI5 },
    Vector { _handler: SPI6 },
    Vector {
        _handler: HPDMA1_CH0,
    },
    Vector {
        _handler: HPDMA1_CH1,
    },
    Vector {
        _handler: HPDMA1_CH2,
    },
    Vector {
        _handler: HPDMA1_CH3,
    },
    Vector {
        _handler: HPDMA1_CH4,
    },
    Vector {
        _handler: HPDMA1_CH5,
    },
    Vector {
        _handler: HPDMA1_CH6,
    },
    Vector {
        _handler: HPDMA1_CH7,
    },
    Vector { _handler: SAI1_A },
    Vector { _handler: SAI1_B },
    Vector { _handler: SAI2_A },
    Vector { _handler: SAI2_B },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ER },
    Vector { _handler: I2C3_EV },
    Vector { _handler: I2C3_ER },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector { _handler: UART4 },
    Vector { _handler: UART5 },
    Vector { _handler: UART7 },
    Vector { _handler: UART8 },
    Vector { _handler: I3C1_EV },
    Vector { _handler: I3C1_ER },
    Vector { _handler: OTG_HS },
    Vector { _handler: ETH },
    Vector { _handler: CORDIC },
    Vector { _handler: GFXTIM },
    Vector { _handler: DCMIPP },
    Vector { _handler: LTDC },
    Vector { _handler: LTDC_ER },
    Vector { _handler: DMA2D },
    Vector { _handler: JPEG },
    Vector { _handler: GFXMMU },
    Vector {
        _handler: I3C1_WKUP,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: OSPI1 },
    Vector { _handler: OSPI2 },
    Vector { _handler: FMC },
    Vector { _handler: SDMMC1 },
    Vector { _handler: SDMMC2 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: OTG_FS },
    Vector { _handler: TIM12 },
    Vector { _handler: TIM13 },
    Vector { _handler: TIM14 },
    Vector { _handler: TIM15 },
    Vector { _handler: TIM16 },
    Vector { _handler: TIM17 },
    Vector { _handler: LPTIM1 },
    Vector { _handler: LPTIM2 },
    Vector { _handler: LPTIM3 },
    Vector { _handler: LPTIM4 },
    Vector { _handler: LPTIM5 },
    Vector { _handler: SPDIF_RX },
    Vector { _handler: MDIOS },
    Vector {
        _handler: ADF1_FLT0,
    },
    Vector { _handler: CRS },
    Vector { _handler: UCPD1 },
    Vector { _handler: CEC },
    Vector { _handler: PSSI },
    Vector { _handler: LPUART1 },
    Vector {
        _handler: WAKEUP_PIN,
    },
    Vector {
        _handler: GPDMA1_CH8,
    },
    Vector {
        _handler: GPDMA1_CH9,
    },
    Vector {
        _handler: GPDMA1_CH10,
    },
    Vector {
        _handler: GPDMA1_CH11,
    },
    Vector {
        _handler: GPDMA1_CH12,
    },
    Vector {
        _handler: GPDMA1_CH13,
    },
    Vector {
        _handler: GPDMA1_CH14,
    },
    Vector {
        _handler: GPDMA1_CH15,
    },
    Vector {
        _handler: HPDMA1_CH8,
    },
    Vector {
        _handler: HPDMA1_CH9,
    },
    Vector {
        _handler: HPDMA1_CH10,
    },
    Vector {
        _handler: HPDMA1_CH11,
    },
    Vector {
        _handler: HPDMA1_CH12,
    },
    Vector {
        _handler: HPDMA1_CH13,
    },
    Vector {
        _handler: HPDMA1_CH14,
    },
    Vector {
        _handler: HPDMA1_CH15,
    },
    Vector { _handler: GPU2D },
    Vector { _handler: GPU2D_ER },
    Vector { _handler: TCACHE },
    Vector {
        _handler: FDCAN1_IT0,
    },
    Vector {
        _handler: FDCAN1_IT1,
    },
    Vector {
        _handler: FDCAN2_IT0,
    },
    Vector {
        _handler: FDCAN2_IT1,
    },
];
///Enumeration of all the interrupts.
#[cfg_attr(feature = "defmt", derive(defmt::Format))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    ///0 - PVD and AVD through the EXTI line
    PVD_AVD = 0,
    ///2 - DTS global interrupt
    DTS = 2,
    ///3 - Independent watchdog interrupt
    IWDG = 3,
    ///4 - Window Watchdog interrupt
    WWDG = 4,
    ///5 - RCC global interrupt
    RCC = 5,
    ///6 - LOOKUP/Overstack
    LOOKUP = 6,
    ///7 - Error ECC cache
    CACHE_ECC = 7,
    ///8 - Flash memory
    FLASH = 8,
    ///9 - ECC/FPU/ All flag from exec
    ECC_FPU = 9,
    ///10 - FPU safety Flag
    FPU = 10,
    ///13 - RTC tamper and timestamp interrupts through the EXTI line
    TAMP = 13,
    ///16 - EXTI Line 0 interrupt through the EXTI line
    EXTI0 = 16,
    ///17 - EXTI Line 1 interrupt through the EXTI line
    EXTI1 = 17,
    ///18 - EXTI Line 2 interrupt through the EXTI line
    EXTI2 = 18,
    ///19 - EXTI Line 3 interrupt through the EXTI line
    EXTI3 = 19,
    ///20 - EXTI Line 4 interrupt through the EXTI line
    EXTI4 = 20,
    ///21 - EXTI Line 5 interrupt through the EXTI line
    EXTI5 = 21,
    ///22 - EXTI Line 6 interrupt through the EXTI line
    EXTI6 = 22,
    ///23 - EXTI Line 7 interrupt through the EXTI line
    EXTI7 = 23,
    ///24 - EXTI Line 8 interrupt through the EXTI line
    EXTI8 = 24,
    ///25 - EXTI Line 9 interrupt through the EXTI line
    EXTI9 = 25,
    ///26 - EXTI Line 10 interrupt through the EXTI line
    EXTI10 = 26,
    ///27 - EXTI Line 11 interrupt through the EXTI line
    EXTI11 = 27,
    ///28 - EXTI Line 12 interrupt through the EXTI line
    EXTI12 = 28,
    ///29 - EXTI Line 13 interrupt through the EXTI line
    EXTI13 = 29,
    ///30 - EXTI Line 14 interrupt through the EXTI line
    EXTI14 = 30,
    ///31 - EXTI Line 15 interrupt through the EXTI line
    EXTI15 = 31,
    ///32 - RTC Wakeup and Alarm interrupt through the EXTI line
    RTC = 32,
    ///36 - HASH global interrupt
    HASH = 36,
    ///37 - RNG global interrupt
    RNG = 37,
    ///38 - ADC1/2 global interrupt
    ADC1_2 = 38,
    ///39 - GPDMA1 channel 0 interrupt
    GPDMA1_CH0 = 39,
    ///40 - GPDMA1 channel 1 interrupt
    GPDMA1_CH1 = 40,
    ///41 - GPDMA1 channel 2 interrupt
    GPDMA1_CH2 = 41,
    ///42 - GPDMA1 channel 3 interrupt
    GPDMA1_CH3 = 42,
    ///43 - GPDMA1 channel 4 interrupt
    GPDMA1_CH4 = 43,
    ///44 - GPDMA1 channel 5 interrupt
    GPDMA1_CH5 = 44,
    ///45 - GPDMA1 channel 6 interrupt
    GPDMA1_CH6 = 45,
    ///46 - GPDMA1 channel 7 interrupt
    GPDMA1_CH7 = 46,
    ///47 - TIM1 Break interrupt
    TIM1_BRK = 47,
    ///48 - TIM1 Update interrupt (tim_upd_it)
    TIM1_UP = 48,
    ///49 - TIM1 Trigger and Commutation interrupts
    TIM1_TRG_COM = 49,
    ///50 - TIM1 Capture Compare interrupt
    TIM1_CC = 50,
    ///51 - TIM2 global interrupt
    TIM2 = 51,
    ///52 - TIM3 global interrupt
    TIM3 = 52,
    ///53 - TIM4 global interrupt
    TIM4 = 53,
    ///54 - TIM5 global interrupt
    TIM5 = 54,
    ///55 - TIM6 global interrupt
    TIM6 = 55,
    ///56 - TIM7 global interrupt
    TIM7 = 56,
    ///57 - TIM9 global interrupt
    TIM9 = 57,
    ///58 - SPI1 global interrupt
    SPI1 = 58,
    ///59 - SPI2 global interrupt
    SPI2 = 59,
    ///60 - SPI3 global interrupt
    SPI3 = 60,
    ///61 - SPI4 global interrupt
    SPI4 = 61,
    ///62 - SPI5 global interrupt
    SPI5 = 62,
    ///63 - SPI6 global interrupt
    SPI6 = 63,
    ///64 - HPDMA1 channel 0 interrupt
    HPDMA1_CH0 = 64,
    ///65 - HPDMA1 channel 1 interrupt
    HPDMA1_CH1 = 65,
    ///66 - HPDMA1 channel 2 interrupt
    HPDMA1_CH2 = 66,
    ///67 - HPDMA1 channel 3 interrupt
    HPDMA1_CH3 = 67,
    ///68 - HPDMA1 channel 4 interrupt
    HPDMA1_CH4 = 68,
    ///69 - HPDMA1 channel 5 interrupt
    HPDMA1_CH5 = 69,
    ///70 - HPDMA1 channel 6 interrupt
    HPDMA1_CH6 = 70,
    ///71 - HPDMA1 channel 7 interrupt
    HPDMA1_CH7 = 71,
    ///72 - SAI1 global interrupt A
    SAI1_A = 72,
    ///73 - SAI1 global interrupt B
    SAI1_B = 73,
    ///74 - SAI2 global interrupt A
    SAI2_A = 74,
    ///75 - SAI2 global interrupt B
    SAI2_B = 75,
    ///76 - I2C1 event interrupt
    I2C1_EV = 76,
    ///77 - I2C1 error interrupt
    I2C1_ER = 77,
    ///78 - I2C2 event interrupt
    I2C2_EV = 78,
    ///79 - I2C2 error interrupt
    I2C2_ER = 79,
    ///80 - I2C3 event interrupt
    I2C3_EV = 80,
    ///81 - I2C3 error interrupt
    I2C3_ER = 81,
    ///82 - USART1 global interrupt
    USART1 = 82,
    ///83 - USART2 global interrupt
    USART2 = 83,
    ///84 - USART3 global interrupt
    USART3 = 84,
    ///85 - UART4 global interrupt
    UART4 = 85,
    ///86 - UART5 global interrupt
    UART5 = 86,
    ///87 - UART7 global interrupt
    UART7 = 87,
    ///88 - UART8 global interrupt
    UART8 = 88,
    ///89 - I3C1 event interrupt
    I3C1_EV = 89,
    ///90 - I3C1 error interrupt
    I3C1_ER = 90,
    ///91 - USB OTG HS global interrupt
    OTG_HS = 91,
    ///92 - Ethernet global interrupt
    ETH = 92,
    ///93 - CORDIC interrupt
    CORDIC = 93,
    ///94 - GFXTIM global interrupt
    GFXTIM = 94,
    ///95 - DCMIPP global interrupt
    DCMIPP = 95,
    ///96 - LCD global interrupt
    LTDC = 96,
    ///97 - LCD error interrupt
    LTDC_ER = 97,
    ///98 - DMA2D global interrupt
    DMA2D = 98,
    ///99 - JPEG global interrupt
    JPEG = 99,
    ///100 - GFXMMU global interrupt
    GFXMMU = 100,
    ///101 - I3C wakeup Interrupt through EXTI line
    I3C1_WKUP = 101,
    ///105 - OSPI1 / HSPI1 global interrupt
    OSPI1 = 105,
    ///106 - OSPI2 global interrupt
    OSPI2 = 106,
    ///107 - FMC global interrupt
    FMC = 107,
    ///108 - SDMMC1 global interrupt
    SDMMC1 = 108,
    ///109 - SDMMC2 global interrupt
    SDMMC2 = 109,
    ///112 - USB OTG FS global interrupt
    OTG_FS = 112,
    ///113 - TIM12 global interrupt
    TIM12 = 113,
    ///114 - TIM13 global interrupt
    TIM13 = 114,
    ///115 - TIM14 global interrupt
    TIM14 = 115,
    ///116 - TIM15 global interrupt
    TIM15 = 116,
    ///117 - TIM16 global interrupt
    TIM16 = 117,
    ///118 - TIM17 global interrupt
    TIM17 = 118,
    ///119 - LPTIM1 global interrupt
    LPTIM1 = 119,
    ///120 - LPTIM2 global interrupt
    LPTIM2 = 120,
    ///121 - LPTIM3 global interrupt
    LPTIM3 = 121,
    ///122 - LPTIM4 global interrupt
    LPTIM4 = 122,
    ///123 - LPTIM5 global interrupt
    LPTIM5 = 123,
    ///124 - SPDIFRX global interrupt
    SPDIF_RX = 124,
    ///125 - MDIOS global interrupt
    MDIOS = 125,
    ///126 - ADF1 filter 0 global interrupt
    ADF1_FLT0 = 126,
    ///127 - CRS global interrupt
    CRS = 127,
    ///128 - UCPD global interrupt
    UCPD1 = 128,
    ///129 - CEC global interrupt
    CEC = 129,
    ///130 - PSSI global interrupt
    PSSI = 130,
    ///131 - LPUART1 LPUART1 global interrupt
    LPUART1 = 131,
    ///132 - Interrupt for 4 wakeup pins (1, 2, 3, 4)through EXTI line
    WAKEUP_PIN = 132,
    ///133 - GPDMA1 channel 8 interrupt
    GPDMA1_CH8 = 133,
    ///134 - GPDMA1 channel 9 interrupt
    GPDMA1_CH9 = 134,
    ///135 - GPDMA1 channel 10 interrupt
    GPDMA1_CH10 = 135,
    ///136 - GPDMA1 channel 11 interrupt
    GPDMA1_CH11 = 136,
    ///137 - GPDMA1 channel 12 interrupt
    GPDMA1_CH12 = 137,
    ///138 - GPDMA1 channel 13 interrupt
    GPDMA1_CH13 = 138,
    ///139 - GPDMA1 channel 14 interrupt
    GPDMA1_CH14 = 139,
    ///140 - GPDMA1 channel 15 interrupt
    GPDMA1_CH15 = 140,
    ///141 - HPDMA1 channel 8 interrupt
    HPDMA1_CH8 = 141,
    ///142 - HPDMA1 channel 9 interrupt
    HPDMA1_CH9 = 142,
    ///143 - HPDMA1 channel 10 interrupt
    HPDMA1_CH10 = 143,
    ///144 - HPDMA1 channel 11 interrupt
    HPDMA1_CH11 = 144,
    ///145 - HPDMA1 channel 12 interrupt
    HPDMA1_CH12 = 145,
    ///146 - HPDMA1 channel 13 interrupt
    HPDMA1_CH13 = 146,
    ///147 - HPDMA1 channel 14 interrupt
    HPDMA1_CH14 = 147,
    ///148 - HPDMA1 channel 15 interrupt
    HPDMA1_CH15 = 148,
    ///149 - GPU2D global interrupt
    GPU2D = 149,
    ///150 - GPU2D error interrupt
    GPU2D_ER = 150,
    ///151 - GPU cache interrupt
    TCACHE = 151,
    ///152 - FDCAN1 Interrupt 0
    FDCAN1_IT0 = 152,
    ///153 - FDCAN1 Interrupt 1
    FDCAN1_IT1 = 153,
    ///154 - FDCAN2 Interrupt 0
    FDCAN2_IT0 = 154,
    ///155 - FDCAN2 Interrupt 1
    FDCAN2_IT1 = 155,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
///ADC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#ADC1)
pub type ADC1 = crate::Periph<adc1::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for ADC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC1").finish()
    }
}
///ADC register block
pub mod adc1;
///ADC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#ADC1)
pub type ADC2 = crate::Periph<adc1::RegisterBlock, 0x4002_2100>;
impl core::fmt::Debug for ADC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC2").finish()
    }
}
///ADC register block
pub use self::adc1 as adc2;
///master and slave ADC common
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#ADC12_common)
pub type ADC12_COMMON = crate::Periph<adc12_common::RegisterBlock, 0x4002_2300>;
impl core::fmt::Debug for ADC12_COMMON {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC12_COMMON").finish()
    }
}
///master and slave ADC common
pub mod adc12_common;
///Audio digital filter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#ADF)
pub type ADF = crate::Periph<adf::RegisterBlock, 0x4002_f000>;
impl core::fmt::Debug for ADF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADF").finish()
    }
}
///Audio digital filter
pub mod adf;
///HDMI-CEC controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#CEC)
pub type CEC = crate::Periph<cec::RegisterBlock, 0x4000_6c00>;
impl core::fmt::Debug for CEC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CEC").finish()
    }
}
///HDMI-CEC controller
pub mod cec;
///CORDIC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#CORDIC)
pub type CORDIC = crate::Periph<cordic::RegisterBlock, 0x4800_4400>;
impl core::fmt::Debug for CORDIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CORDIC").finish()
    }
}
///CORDIC register block
pub mod cordic;
///Cyclic redundancy check calculation unit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#CRC)
pub type CRC = crate::Periph<crc::RegisterBlock, 0x5802_4c00>;
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
///Cyclic redundancy check calculation unit
pub mod crc;
///Clock Recovery System
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#CRS)
pub type CRS = crate::Periph<crs::RegisterBlock, 0x4000_8400>;
impl core::fmt::Debug for CRS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRS").finish()
    }
}
///Clock Recovery System
pub mod crs;
///Microcontroller debug unit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#DBGMCU)
pub type DBGMCU = crate::Periph<dbgmcu::RegisterBlock, 0x5c00_1000>;
impl core::fmt::Debug for DBGMCU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBGMCU").finish()
    }
}
///Microcontroller debug unit
pub mod dbgmcu;
///Digital camera interface pixel pipeline
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#DCMIPP)
pub type DCMIPP = crate::Periph<dcmipp::RegisterBlock, 0x5000_2000>;
impl core::fmt::Debug for DCMIPP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCMIPP").finish()
    }
}
///Digital camera interface pixel pipeline
pub mod dcmipp;
///DLYB register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#DLYB1)
pub type DLYB1 = crate::Periph<dlyb1::RegisterBlock, 0x5200_8000>;
impl core::fmt::Debug for DLYB1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYB1").finish()
    }
}
///DLYB register block
pub mod dlyb1;
///DLYB register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#DLYB1)
pub type DLYB2 = crate::Periph<dlyb1::RegisterBlock, 0x4800_2800>;
impl core::fmt::Debug for DLYB2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYB2").finish()
    }
}
///DLYB register block
pub use self::dlyb1 as dlyb2;
///Chrom-Art Accelerator controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#DMA2D)
pub type DMA2D = crate::Periph<dma2d::RegisterBlock, 0x5200_1000>;
impl core::fmt::Debug for DMA2D {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA2D").finish()
    }
}
///Chrom-Art Accelerator controller
pub mod dma2d;
///Digital temperature sensor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#DTS)
pub type DTS = crate::Periph<dts::RegisterBlock, 0x5800_6800>;
impl core::fmt::Debug for DTS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DTS").finish()
    }
}
///Digital temperature sensor
pub mod dts;
///Ethernet register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#ETH)
pub type ETH = crate::Periph<eth::RegisterBlock, 0x4002_8000>;
impl core::fmt::Debug for ETH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ETH").finish()
    }
}
///Ethernet register block
pub mod eth;
///Extended interrupt and event controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#EXTI)
pub type EXTI = crate::Periph<exti::RegisterBlock, 0x5800_0000>;
impl core::fmt::Debug for EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI").finish()
    }
}
///Extended interrupt and event controller
pub mod exti;
///FDCAN1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#FDCAN1)
pub type FDCAN1 = crate::Periph<fdcan1::RegisterBlock, 0x4000_a000>;
impl core::fmt::Debug for FDCAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN1").finish()
    }
}
///FDCAN1
pub mod fdcan1;
///FDCAN2
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#FDCAN1)
pub type FDCAN2 = crate::Periph<fdcan1::RegisterBlock, 0x4000_a400>;
impl core::fmt::Debug for FDCAN2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN2").finish()
    }
}
///FDCAN2
pub use self::fdcan1 as fdcan2;
///Embedded Flash memory
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#FLASH)
pub type FLASH = crate::Periph<flash::RegisterBlock, 0x5200_2000>;
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
///Embedded Flash memory
pub mod flash;
///Flexible memory controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#FMC)
pub type FMC = crate::Periph<fmc::RegisterBlock, 0x5200_4000>;
impl core::fmt::Debug for FMC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FMC").finish()
    }
}
///Flexible memory controller
pub mod fmc;
///Chrom-GRC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GFXMMU)
pub type GFXMMU = crate::Periph<gfxmmu::RegisterBlock, 0x5201_0000>;
impl core::fmt::Debug for GFXMMU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GFXMMU").finish()
    }
}
///Chrom-GRC
pub mod gfxmmu;
///Graphic timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GFXTIM)
pub type GFXTIM = crate::Periph<gfxtim::RegisterBlock, 0x5000_4000>;
impl core::fmt::Debug for GFXTIM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GFXTIM").finish()
    }
}
///Graphic timer
pub mod gfxtim;
///General purpose direct memory access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GPDMA)
pub type GPDMA = crate::Periph<gpdma::RegisterBlock, 0x4002_1000>;
impl core::fmt::Debug for GPDMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA").finish()
    }
}
///General purpose direct memory access controller
pub mod gpdma;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GPIOA)
pub type GPIOA = crate::Periph<gpioa::RegisterBlock, 0x5802_0000>;
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
///General-purpose I/Os
pub mod gpioa;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GPIOC)
pub type GPIOC = crate::Periph<gpioc::RegisterBlock, 0x5802_0800>;
impl core::fmt::Debug for GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC").finish()
    }
}
///General-purpose I/Os
pub mod gpioc;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GPIOC)
pub type GPIOD = crate::Periph<gpioc::RegisterBlock, 0x5802_0c00>;
impl core::fmt::Debug for GPIOD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOD").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpiod;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GPIOC)
pub type GPIOE = crate::Periph<gpioc::RegisterBlock, 0x5802_1000>;
impl core::fmt::Debug for GPIOE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOE").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpioe;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GPIOC)
pub type GPIOF = crate::Periph<gpioc::RegisterBlock, 0x5802_1400>;
impl core::fmt::Debug for GPIOF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOF").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpiof;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GPIOC)
pub type GPIOG = crate::Periph<gpioc::RegisterBlock, 0x5802_1800>;
impl core::fmt::Debug for GPIOG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOG").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpiog;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GPIOC)
pub type GPIOH = crate::Periph<gpioc::RegisterBlock, 0x5802_1c00>;
impl core::fmt::Debug for GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOH").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpioh;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GPIOC)
pub type GPIOM = crate::Periph<gpioc::RegisterBlock, 0x5802_3000>;
impl core::fmt::Debug for GPIOM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOM").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpiom;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GPIOC)
pub type GPION = crate::Periph<gpioc::RegisterBlock, 0x5802_3400>;
impl core::fmt::Debug for GPION {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPION").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpion;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GPIOC)
pub type GPIOO = crate::Periph<gpioc::RegisterBlock, 0x5802_3800>;
impl core::fmt::Debug for GPIOO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOO").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpioo;
///GPIOP address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GPIOC)
pub type GPIOP = crate::Periph<gpioc::RegisterBlock, 0x5802_3c00>;
impl core::fmt::Debug for GPIOP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOP").finish()
    }
}
///GPIOP address block description
pub use self::gpioc as gpiop;
///Hash processor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#HASH)
pub type HASH = crate::Periph<hash::RegisterBlock, 0x4802_0400>;
impl core::fmt::Debug for HASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HASH").finish()
    }
}
///Hash processor
pub mod hash;
///High-performance direct memory access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#HPDMA)
pub type HPDMA = crate::Periph<hpdma::RegisterBlock, 0x5200_0000>;
impl core::fmt::Debug for HPDMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HPDMA").finish()
    }
}
///High-performance direct memory access controller
pub mod hpdma;
///Texture cache
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#ICACHE)
pub type ICACHE = crate::Periph<icache::RegisterBlock, 0x5201_5000>;
impl core::fmt::Debug for ICACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ICACHE").finish()
    }
}
///Texture cache
pub mod icache;
///IWDG register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#IWDG)
pub type IWDG = crate::Periph<iwdg::RegisterBlock, 0x5800_4800>;
impl core::fmt::Debug for IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG").finish()
    }
}
///IWDG register block
pub mod iwdg;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#I2C1_I3C1)
pub type I2C1_I3C1 = crate::Periph<i2c1_i3c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2C1_I3C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1_I3C1").finish()
    }
}
///Inter-integrated circuit
pub mod i2c1_i3c1;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#I2C1_I3C1)
pub type I2C2 = crate::Periph<i2c1_i3c1::RegisterBlock, 0x4000_5800>;
impl core::fmt::Debug for I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1_i3c1 as i2c2;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#I2C1_I3C1)
pub type I2C3 = crate::Periph<i2c1_i3c1::RegisterBlock, 0x4000_5c00>;
impl core::fmt::Debug for I2C3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C3").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1_i3c1 as i2c3;
///JPEG codec
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#JPEG)
pub type JPEG = crate::Periph<jpeg::RegisterBlock, 0x5200_3000>;
impl core::fmt::Debug for JPEG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("JPEG").finish()
    }
}
///JPEG codec
pub mod jpeg;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#LPTIM1)
pub type LPTIM1 = crate::Periph<lptim1::RegisterBlock, 0x4000_2400>;
impl core::fmt::Debug for LPTIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM1").finish()
    }
}
///Low power timer
pub mod lptim1;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#LPTIM1)
pub type LPTIM2 = crate::Periph<lptim1::RegisterBlock, 0x5800_2400>;
impl core::fmt::Debug for LPTIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM2").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim2;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#LPTIM1)
pub type LPTIM3 = crate::Periph<lptim1::RegisterBlock, 0x5800_2800>;
impl core::fmt::Debug for LPTIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM3").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim3;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#LPTIM4)
pub type LPTIM4 = crate::Periph<lptim4::RegisterBlock, 0x5800_2c00>;
impl core::fmt::Debug for LPTIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM4").finish()
    }
}
///Low power timer
pub mod lptim4;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#LPTIM4)
pub type LPTIM5 = crate::Periph<lptim4::RegisterBlock, 0x5800_3000>;
impl core::fmt::Debug for LPTIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM5").finish()
    }
}
///Low power timer
pub use self::lptim4 as lptim5;
///Low-power universal asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#LPUART1)
pub type LPUART1 = crate::Periph<lpuart1::RegisterBlock, 0x5800_0c00>;
impl core::fmt::Debug for LPUART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART1").finish()
    }
}
///Low-power universal asynchronous receiver transmitter
pub mod lpuart1;
///LTDC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#LTDC)
pub type LTDC = crate::Periph<ltdc::RegisterBlock, 0x5000_1000>;
impl core::fmt::Debug for LTDC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LTDC").finish()
    }
}
///LTDC register block
pub mod ltdc;
///Management data input/output
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#MDIOS)
pub type MDIOS = crate::Periph<mdios::RegisterBlock, 0x4000_9400>;
impl core::fmt::Debug for MDIOS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDIOS").finish()
    }
}
///Management data input/output
pub mod mdios;
///OTG register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#OTG_HS)
pub type OTG_HS = crate::Periph<otg_hs::RegisterBlock, 0x4004_0000>;
impl core::fmt::Debug for OTG_HS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG_HS").finish()
    }
}
///OTG register block
pub mod otg_hs;
///OTG register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#OTG_HS)
pub type OTG_FS = crate::Periph<otg_hs::RegisterBlock, 0x4008_0000>;
impl core::fmt::Debug for OTG_FS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG_FS").finish()
    }
}
///OTG register block
pub use self::otg_hs as otg_fs;
///Parallel synchronous slave interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#PSSI)
pub type PSSI = crate::Periph<pssi::RegisterBlock, 0x4800_0400>;
impl core::fmt::Debug for PSSI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PSSI").finish()
    }
}
///Parallel synchronous slave interface
pub mod pssi;
///Power control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#PWR)
pub type PWR = crate::Periph<pwr::RegisterBlock, 0x5802_4800>;
impl core::fmt::Debug for PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR").finish()
    }
}
///Power control
pub mod pwr;
///RAMs configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#RAMCFG)
pub type RAMCFG = crate::Periph<ramcfg::RegisterBlock, 0x5802_7000>;
impl core::fmt::Debug for RAMCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAMCFG").finish()
    }
}
///RAMs configuration controller
pub mod ramcfg;
///Reset and clock control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#RCC)
pub type RCC = crate::Periph<rcc::RegisterBlock, 0x5802_4400>;
impl core::fmt::Debug for RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC").finish()
    }
}
///Reset and clock control
pub mod rcc;
///True random number generator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#RNG)
pub type RNG = crate::Periph<rng::RegisterBlock, 0x4802_0000>;
impl core::fmt::Debug for RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG").finish()
    }
}
///True random number generator
pub mod rng;
///RTC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#RTC)
pub type RTC = crate::Periph<rtc::RegisterBlock, 0x5800_4000>;
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
///RTC register block
pub mod rtc;
///Serial audio interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#SAI1)
pub type SAI1 = crate::Periph<sai1::RegisterBlock, 0x4200_5c00>;
impl core::fmt::Debug for SAI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI1").finish()
    }
}
///Serial audio interface
pub mod sai1;
///Serial audio interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#SAI1)
pub type SAI2 = crate::Periph<sai1::RegisterBlock, 0x4200_5800>;
impl core::fmt::Debug for SAI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI2").finish()
    }
}
///Serial audio interface
pub use self::sai1 as sai2;
///System configuration, boot and security
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#SBS)
pub type SBS = crate::Periph<sbs::RegisterBlock, 0x5800_0400>;
impl core::fmt::Debug for SBS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SBS").finish()
    }
}
///System configuration, boot and security
pub mod sbs;
///Secure digital input/output MultiMediaCard interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#SDMMC1)
pub type SDMMC1 = crate::Periph<sdmmc1::RegisterBlock, 0x5200_7000>;
impl core::fmt::Debug for SDMMC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC1").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub mod sdmmc1;
///Secure digital input/output MultiMediaCard interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#SDMMC1)
pub type SDMMC2 = crate::Periph<sdmmc1::RegisterBlock, 0x4800_2400>;
impl core::fmt::Debug for SDMMC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC2").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub use self::sdmmc1 as sdmmc2;
///SPDIF receiver interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#SPDIFRX)
pub type SPDIFRX = crate::Periph<spdifrx::RegisterBlock, 0x4000_4000>;
impl core::fmt::Debug for SPDIFRX {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPDIFRX").finish()
    }
}
///SPDIF receiver interface
pub mod spdifrx;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#SPI1)
pub type SPI1 = crate::Periph<spi1::RegisterBlock, 0x4200_3000>;
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
///Serial peripheral interface
pub mod spi1;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#SPI1)
pub type SPI2 = crate::Periph<spi1::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi2;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#SPI1)
pub type SPI3 = crate::Periph<spi1::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi3;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#SPI1)
pub type SPI4 = crate::Periph<spi1::RegisterBlock, 0x4200_3400>;
impl core::fmt::Debug for SPI4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI4").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi4;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#SPI1)
pub type SPI5 = crate::Periph<spi1::RegisterBlock, 0x4200_5000>;
impl core::fmt::Debug for SPI5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI5").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi5;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#SPI1)
pub type SPI6 = crate::Periph<spi1::RegisterBlock, 0x5800_1400>;
impl core::fmt::Debug for SPI6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI6").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi6;
///TAMP register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TAMP)
pub type TAMP = crate::Periph<tamp::RegisterBlock, 0x5800_4400>;
impl core::fmt::Debug for TAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TAMP").finish()
    }
}
///TAMP register block
pub mod tamp;
///Advanced-control timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM1)
pub type TIM1 = crate::Periph<tim1::RegisterBlock, 0x4200_0000>;
impl core::fmt::Debug for TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1").finish()
    }
}
///Advanced-control timers
pub mod tim1;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM2)
pub type TIM2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2").finish()
    }
}
///General-purpose timers
pub mod tim2;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM2)
pub type TIM3 = crate::Periph<tim2::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3").finish()
    }
}
///General-purpose timers
pub use self::tim2 as tim3;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM2)
pub type TIM4 = crate::Periph<tim2::RegisterBlock, 0x4000_0800>;
impl core::fmt::Debug for TIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM4").finish()
    }
}
///General-purpose timers
pub use self::tim2 as tim4;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM2)
pub type TIM5 = crate::Periph<tim2::RegisterBlock, 0x4000_0c00>;
impl core::fmt::Debug for TIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM5").finish()
    }
}
///General-purpose timers
pub use self::tim2 as tim5;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM6)
pub type TIM6 = crate::Periph<tim6::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for TIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM6").finish()
    }
}
///Basic timers
pub mod tim6;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM6)
pub type TIM7 = crate::Periph<tim6::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for TIM7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM7").finish()
    }
}
///Basic timers
pub use self::tim6 as tim7;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM9)
pub type TIM9 = crate::Periph<tim9::RegisterBlock, 0x4200_4c00>;
impl core::fmt::Debug for TIM9 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM9").finish()
    }
}
///General-purpose timers
pub mod tim9;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM9)
pub type TIM12 = crate::Periph<tim9::RegisterBlock, 0x4000_1800>;
impl core::fmt::Debug for TIM12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM12").finish()
    }
}
///General-purpose timers
pub use self::tim9 as tim12;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM13)
pub type TIM13 = crate::Periph<tim13::RegisterBlock, 0x4000_1c00>;
impl core::fmt::Debug for TIM13 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM13").finish()
    }
}
///General-purpose timers
pub mod tim13;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM13)
pub type TIM14 = crate::Periph<tim13::RegisterBlock, 0x4000_2000>;
impl core::fmt::Debug for TIM14 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM14").finish()
    }
}
///General-purpose timers
pub use self::tim13 as tim14;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM15)
pub type TIM15 = crate::Periph<tim15::RegisterBlock, 0x4200_4000>;
impl core::fmt::Debug for TIM15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM15").finish()
    }
}
///General purpose timers
pub mod tim15;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM16)
pub type TIM16 = crate::Periph<tim16::RegisterBlock, 0x4200_4400>;
impl core::fmt::Debug for TIM16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM16").finish()
    }
}
///General purpose timers
pub mod tim16;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#TIM16)
pub type TIM17 = crate::Periph<tim16::RegisterBlock, 0x4200_4800>;
impl core::fmt::Debug for TIM17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM17").finish()
    }
}
///General purpose timers
pub use self::tim16 as tim17;
///USB Type-C/USB Power Delivery interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#UCPD)
pub type UCPD = crate::Periph<ucpd::RegisterBlock, 0x4000_ec00>;
impl core::fmt::Debug for UCPD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UCPD").finish()
    }
}
///USB Type-C/USB Power Delivery interface
pub mod ucpd;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#USART1)
pub type USART1 = crate::Periph<usart1::RegisterBlock, 0x4200_1000>;
impl core::fmt::Debug for USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub mod usart1;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#USART1)
pub type USART2 = crate::Periph<usart1::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as usart2;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#USART1)
pub type USART3 = crate::Periph<usart1::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for USART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART3").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as usart3;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#USART1)
pub type UART4 = crate::Periph<usart1::RegisterBlock, 0x4000_4c00>;
impl core::fmt::Debug for UART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART4").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart4;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#USART1)
pub type UART5 = crate::Periph<usart1::RegisterBlock, 0x4000_5000>;
impl core::fmt::Debug for UART5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART5").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart5;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#USART1)
pub type UART7 = crate::Periph<usart1::RegisterBlock, 0x4000_7800>;
impl core::fmt::Debug for UART7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART7").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart7;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#USART1)
pub type UART8 = crate::Periph<usart1::RegisterBlock, 0x4000_7c00>;
impl core::fmt::Debug for UART8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART8").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart8;
///Voltage reference buffer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#VREFBUF)
pub type VREFBUF = crate::Periph<vrefbuf::RegisterBlock, 0x5800_3c00>;
impl core::fmt::Debug for VREFBUF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VREFBUF").finish()
    }
}
///Voltage reference buffer
pub mod vrefbuf;
///WWDG
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#WWDG)
pub type WWDG = crate::Periph<wwdg::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG").finish()
    }
}
///WWDG
pub mod wwdg;
///XSPI register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#XSPI1)
pub type XSPI1 = crate::Periph<xspi1::RegisterBlock, 0x5200_5000>;
impl core::fmt::Debug for XSPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XSPI1").finish()
    }
}
///XSPI register block
pub mod xspi1;
///XSPI register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#XSPI1)
pub type XSPI2 = crate::Periph<xspi1::RegisterBlock, 0x5200_a000>;
impl core::fmt::Debug for XSPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XSPI2").finish()
    }
}
///XSPI register block
pub use self::xspi1 as xspi2;
///XSPIM1 register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#XSPIM1)
pub type XSPIM1 = crate::Periph<xspim1::RegisterBlock, 0x5200_b400>;
impl core::fmt::Debug for XSPIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XSPIM1").finish()
    }
}
///XSPIM1 register block
pub mod xspim1;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32H7R.html#GPIOB)
pub type GPIOB = crate::Periph<gpiob::RegisterBlock, 0x5802_0400>;
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
///General-purpose I/Os
pub mod gpiob;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
/// All the peripherals.
#[allow(non_snake_case)]
pub struct Peripherals {
    ///ADC1
    pub ADC1: ADC1,
    ///ADC2
    pub ADC2: ADC2,
    ///ADC12_common
    pub ADC12_COMMON: ADC12_COMMON,
    ///ADF
    pub ADF: ADF,
    ///CEC
    pub CEC: CEC,
    ///CORDIC
    pub CORDIC: CORDIC,
    ///CRC
    pub CRC: CRC,
    ///CRS
    pub CRS: CRS,
    ///DBGMCU
    pub DBGMCU: DBGMCU,
    ///DCMIPP
    pub DCMIPP: DCMIPP,
    ///DLYB1
    pub DLYB1: DLYB1,
    ///DLYB2
    pub DLYB2: DLYB2,
    ///DMA2D
    pub DMA2D: DMA2D,
    ///DTS
    pub DTS: DTS,
    ///ETH
    pub ETH: ETH,
    ///EXTI
    pub EXTI: EXTI,
    ///FDCAN1
    pub FDCAN1: FDCAN1,
    ///FDCAN2
    pub FDCAN2: FDCAN2,
    ///FLASH
    pub FLASH: FLASH,
    ///FMC
    pub FMC: FMC,
    ///GFXMMU
    pub GFXMMU: GFXMMU,
    ///GFXTIM
    pub GFXTIM: GFXTIM,
    ///GPDMA
    pub GPDMA: GPDMA,
    ///GPIOA
    pub GPIOA: GPIOA,
    ///GPIOC
    pub GPIOC: GPIOC,
    ///GPIOD
    pub GPIOD: GPIOD,
    ///GPIOE
    pub GPIOE: GPIOE,
    ///GPIOF
    pub GPIOF: GPIOF,
    ///GPIOG
    pub GPIOG: GPIOG,
    ///GPIOH
    pub GPIOH: GPIOH,
    ///GPIOM
    pub GPIOM: GPIOM,
    ///GPION
    pub GPION: GPION,
    ///GPIOO
    pub GPIOO: GPIOO,
    ///GPIOP
    pub GPIOP: GPIOP,
    ///HASH
    pub HASH: HASH,
    ///HPDMA
    pub HPDMA: HPDMA,
    ///ICACHE
    pub ICACHE: ICACHE,
    ///IWDG
    pub IWDG: IWDG,
    ///I2C1_I3C1
    pub I2C1_I3C1: I2C1_I3C1,
    ///I2C2
    pub I2C2: I2C2,
    ///I2C3
    pub I2C3: I2C3,
    ///JPEG
    pub JPEG: JPEG,
    ///LPTIM1
    pub LPTIM1: LPTIM1,
    ///LPTIM2
    pub LPTIM2: LPTIM2,
    ///LPTIM3
    pub LPTIM3: LPTIM3,
    ///LPTIM4
    pub LPTIM4: LPTIM4,
    ///LPTIM5
    pub LPTIM5: LPTIM5,
    ///LPUART1
    pub LPUART1: LPUART1,
    ///LTDC
    pub LTDC: LTDC,
    ///MDIOS
    pub MDIOS: MDIOS,
    ///OTG_HS
    pub OTG_HS: OTG_HS,
    ///OTG_FS
    pub OTG_FS: OTG_FS,
    ///PSSI
    pub PSSI: PSSI,
    ///PWR
    pub PWR: PWR,
    ///RAMCFG
    pub RAMCFG: RAMCFG,
    ///RCC
    pub RCC: RCC,
    ///RNG
    pub RNG: RNG,
    ///RTC
    pub RTC: RTC,
    ///SAI1
    pub SAI1: SAI1,
    ///SAI2
    pub SAI2: SAI2,
    ///SBS
    pub SBS: SBS,
    ///SDMMC1
    pub SDMMC1: SDMMC1,
    ///SDMMC2
    pub SDMMC2: SDMMC2,
    ///SPDIFRX
    pub SPDIFRX: SPDIFRX,
    ///SPI1
    pub SPI1: SPI1,
    ///SPI2
    pub SPI2: SPI2,
    ///SPI3
    pub SPI3: SPI3,
    ///SPI4
    pub SPI4: SPI4,
    ///SPI5
    pub SPI5: SPI5,
    ///SPI6
    pub SPI6: SPI6,
    ///TAMP
    pub TAMP: TAMP,
    ///TIM1
    pub TIM1: TIM1,
    ///TIM2
    pub TIM2: TIM2,
    ///TIM3
    pub TIM3: TIM3,
    ///TIM4
    pub TIM4: TIM4,
    ///TIM5
    pub TIM5: TIM5,
    ///TIM6
    pub TIM6: TIM6,
    ///TIM7
    pub TIM7: TIM7,
    ///TIM9
    pub TIM9: TIM9,
    ///TIM12
    pub TIM12: TIM12,
    ///TIM13
    pub TIM13: TIM13,
    ///TIM14
    pub TIM14: TIM14,
    ///TIM15
    pub TIM15: TIM15,
    ///TIM16
    pub TIM16: TIM16,
    ///TIM17
    pub TIM17: TIM17,
    ///UCPD
    pub UCPD: UCPD,
    ///USART1
    pub USART1: USART1,
    ///USART2
    pub USART2: USART2,
    ///USART3
    pub USART3: USART3,
    ///UART4
    pub UART4: UART4,
    ///UART5
    pub UART5: UART5,
    ///UART7
    pub UART7: UART7,
    ///UART8
    pub UART8: UART8,
    ///VREFBUF
    pub VREFBUF: VREFBUF,
    ///WWDG
    pub WWDG: WWDG,
    ///XSPI1
    pub XSPI1: XSPI1,
    ///XSPI2
    pub XSPI2: XSPI2,
    ///XSPIM1
    pub XSPIM1: XSPIM1,
    ///GPIOB
    pub GPIOB: GPIOB,
}
impl Peripherals {
    /// Returns all the peripherals *once*.
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    /// Unchecked version of `Peripherals::take`.
    ///
    /// # Safety
    ///
    /// Each of the returned peripherals must be used at most once.
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            ADC1: ADC1::steal(),
            ADC2: ADC2::steal(),
            ADC12_COMMON: ADC12_COMMON::steal(),
            ADF: ADF::steal(),
            CEC: CEC::steal(),
            CORDIC: CORDIC::steal(),
            CRC: CRC::steal(),
            CRS: CRS::steal(),
            DBGMCU: DBGMCU::steal(),
            DCMIPP: DCMIPP::steal(),
            DLYB1: DLYB1::steal(),
            DLYB2: DLYB2::steal(),
            DMA2D: DMA2D::steal(),
            DTS: DTS::steal(),
            ETH: ETH::steal(),
            EXTI: EXTI::steal(),
            FDCAN1: FDCAN1::steal(),
            FDCAN2: FDCAN2::steal(),
            FLASH: FLASH::steal(),
            FMC: FMC::steal(),
            GFXMMU: GFXMMU::steal(),
            GFXTIM: GFXTIM::steal(),
            GPDMA: GPDMA::steal(),
            GPIOA: GPIOA::steal(),
            GPIOC: GPIOC::steal(),
            GPIOD: GPIOD::steal(),
            GPIOE: GPIOE::steal(),
            GPIOF: GPIOF::steal(),
            GPIOG: GPIOG::steal(),
            GPIOH: GPIOH::steal(),
            GPIOM: GPIOM::steal(),
            GPION: GPION::steal(),
            GPIOO: GPIOO::steal(),
            GPIOP: GPIOP::steal(),
            HASH: HASH::steal(),
            HPDMA: HPDMA::steal(),
            ICACHE: ICACHE::steal(),
            IWDG: IWDG::steal(),
            I2C1_I3C1: I2C1_I3C1::steal(),
            I2C2: I2C2::steal(),
            I2C3: I2C3::steal(),
            JPEG: JPEG::steal(),
            LPTIM1: LPTIM1::steal(),
            LPTIM2: LPTIM2::steal(),
            LPTIM3: LPTIM3::steal(),
            LPTIM4: LPTIM4::steal(),
            LPTIM5: LPTIM5::steal(),
            LPUART1: LPUART1::steal(),
            LTDC: LTDC::steal(),
            MDIOS: MDIOS::steal(),
            OTG_HS: OTG_HS::steal(),
            OTG_FS: OTG_FS::steal(),
            PSSI: PSSI::steal(),
            PWR: PWR::steal(),
            RAMCFG: RAMCFG::steal(),
            RCC: RCC::steal(),
            RNG: RNG::steal(),
            RTC: RTC::steal(),
            SAI1: SAI1::steal(),
            SAI2: SAI2::steal(),
            SBS: SBS::steal(),
            SDMMC1: SDMMC1::steal(),
            SDMMC2: SDMMC2::steal(),
            SPDIFRX: SPDIFRX::steal(),
            SPI1: SPI1::steal(),
            SPI2: SPI2::steal(),
            SPI3: SPI3::steal(),
            SPI4: SPI4::steal(),
            SPI5: SPI5::steal(),
            SPI6: SPI6::steal(),
            TAMP: TAMP::steal(),
            TIM1: TIM1::steal(),
            TIM2: TIM2::steal(),
            TIM3: TIM3::steal(),
            TIM4: TIM4::steal(),
            TIM5: TIM5::steal(),
            TIM6: TIM6::steal(),
            TIM7: TIM7::steal(),
            TIM9: TIM9::steal(),
            TIM12: TIM12::steal(),
            TIM13: TIM13::steal(),
            TIM14: TIM14::steal(),
            TIM15: TIM15::steal(),
            TIM16: TIM16::steal(),
            TIM17: TIM17::steal(),
            UCPD: UCPD::steal(),
            USART1: USART1::steal(),
            USART2: USART2::steal(),
            USART3: USART3::steal(),
            UART4: UART4::steal(),
            UART5: UART5::steal(),
            UART7: UART7::steal(),
            UART8: UART8::steal(),
            VREFBUF: VREFBUF::steal(),
            WWDG: WWDG::steal(),
            XSPI1: XSPI1::steal(),
            XSPI2: XSPI2::steal(),
            XSPIM1: XSPIM1::steal(),
            GPIOB: GPIOB::steal(),
        }
    }
}
