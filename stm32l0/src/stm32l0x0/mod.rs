/*!Peripheral access API for STM32L0X0 microcontrollers (generated using svd2rust v0.36.1 (4052ce6 2025-04-04))

You can find an overview of the generated API [here].

API features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.

[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api
[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased
[repository]: https://github.com/rust-embedded/svd2rust*/
///Number available in the NVIC for configuring priority
pub const NVIC_PRIO_BITS: u8 = 2;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn RTC();
    fn FLASH();
    fn RCC();
    fn EXTI0_1();
    fn EXTI2_3();
    fn EXTI4_15();
    fn DMA1_CHANNEL1();
    fn DMA1_CHANNEL2_3();
    fn DMA1_CHANNEL4_7();
    fn ADC();
    fn LPTIM1();
    fn TIM2();
    fn TIM21();
    fn TIM22();
    fn I2C1();
    fn SPI1();
    fn USART2();
    fn LPUART1();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 30] = [
    Vector { _handler: WWDG },
    Vector { _reserved: 0 },
    Vector { _handler: RTC },
    Vector { _handler: FLASH },
    Vector { _handler: RCC },
    Vector { _handler: EXTI0_1 },
    Vector { _handler: EXTI2_3 },
    Vector { _handler: EXTI4_15 },
    Vector { _reserved: 0 },
    Vector {
        _handler: DMA1_CHANNEL1,
    },
    Vector {
        _handler: DMA1_CHANNEL2_3,
    },
    Vector {
        _handler: DMA1_CHANNEL4_7,
    },
    Vector { _handler: ADC },
    Vector { _handler: LPTIM1 },
    Vector { _reserved: 0 },
    Vector { _handler: TIM2 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: TIM21 },
    Vector { _reserved: 0 },
    Vector { _handler: TIM22 },
    Vector { _handler: I2C1 },
    Vector { _reserved: 0 },
    Vector { _handler: SPI1 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: USART2 },
    Vector { _handler: LPUART1 },
];
///Enumeration of all the interrupts.
#[cfg_attr(feature = "defmt", derive(defmt::Format))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    ///0 - Window Watchdog interrupt
    WWDG = 0,
    ///2 - RTC global interrupt
    RTC = 2,
    ///3 - Flash global interrupt
    FLASH = 3,
    ///4 - RCC global interrupt
    RCC = 4,
    ///5 - EXTI Line\[1:0\] interrupts
    EXTI0_1 = 5,
    ///6 - EXTI Line\[3:2\] interrupts
    EXTI2_3 = 6,
    ///7 - EXTI Line15 and EXTI4 interrupts
    EXTI4_15 = 7,
    ///9 - DMA1 Channel1 global interrupt
    DMA1_CHANNEL1 = 9,
    ///10 - DMA1 Channel2 and 3 interrupts
    DMA1_CHANNEL2_3 = 10,
    ///11 - DMA1 Channel4 to 7 interrupts
    DMA1_CHANNEL4_7 = 11,
    ///12 - ADC
    ADC = 12,
    ///13 - LPTIMER1 interrupt through EXTI29
    LPTIM1 = 13,
    ///15 - TIM2 global interrupt
    TIM2 = 15,
    ///20 - TIMER21 global interrupt
    TIM21 = 20,
    ///22 - TIMER22 global interrupt
    TIM22 = 22,
    ///23 - I2C1 global interrupt
    I2C1 = 23,
    ///25 - SPI1_global_interrupt
    SPI1 = 25,
    ///28 - USART2 global interrupt
    USART2 = 28,
    ///29 - LPUART1 global interrupt through
    LPUART1 = 29,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
///Direct memory access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#DMA1)
pub type DMA1 = crate::Periph<dma1::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for DMA1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA1").finish()
    }
}
///Direct memory access controller
pub mod dma1;
///Cyclic redundancy check calculation unit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#CRC)
pub type CRC = crate::Periph<crc::RegisterBlock, 0x4002_3000>;
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
///Cyclic redundancy check calculation unit
pub mod crc;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#GPIOA)
pub type GPIOA = crate::Periph<gpioa::RegisterBlock, 0x5000_0000>;
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
///General-purpose I/Os
pub mod gpioa;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#GPIOB)
pub type GPIOB = crate::Periph<gpiob::RegisterBlock, 0x5000_0400>;
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
///General-purpose I/Os
pub mod gpiob;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#GPIOB)
pub type GPIOC = crate::Periph<gpiob::RegisterBlock, 0x5000_0800>;
impl core::fmt::Debug for GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC").finish()
    }
}
///General-purpose I/Os
pub use self::gpiob as gpioc;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#GPIOB)
pub type GPIOD = crate::Periph<gpiob::RegisterBlock, 0x5000_0c00>;
impl core::fmt::Debug for GPIOD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOD").finish()
    }
}
///General-purpose I/Os
pub use self::gpiob as gpiod;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#GPIOB)
pub type GPIOH = crate::Periph<gpiob::RegisterBlock, 0x5000_1c00>;
impl core::fmt::Debug for GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOH").finish()
    }
}
///General-purpose I/Os
pub use self::gpiob as gpioh;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#GPIOB)
pub type GPIOE = crate::Periph<gpiob::RegisterBlock, 0x5000_1000>;
impl core::fmt::Debug for GPIOE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOE").finish()
    }
}
///General-purpose I/Os
pub use self::gpiob as gpioe;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#LPTIM)
pub type LPTIM = crate::Periph<lptim::RegisterBlock, 0x4000_7c00>;
impl core::fmt::Debug for LPTIM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM").finish()
    }
}
///Low power timer
pub mod lptim;
///Real-time clock
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#RTC)
pub type RTC = crate::Periph<rtc::RegisterBlock, 0x4000_2800>;
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
///Real-time clock
pub mod rtc;
///Universal synchronous asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#USART2)
pub type USART2 = crate::Periph<usart2::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2").finish()
    }
}
///Universal synchronous asynchronous receiver transmitter
pub mod usart2;
///Independent watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#IWDG)
pub type IWDG = crate::Periph<iwdg::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG").finish()
    }
}
///Independent watchdog
pub mod iwdg;
///System window watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#WWDG)
pub type WWDG = crate::Periph<wwdg::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG").finish()
    }
}
///System window watchdog
pub mod wwdg;
///Firewall
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#FW)
pub type FW = crate::Periph<fw::RegisterBlock, 0x4001_1c00>;
impl core::fmt::Debug for FW {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FW").finish()
    }
}
///Firewall
pub mod fw;
///Reset and clock control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#RCC)
pub type RCC = crate::Periph<rcc::RegisterBlock, 0x4002_1000>;
impl core::fmt::Debug for RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC").finish()
    }
}
///Reset and clock control
pub mod rcc;
///System configuration controller register
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#SYSCFG)
pub type SYSCFG = crate::Periph<syscfg::RegisterBlock, 0x4001_0000>;
impl core::fmt::Debug for SYSCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCFG").finish()
    }
}
///System configuration controller register
pub mod syscfg;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#SPI1)
pub type SPI1 = crate::Periph<spi1::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
///Serial peripheral interface
pub mod spi1;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#I2C1)
pub type I2C1 = crate::Periph<i2c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
///Inter-integrated circuit
pub mod i2c1;
///Power control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#PWR)
pub type PWR = crate::Periph<pwr::RegisterBlock, 0x4000_7000>;
impl core::fmt::Debug for PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR").finish()
    }
}
///Power control
pub mod pwr;
///Flash
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#FLASH)
pub type FLASH = crate::Periph<flash::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
///Flash
pub mod flash;
///External interrupt/event controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#EXTI)
pub type EXTI = crate::Periph<exti::RegisterBlock, 0x4001_0400>;
impl core::fmt::Debug for EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI").finish()
    }
}
///External interrupt/event controller
pub mod exti;
///Analog-to-digital converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#ADC)
pub type ADC = crate::Periph<adc::RegisterBlock, 0x4001_2400>;
impl core::fmt::Debug for ADC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC").finish()
    }
}
///Analog-to-digital converter
pub mod adc;
///Debug support
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#DBG)
pub type DBG = crate::Periph<dbg::RegisterBlock, 0x4001_5800>;
impl core::fmt::Debug for DBG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBG").finish()
    }
}
///Debug support
pub mod dbg;
///General-purpose-timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#TIM2)
pub type TIM2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2").finish()
    }
}
///General-purpose-timers
pub mod tim2;
///General-purpose-timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#TIM21)
pub type TIM21 = crate::Periph<tim21::RegisterBlock, 0x4001_0800>;
impl core::fmt::Debug for TIM21 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM21").finish()
    }
}
///General-purpose-timers
pub mod tim21;
///General-purpose-timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#TIM22)
pub type TIM22 = crate::Periph<tim22::RegisterBlock, 0x4001_1400>;
impl core::fmt::Debug for TIM22 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM22").finish()
    }
}
///General-purpose-timers
pub mod tim22;
///Lower power Universal asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32L0x0.html#LPUART1)
pub type LPUART1 = crate::Periph<lpuart1::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for LPUART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART1").finish()
    }
}
///Lower power Universal asynchronous receiver transmitter
pub mod lpuart1;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
/// All the peripherals.
#[allow(non_snake_case)]
pub struct Peripherals {
    ///DMA1
    pub DMA1: DMA1,
    ///CRC
    pub CRC: CRC,
    ///GPIOA
    pub GPIOA: GPIOA,
    ///GPIOB
    pub GPIOB: GPIOB,
    ///GPIOC
    pub GPIOC: GPIOC,
    ///GPIOD
    pub GPIOD: GPIOD,
    ///GPIOH
    pub GPIOH: GPIOH,
    ///GPIOE
    pub GPIOE: GPIOE,
    ///LPTIM
    pub LPTIM: LPTIM,
    ///RTC
    pub RTC: RTC,
    ///USART2
    pub USART2: USART2,
    ///IWDG
    pub IWDG: IWDG,
    ///WWDG
    pub WWDG: WWDG,
    ///FW
    pub FW: FW,
    ///RCC
    pub RCC: RCC,
    ///SYSCFG
    pub SYSCFG: SYSCFG,
    ///SPI1
    pub SPI1: SPI1,
    ///I2C1
    pub I2C1: I2C1,
    ///PWR
    pub PWR: PWR,
    ///FLASH
    pub FLASH: FLASH,
    ///EXTI
    pub EXTI: EXTI,
    ///ADC
    pub ADC: ADC,
    ///DBG
    pub DBG: DBG,
    ///TIM2
    pub TIM2: TIM2,
    ///TIM21
    pub TIM21: TIM21,
    ///TIM22
    pub TIM22: TIM22,
    ///LPUART1
    pub LPUART1: LPUART1,
}
impl Peripherals {
    /// Returns all the peripherals *once*.
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    /// Unchecked version of `Peripherals::take`.
    ///
    /// # Safety
    ///
    /// Each of the returned peripherals must be used at most once.
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            DMA1: DMA1::steal(),
            CRC: CRC::steal(),
            GPIOA: GPIOA::steal(),
            GPIOB: GPIOB::steal(),
            GPIOC: GPIOC::steal(),
            GPIOD: GPIOD::steal(),
            GPIOH: GPIOH::steal(),
            GPIOE: GPIOE::steal(),
            LPTIM: LPTIM::steal(),
            RTC: RTC::steal(),
            USART2: USART2::steal(),
            IWDG: IWDG::steal(),
            WWDG: WWDG::steal(),
            FW: FW::steal(),
            RCC: RCC::steal(),
            SYSCFG: SYSCFG::steal(),
            SPI1: SPI1::steal(),
            I2C1: I2C1::steal(),
            PWR: PWR::steal(),
            FLASH: FLASH::steal(),
            EXTI: EXTI::steal(),
            ADC: ADC::steal(),
            DBG: DBG::steal(),
            TIM2: TIM2::steal(),
            TIM21: TIM21::steal(),
            TIM22: TIM22::steal(),
            LPUART1: LPUART1::steal(),
        }
    }
}
