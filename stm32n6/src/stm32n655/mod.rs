/*!Peripheral access API for STM32N655 microcontrollers (generated using svd2rust v0.36.1 (4052ce6 2025-04-04))

You can find an overview of the generated API [here].

API features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.

[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api
[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased
[repository]: https://github.com/rust-embedded/svd2rust*/
///Number available in the NVIC for configuring priority
pub const NVIC_PRIO_BITS: u8 = 8;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn PVD_PVM();
    fn DTS();
    fn RCC();
    fn LOCKUP();
    fn CACHE_ECC();
    fn TCM_ECC();
    fn BCK_ECC();
    fn FPU();
    fn RTC_S();
    fn TAMP();
    fn RIFSC_TAMPER();
    fn IAC();
    fn RCC_S();
    fn RTC();
    fn WDGLS_EARLY();
    fn WWDG_EARLY();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn EXTI5();
    fn EXTI6();
    fn EXTI7();
    fn EXTI8();
    fn EXTI9();
    fn EXTI10();
    fn EXTI11();
    fn EXTI12();
    fn EXTI13();
    fn EXTI14();
    fn EXTI15();
    fn SAES();
    fn CRYP();
    fn PKA();
    fn HASH();
    fn RNG();
    fn MCE1();
    fn MCE2();
    fn MCE3();
    fn MCE4();
    fn ADC12();
    fn CSI_DBG();
    fn DCMIPP();
    fn PAHB_ERR();
    fn NPU_END_OF_EPOCH();
    fn NPU1();
    fn NPU2();
    fn NPU3();
    fn NPUCACHE();
    fn LTDC_LO();
    fn LTDC_LO_ERR();
    fn DMA2D();
    fn JPEG();
    fn VENC();
    fn GFXMMU();
    fn GFXTIM();
    fn GPU2D();
    fn GPU2D_ERROR();
    fn GPU_CACHE();
    fn HPDMA1_CH0();
    fn HPDMA1_CH1();
    fn HPDMA1_CH2();
    fn HPDMA1_CH3();
    fn HPDMA1_CH4();
    fn HPDMA1_CH5();
    fn HPDMA1_CH6();
    fn HPDMA1_CH7();
    fn HPDMA1_CH8();
    fn HPDMA1_CH9();
    fn HPDMA1_CH10();
    fn HPDMA1_CH11();
    fn HPDMA1_CH12();
    fn HPDMA1_CH13();
    fn HPDMA1_CH14();
    fn HPDMA1_CH15();
    fn GPDMA1_CH0();
    fn GPDMA1_CH1();
    fn GPDMA1_CH2();
    fn GPDMA1_CH3();
    fn GPDMA1_CH4();
    fn GPDMA1_CH5();
    fn GPDMA1_CH6();
    fn GPDMA1_CH7();
    fn GPDMA1_CH8();
    fn GPDMA1_CH9();
    fn GPDMA1_CH10();
    fn GPDMA1_CH11();
    fn GPDMA1_CH12();
    fn GPDMA1_CH13();
    fn GPDMA1_CH14();
    fn GPDMA1_CH15();
    fn I2C1_EV();
    fn I2C1_ER();
    fn I2C2_EV();
    fn I2C2_ER();
    fn I2C3_EV();
    fn I2C3_ER();
    fn I2C4_EV();
    fn I2C4_ER();
    fn I3C1_EV();
    fn I3C1_ER();
    fn I3C2_EV();
    fn I3C2_ER();
    fn TIM1_BRK();
    fn TIM1_UP();
    fn TIM1_TRG_CCU();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn TIM4();
    fn TIM5();
    fn TIM6();
    fn TIM7();
    fn TIM8_BRK();
    fn TIM8_UP();
    fn TIM8_TRG_CCU();
    fn TIM8_CC();
    fn TIM9();
    fn TIM10();
    fn TIM11();
    fn TIM12();
    fn TIM13();
    fn TIM14();
    fn TIM15();
    fn TIM16();
    fn TIM17();
    fn TIM18();
    fn LPTIM1();
    fn LPTIM2();
    fn LPTIM3();
    fn LPTIM4();
    fn LPTIM5();
    fn ADF1_FLT0();
    fn MDF1_FLT0();
    fn MDF1_FLT1();
    fn MDF1_FLT2();
    fn MDF1_FLT3();
    fn MDF1_FLT4();
    fn MDF1_FLT5();
    fn SAI1_A();
    fn SAI1_B();
    fn SAI2_A();
    fn SAI2_B();
    fn SPDIFRX();
    fn SPI1();
    fn SPI2();
    fn SPI3();
    fn SPI4();
    fn SPI5();
    fn SPI6();
    fn USART1();
    fn USART2();
    fn USART3();
    fn UART4();
    fn UART5();
    fn USART6();
    fn UART7();
    fn UART8();
    fn UART9();
    fn USART10();
    fn LPUART1();
    fn XSPI1();
    fn XSPI2();
    fn XSPI3();
    fn FMC();
    fn SDMMC1();
    fn SDMMC2();
    fn UCPD();
    fn OTG1();
    fn OTG2();
    fn ETH1();
    fn FDCAN1_IT0();
    fn FDCAN1_IT1();
    fn FDCAN2_IT0();
    fn FDCAN2_IT1();
    fn FDCAN3_IT0();
    fn FDCAN3_IT1();
    fn FDCAN_CU();
    fn MDIOS();
    fn DCMI_PSSI();
    fn WAKEUP_PIN();
    fn CTI0();
    fn CTI1();
    fn LTDC_UP();
    fn LTDC_UP_ERR();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 195] = [
    Vector { _handler: PVD_PVM },
    Vector { _reserved: 0 },
    Vector { _handler: DTS },
    Vector { _handler: RCC },
    Vector { _handler: LOCKUP },
    Vector {
        _handler: CACHE_ECC,
    },
    Vector { _handler: TCM_ECC },
    Vector { _handler: BCK_ECC },
    Vector { _handler: FPU },
    Vector { _reserved: 0 },
    Vector { _handler: RTC_S },
    Vector { _handler: TAMP },
    Vector {
        _handler: RIFSC_TAMPER,
    },
    Vector { _handler: IAC },
    Vector { _handler: RCC_S },
    Vector { _reserved: 0 },
    Vector { _handler: RTC },
    Vector { _reserved: 0 },
    Vector {
        _handler: WDGLS_EARLY,
    },
    Vector {
        _handler: WWDG_EARLY,
    },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector { _handler: EXTI5 },
    Vector { _handler: EXTI6 },
    Vector { _handler: EXTI7 },
    Vector { _handler: EXTI8 },
    Vector { _handler: EXTI9 },
    Vector { _handler: EXTI10 },
    Vector { _handler: EXTI11 },
    Vector { _handler: EXTI12 },
    Vector { _handler: EXTI13 },
    Vector { _handler: EXTI14 },
    Vector { _handler: EXTI15 },
    Vector { _handler: SAES },
    Vector { _handler: CRYP },
    Vector { _handler: PKA },
    Vector { _handler: HASH },
    Vector { _handler: RNG },
    Vector { _reserved: 0 },
    Vector { _handler: MCE1 },
    Vector { _handler: MCE2 },
    Vector { _handler: MCE3 },
    Vector { _handler: MCE4 },
    Vector { _handler: ADC12 },
    Vector { _handler: CSI_DBG },
    Vector { _handler: DCMIPP },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: PAHB_ERR },
    Vector {
        _handler: NPU_END_OF_EPOCH,
    },
    Vector { _handler: NPU1 },
    Vector { _handler: NPU2 },
    Vector { _handler: NPU3 },
    Vector { _handler: NPUCACHE },
    Vector { _handler: LTDC_LO },
    Vector {
        _handler: LTDC_LO_ERR,
    },
    Vector { _handler: DMA2D },
    Vector { _handler: JPEG },
    Vector { _handler: VENC },
    Vector { _handler: GFXMMU },
    Vector { _handler: GFXTIM },
    Vector { _handler: GPU2D },
    Vector {
        _handler: GPU2D_ERROR,
    },
    Vector {
        _handler: GPU_CACHE,
    },
    Vector {
        _handler: HPDMA1_CH0,
    },
    Vector {
        _handler: HPDMA1_CH1,
    },
    Vector {
        _handler: HPDMA1_CH2,
    },
    Vector {
        _handler: HPDMA1_CH3,
    },
    Vector {
        _handler: HPDMA1_CH4,
    },
    Vector {
        _handler: HPDMA1_CH5,
    },
    Vector {
        _handler: HPDMA1_CH6,
    },
    Vector {
        _handler: HPDMA1_CH7,
    },
    Vector {
        _handler: HPDMA1_CH8,
    },
    Vector {
        _handler: HPDMA1_CH9,
    },
    Vector {
        _handler: HPDMA1_CH10,
    },
    Vector {
        _handler: HPDMA1_CH11,
    },
    Vector {
        _handler: HPDMA1_CH12,
    },
    Vector {
        _handler: HPDMA1_CH13,
    },
    Vector {
        _handler: HPDMA1_CH14,
    },
    Vector {
        _handler: HPDMA1_CH15,
    },
    Vector {
        _handler: GPDMA1_CH0,
    },
    Vector {
        _handler: GPDMA1_CH1,
    },
    Vector {
        _handler: GPDMA1_CH2,
    },
    Vector {
        _handler: GPDMA1_CH3,
    },
    Vector {
        _handler: GPDMA1_CH4,
    },
    Vector {
        _handler: GPDMA1_CH5,
    },
    Vector {
        _handler: GPDMA1_CH6,
    },
    Vector {
        _handler: GPDMA1_CH7,
    },
    Vector {
        _handler: GPDMA1_CH8,
    },
    Vector {
        _handler: GPDMA1_CH9,
    },
    Vector {
        _handler: GPDMA1_CH10,
    },
    Vector {
        _handler: GPDMA1_CH11,
    },
    Vector {
        _handler: GPDMA1_CH12,
    },
    Vector {
        _handler: GPDMA1_CH13,
    },
    Vector {
        _handler: GPDMA1_CH14,
    },
    Vector {
        _handler: GPDMA1_CH15,
    },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: I2C2_EV },
    Vector { _handler: I2C2_ER },
    Vector { _handler: I2C3_EV },
    Vector { _handler: I2C3_ER },
    Vector { _handler: I2C4_EV },
    Vector { _handler: I2C4_ER },
    Vector { _handler: I3C1_EV },
    Vector { _handler: I3C1_ER },
    Vector { _handler: I3C2_EV },
    Vector { _handler: I3C2_ER },
    Vector { _handler: TIM1_BRK },
    Vector { _handler: TIM1_UP },
    Vector {
        _handler: TIM1_TRG_CCU,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: TIM4 },
    Vector { _handler: TIM5 },
    Vector { _handler: TIM6 },
    Vector { _handler: TIM7 },
    Vector { _handler: TIM8_BRK },
    Vector { _handler: TIM8_UP },
    Vector {
        _handler: TIM8_TRG_CCU,
    },
    Vector { _handler: TIM8_CC },
    Vector { _handler: TIM9 },
    Vector { _handler: TIM10 },
    Vector { _handler: TIM11 },
    Vector { _handler: TIM12 },
    Vector { _handler: TIM13 },
    Vector { _handler: TIM14 },
    Vector { _handler: TIM15 },
    Vector { _handler: TIM16 },
    Vector { _handler: TIM17 },
    Vector { _handler: TIM18 },
    Vector { _handler: LPTIM1 },
    Vector { _handler: LPTIM2 },
    Vector { _handler: LPTIM3 },
    Vector { _handler: LPTIM4 },
    Vector { _handler: LPTIM5 },
    Vector {
        _handler: ADF1_FLT0,
    },
    Vector {
        _handler: MDF1_FLT0,
    },
    Vector {
        _handler: MDF1_FLT1,
    },
    Vector {
        _handler: MDF1_FLT2,
    },
    Vector {
        _handler: MDF1_FLT3,
    },
    Vector {
        _handler: MDF1_FLT4,
    },
    Vector {
        _handler: MDF1_FLT5,
    },
    Vector { _handler: SAI1_A },
    Vector { _handler: SAI1_B },
    Vector { _handler: SAI2_A },
    Vector { _handler: SAI2_B },
    Vector { _handler: SPDIFRX },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: SPI3 },
    Vector { _handler: SPI4 },
    Vector { _handler: SPI5 },
    Vector { _handler: SPI6 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector { _handler: UART4 },
    Vector { _handler: UART5 },
    Vector { _handler: USART6 },
    Vector { _handler: UART7 },
    Vector { _handler: UART8 },
    Vector { _handler: UART9 },
    Vector { _handler: USART10 },
    Vector { _handler: LPUART1 },
    Vector { _handler: XSPI1 },
    Vector { _handler: XSPI2 },
    Vector { _handler: XSPI3 },
    Vector { _handler: FMC },
    Vector { _handler: SDMMC1 },
    Vector { _handler: SDMMC2 },
    Vector { _handler: UCPD },
    Vector { _handler: OTG1 },
    Vector { _handler: OTG2 },
    Vector { _handler: ETH1 },
    Vector {
        _handler: FDCAN1_IT0,
    },
    Vector {
        _handler: FDCAN1_IT1,
    },
    Vector {
        _handler: FDCAN2_IT0,
    },
    Vector {
        _handler: FDCAN2_IT1,
    },
    Vector {
        _handler: FDCAN3_IT0,
    },
    Vector {
        _handler: FDCAN3_IT1,
    },
    Vector { _handler: FDCAN_CU },
    Vector { _handler: MDIOS },
    Vector {
        _handler: DCMI_PSSI,
    },
    Vector {
        _handler: WAKEUP_PIN,
    },
    Vector { _handler: CTI0 },
    Vector { _handler: CTI1 },
    Vector { _reserved: 0 },
    Vector { _handler: LTDC_UP },
    Vector {
        _handler: LTDC_UP_ERR,
    },
];
///Enumeration of all the interrupts.
#[cfg_attr(feature = "defmt", derive(defmt::Format))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    ///0 - PVDOUT through the EXTI line
    PVD_PVM = 0,
    ///2 - Thermal sensor interruption
    DTS = 2,
    ///3 - RCC global interrupt
    RCC = 3,
    ///4 - LOCKUP - no overstack in Cortex-M55
    LOCKUP = 4,
    ///5 - Cache ECC error
    CACHE_ECC = 5,
    ///6 - TCM ECC error
    TCM_ECC = 6,
    ///7 - Backup RAM interrupts (SEC and DED)
    BCK_ECC = 7,
    ///8 - FPU safety flag
    FPU = 8,
    ///10 - RTC secure interrupt
    RTC_S = 10,
    ///11 - TAMP secure and non-secure synchronous interrupt line
    TAMP = 11,
    ///12 - RIF can generate an interrupt when a laser attack is detected
    RIFSC_TAMPER = 12,
    ///13 - IAC global interrupt
    IAC = 13,
    ///14 - RCC global secure interrupt
    RCC_S = 14,
    ///16 - RTC interrupt
    RTC = 16,
    ///18 - Independent watchdog interrupt
    WDGLS_EARLY = 18,
    ///19 - Window watchdog interrupt
    WWDG_EARLY = 19,
    ///20 - EXTI Line 0 interrupt through the EXTI line
    EXTI0 = 20,
    ///21 - EXTI Line 1 interrupt through the EXTI line
    EXTI1 = 21,
    ///22 - EXTI Line 2 interrupt through the EXTI line
    EXTI2 = 22,
    ///23 - EXTI Line 3 interrupt through the EXTI line
    EXTI3 = 23,
    ///24 - EXTI Line 4 interrupt through the EXTI line
    EXTI4 = 24,
    ///25 - EXTI Line 5 interrupt through the EXTI line
    EXTI5 = 25,
    ///26 - EXTI Line 6 interrupt through the EXTI line
    EXTI6 = 26,
    ///27 - EXTI Line 7 interrupt through the EXTI line
    EXTI7 = 27,
    ///28 - EXTI Line 8 interrupt through the EXTI line
    EXTI8 = 28,
    ///29 - EXTI Line 9 interrupt
    EXTI9 = 29,
    ///30 - EXTI Line 10 interrupt
    EXTI10 = 30,
    ///31 - EXTI Line 11 interrupt
    EXTI11 = 31,
    ///32 - EXTI Line 12 interrupt
    EXTI12 = 32,
    ///33 - EXTI Line 13 interrupt
    EXTI13 = 33,
    ///34 - EXTI Line 14 interrupt
    EXTI14 = 34,
    ///35 - EXTI Line 15 interrupt
    EXTI15 = 35,
    ///36 - SAES global interrupt
    SAES = 36,
    ///37 - CRYP global interrupt
    CRYP = 37,
    ///38 - PKA global interrupt
    PKA = 38,
    ///39 - HASH global interrupt
    HASH = 39,
    ///40 - RNG global interrupt
    RNG = 40,
    ///42 - MCE1 global interrupt
    MCE1 = 42,
    ///43 - MCE2 global interrupt
    MCE2 = 43,
    ///44 - MCE3 global interrupt
    MCE3 = 44,
    ///45 - MCE4 global interrupt
    MCE4 = 45,
    ///46 - ADC1/ADC2 global interrupt
    ADC12 = 46,
    ///47 - CSI global interrupt
    CSI_DBG = 47,
    ///48 - DCMIPP global interrupt
    DCMIPP = 48,
    ///52 - Write posting errors on Cortex-M55 PAHB interface
    PAHB_ERR = 52,
    ///53 - NPU mst_ints\[0\] line
    NPU_END_OF_EPOCH = 53,
    ///54 - NPU mst_ints\[1\] line
    NPU1 = 54,
    ///55 - NPU mst_ints\[2\] line
    NPU2 = 55,
    ///56 - NPU mst_ints\[3\] line
    NPU3 = 56,
    ///57 - ATON interrupt cache
    NPUCACHE = 57,
    ///58 - LCD low-layer global interrupt
    LTDC_LO = 58,
    ///59 - LCD low-layer error interrupt
    LTDC_LO_ERR = 59,
    ///60 - DMA2D global interrupt
    DMA2D = 60,
    ///61 - JPEG global interrupt
    JPEG = 61,
    ///62 - VENC global interrupt
    VENC = 62,
    ///63 - GFXMMU global interrupt
    GFXMMU = 63,
    ///64 - GFXTIM global interrupt
    GFXTIM = 64,
    ///65 - GPU2D global interrupt
    GPU2D = 65,
    ///66 - GPU2D global interrupt
    GPU2D_ERROR = 66,
    ///67 - GPU cache interrupt
    GPU_CACHE = 67,
    ///68 - HPDMA1 Channel 0 interrupt
    HPDMA1_CH0 = 68,
    ///69 - HPDMA1 Channel 1 interrupt
    HPDMA1_CH1 = 69,
    ///70 - HPDMA1 Channel 2 interrupt
    HPDMA1_CH2 = 70,
    ///71 - HPDMA1 Channel 3 interrupt
    HPDMA1_CH3 = 71,
    ///72 - HPDMA1 Channel 4 interrupt
    HPDMA1_CH4 = 72,
    ///73 - HPDMA1 Channel 5 interrupt
    HPDMA1_CH5 = 73,
    ///74 - HPDMA1 Channel 6 interrupt
    HPDMA1_CH6 = 74,
    ///75 - HPDMA1 Channel 7 interrupt
    HPDMA1_CH7 = 75,
    ///76 - HPDMA1 Channel 8 interrupt
    HPDMA1_CH8 = 76,
    ///77 - HPDMA1 Channel 9 interrupt
    HPDMA1_CH9 = 77,
    ///78 - HPDMA1 Channel 10 interrupt
    HPDMA1_CH10 = 78,
    ///79 - HPDMA1 Channel 11 interrupt
    HPDMA1_CH11 = 79,
    ///80 - HPDMA1 Channel 12 interrupt
    HPDMA1_CH12 = 80,
    ///81 - HPDMA1 Channel 13 interrupt
    HPDMA1_CH13 = 81,
    ///82 - HPDMA1 Channel 14 interrupt
    HPDMA1_CH14 = 82,
    ///83 - HPDMA1 Channel 15 interrupt
    HPDMA1_CH15 = 83,
    ///84 - GPDMA1 channel 0 interrupt
    GPDMA1_CH0 = 84,
    ///85 - GPDMA1 channel 1 interrupt
    GPDMA1_CH1 = 85,
    ///86 - GPDMA1 channel 2 interrupt
    GPDMA1_CH2 = 86,
    ///87 - GPDMA1 channel 3 interrupt
    GPDMA1_CH3 = 87,
    ///88 - GPDMA1 channel 4 interrupt
    GPDMA1_CH4 = 88,
    ///89 - GPDMA1 channel 5 interrupt
    GPDMA1_CH5 = 89,
    ///90 - GPDMA1 channel 6 interrupt
    GPDMA1_CH6 = 90,
    ///91 - GPDMA1 channel 7 interrupt
    GPDMA1_CH7 = 91,
    ///92 - GPDMA1 channel 8 interrupt
    GPDMA1_CH8 = 92,
    ///93 - GPDMA1 channel 9 interrupt
    GPDMA1_CH9 = 93,
    ///94 - GPDMA1 channel 10 interrupt
    GPDMA1_CH10 = 94,
    ///95 - GPDMA1 channel 11 interrupt
    GPDMA1_CH11 = 95,
    ///96 - GPDMA1 channel 12 interrupt
    GPDMA1_CH12 = 96,
    ///97 - GPDMA1 channel 13 interrupt
    GPDMA1_CH13 = 97,
    ///98 - GPDMA1 channel 14 interrupt
    GPDMA1_CH14 = 98,
    ///99 - GPDMA1 channel 15 interrupt
    GPDMA1_CH15 = 99,
    ///100 - I2C1 event interrupt
    I2C1_EV = 100,
    ///101 - I2C1 error interrupt
    I2C1_ER = 101,
    ///102 - I2C2 event interrupt
    I2C2_EV = 102,
    ///103 - I2C2 error interrupt
    I2C2_ER = 103,
    ///104 - I2C3 event interrupt
    I2C3_EV = 104,
    ///105 - I2C3 error interrupt
    I2C3_ER = 105,
    ///106 - I2C4 event interrupt
    I2C4_EV = 106,
    ///107 - I2C4 error interrupt
    I2C4_ER = 107,
    ///108 - I3C1 event interrupt
    I3C1_EV = 108,
    ///109 - I3C1 error interrupt
    I3C1_ER = 109,
    ///110 - I3C2 event interrupt
    I3C2_EV = 110,
    ///111 - I3C2 error interrupt
    I3C2_ER = 111,
    ///112 - TIM1 Break interrupt
    TIM1_BRK = 112,
    ///113 - TIM1 Update interrupt
    TIM1_UP = 113,
    ///114 - TIM1 Trigger and Commutation interrupts
    TIM1_TRG_CCU = 114,
    ///115 - TIM1 Capture Compare interrupt
    TIM1_CC = 115,
    ///116 - TIM2 global interrupt
    TIM2 = 116,
    ///117 - TIM3 global interrupt
    TIM3 = 117,
    ///118 - TIM4 global interrupt
    TIM4 = 118,
    ///119 - TIM5 global interrupt
    TIM5 = 119,
    ///120 - TIM6 Global interrupt
    TIM6 = 120,
    ///121 - TIM7 Global interrupt
    TIM7 = 121,
    ///122 - TIM8 Break interrupt
    TIM8_BRK = 122,
    ///123 - TIM8 Update interrupt
    TIM8_UP = 123,
    ///124 - TIM8 Trigger and Commutation interrupts
    TIM8_TRG_CCU = 124,
    ///125 - TIM8 Capture Compare interrupt
    TIM8_CC = 125,
    ///126 - TIM9 Global interrupt
    TIM9 = 126,
    ///127 - TIM10 Global interrupt
    TIM10 = 127,
    ///128 - TIM11 Global interrupt
    TIM11 = 128,
    ///129 - TIM12 Global interrupt
    TIM12 = 129,
    ///130 - TIM13 Global interrupt
    TIM13 = 130,
    ///131 - TIM14 Global interrupt
    TIM14 = 131,
    ///132 - TIM15 global interrupt
    TIM15 = 132,
    ///133 - TIM16 global interrupt
    TIM16 = 133,
    ///134 - TIM17 global interrupt
    TIM17 = 134,
    ///135 - TIM18 Global interrupt
    TIM18 = 135,
    ///136 - LPTIM1 global interrupt
    LPTIM1 = 136,
    ///137 - LPTIM2 global interrupt
    LPTIM2 = 137,
    ///138 - LPTIM3 global interrupt
    LPTIM3 = 138,
    ///139 - LPTIM4 global interrupt
    LPTIM4 = 139,
    ///140 - LPTIM5 global interrupt
    LPTIM5 = 140,
    ///141 - ADF1 filter 0 global interrupt
    ADF1_FLT0 = 141,
    ///142 - MDF global Interrupt for Filter0
    MDF1_FLT0 = 142,
    ///143 - MDF global Interrupt for Filter1
    MDF1_FLT1 = 143,
    ///144 - MDF global Interrupt for Filter2
    MDF1_FLT2 = 144,
    ///145 - MDF global Interrupt for Filter3
    MDF1_FLT3 = 145,
    ///146 - MDF global Interrupt for Filter4
    MDF1_FLT4 = 146,
    ///147 - MDF global Interrupt for Filter5
    MDF1_FLT5 = 147,
    ///148 - SAI1 global interrupt A
    SAI1_A = 148,
    ///149 - SAI1 global interrupt B
    SAI1_B = 149,
    ///150 - SAI2 global interrupt A
    SAI2_A = 150,
    ///151 - SAI2 global interrupt B
    SAI2_B = 151,
    ///152 - SPDIFRX global interrupt
    SPDIFRX = 152,
    ///153 - SPI1 global interrupt A
    SPI1 = 153,
    ///154 - SPI2 global interrupt A
    SPI2 = 154,
    ///155 - SPI3 global interrupt A
    SPI3 = 155,
    ///156 - SPI4 global interrupt A
    SPI4 = 156,
    ///157 - SPI5 global interrupt A
    SPI5 = 157,
    ///158 - SPI6 global interrupt A
    SPI6 = 158,
    ///159 - USART1 Global interrupt
    USART1 = 159,
    ///160 - USART2 Global interrupt
    USART2 = 160,
    ///161 - USART3 Global interrupt
    USART3 = 161,
    ///162 - UART4 Global interrupt
    UART4 = 162,
    ///163 - UART5 Global interrupt
    UART5 = 163,
    ///164 - USART6 Global interrupt
    USART6 = 164,
    ///165 - UART7 Global interrupt
    UART7 = 165,
    ///166 - UART8 Global interrupt
    UART8 = 166,
    ///167 - UART9 Global interrupt
    UART9 = 167,
    ///168 - USART10 Global interrupt
    USART10 = 168,
    ///169 - LPUART1 global interrupt
    LPUART1 = 169,
    ///170 - XSPI1 global interrupt
    XSPI1 = 170,
    ///171 - XSPI2 global interrupt
    XSPI2 = 171,
    ///172 - XSPI3 global interrupt
    XSPI3 = 172,
    ///173 - FMC global interrupt
    FMC = 173,
    ///174 - SDMMC1 global interrupt
    SDMMC1 = 174,
    ///175 - SDMMC2 global interrupt
    SDMMC2 = 175,
    ///176 - UCPD global interrupt
    UCPD = 176,
    ///177 - USB OTG1 HS global interrupt
    OTG1 = 177,
    ///178 - USB OTG2 HS global interrupt
    OTG2 = 178,
    ///179 - Ethernet global interrupt
    ETH1 = 179,
    ///180 - FDCAN1 interrupt 0
    FDCAN1_IT0 = 180,
    ///181 - FDCAN1 interrupt 1
    FDCAN1_IT1 = 181,
    ///182 - FDCAN2 interrupt 0
    FDCAN2_IT0 = 182,
    ///183 - FDCAN2 interrupt 1
    FDCAN2_IT1 = 183,
    ///184 - FDCAN3 interrupt 0
    FDCAN3_IT0 = 184,
    ///185 - FDCAN3 interrupt 1
    FDCAN3_IT1 = 185,
    ///186 - Clock calibration unit interrupt line(FDCAN1 only)
    FDCAN_CU = 186,
    ///187 - MDIOS global Interrupt
    MDIOS = 187,
    ///188 - DCMI/PSSI global interrupt
    DCMI_PSSI = 188,
    ///189 - Wake-up pin interrupts
    WAKEUP_PIN = 189,
    ///190 - Debug monitor (Cortex-M55 related)
    CTI0 = 190,
    ///191 - Debug monitor (Cortex-M55 related)
    CTI1 = 191,
    ///193 - LCD up-layer global interrupt
    LTDC_UP = 193,
    ///194 - LCD up-layer error interrupt
    LTDC_UP_ERR = 194,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
///Analog-to-digital converters
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#ADC1)
pub type ADC1 = crate::Periph<adc1::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for ADC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC1").finish()
    }
}
///Analog-to-digital converters
pub mod adc1;
///Analog-to-digital converters
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#ADC1)
pub type ADC1_S = crate::Periph<adc1::RegisterBlock, 0x5002_2000>;
impl core::fmt::Debug for ADC1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC1_S").finish()
    }
}
///Analog-to-digital converters
pub use self::adc1 as adc1_s;
///Analog-to-digital converters
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#ADC1)
pub type ADC2 = crate::Periph<adc1::RegisterBlock, 0x4002_2100>;
impl core::fmt::Debug for ADC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC2").finish()
    }
}
///Analog-to-digital converters
pub use self::adc1 as adc2;
///Analog-to-digital converters
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#ADC1)
pub type ADC2_S = crate::Periph<adc1::RegisterBlock, 0x5002_2100>;
impl core::fmt::Debug for ADC2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC2_S").finish()
    }
}
///Analog-to-digital converters
pub use self::adc1 as adc2_s;
///ADC common registers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#ADC12)
pub type ADC12 = crate::Periph<adc12::RegisterBlock, 0x4002_2300>;
impl core::fmt::Debug for ADC12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC12").finish()
    }
}
///ADC common registers
pub mod adc12;
///ADC common registers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#ADC12)
pub type ADC12_S = crate::Periph<adc12::RegisterBlock, 0x5002_2300>;
impl core::fmt::Debug for ADC12_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC12_S").finish()
    }
}
///ADC common registers
pub use self::adc12 as adc12_s;
///Audio digital filter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#ADF)
pub type ADF = crate::Periph<adf::RegisterBlock, 0x4202_6000>;
impl core::fmt::Debug for ADF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADF").finish()
    }
}
///Audio digital filter
pub mod adf;
///Audio digital filter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#ADF)
pub type ADF_S = crate::Periph<adf::RegisterBlock, 0x5202_6000>;
impl core::fmt::Debug for ADF_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADF_S").finish()
    }
}
///Audio digital filter
pub use self::adf as adf_s;
///Boot and security control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#BSEC)
pub type BSEC = crate::Periph<bsec::RegisterBlock, 0x4600_9000>;
impl core::fmt::Debug for BSEC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BSEC").finish()
    }
}
///Boot and security control
pub mod bsec;
///Boot and security control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#BSEC)
pub type BSEC_S = crate::Periph<bsec::RegisterBlock, 0x5600_9000>;
impl core::fmt::Debug for BSEC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BSEC_S").finish()
    }
}
///Boot and security control
pub use self::bsec as bsec_s;
///AXI cache
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#CACHEAXI)
pub type CACHEAXI = crate::Periph<cacheaxi::RegisterBlock, 0x480d_fc00>;
impl core::fmt::Debug for CACHEAXI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CACHEAXI").finish()
    }
}
///AXI cache
pub mod cacheaxi;
///AXI cache
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#CACHEAXI)
pub type CACHEAXI_S = crate::Periph<cacheaxi::RegisterBlock, 0x580d_fc00>;
impl core::fmt::Debug for CACHEAXI_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CACHEAXI_S").finish()
    }
}
///AXI cache
pub use self::cacheaxi as cacheaxi_s;
///Cyclic redundancy check calculation unit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#CRC)
pub type CRC = crate::Periph<crc::RegisterBlock, 0x4602_4c00>;
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
///Cyclic redundancy check calculation unit
pub mod crc;
///Cyclic redundancy check calculation unit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#CRC)
pub type CRC_S = crate::Periph<crc::RegisterBlock, 0x5602_4c00>;
impl core::fmt::Debug for CRC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC_S").finish()
    }
}
///Cyclic redundancy check calculation unit
pub use self::crc as crc_s;
///Cryptographic processor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#CRYP)
pub type CRYP = crate::Periph<cryp::RegisterBlock, 0x4402_0800>;
impl core::fmt::Debug for CRYP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRYP").finish()
    }
}
///Cryptographic processor
pub mod cryp;
///Cryptographic processor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#CRYP)
pub type CRYP_S = crate::Periph<cryp::RegisterBlock, 0x5402_0800>;
impl core::fmt::Debug for CRYP_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRYP_S").finish()
    }
}
///Cryptographic processor
pub use self::cryp as cryp_s;
///CSI-2 Host
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#CSI)
pub type CSI = crate::Periph<csi::RegisterBlock, 0x4800_6000>;
impl core::fmt::Debug for CSI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CSI").finish()
    }
}
///CSI-2 Host
pub mod csi;
///CSI-2 Host
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#CSI)
pub type CSI_S = crate::Periph<csi::RegisterBlock, 0x5800_6000>;
impl core::fmt::Debug for CSI_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CSI_S").finish()
    }
}
///CSI-2 Host
pub use self::csi as csi_s;
///Microcontroller debug unit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DBGMCU)
pub type DBGMCU = crate::Periph<dbgmcu::RegisterBlock, 0x4400_1000>;
impl core::fmt::Debug for DBGMCU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBGMCU").finish()
    }
}
///Microcontroller debug unit
pub mod dbgmcu;
///Microcontroller debug unit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DBGMCU)
pub type DBGMCU_S = crate::Periph<dbgmcu::RegisterBlock, 0x5400_1000>;
impl core::fmt::Debug for DBGMCU_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBGMCU_S").finish()
    }
}
///Microcontroller debug unit
pub use self::dbgmcu as dbgmcu_s;
///Digital camera interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DCMI)
pub type DCMI = crate::Periph<dcmi::RegisterBlock, 0x4802_8400>;
impl core::fmt::Debug for DCMI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCMI").finish()
    }
}
///Digital camera interface
pub mod dcmi;
///Digital camera interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DCMI)
pub type DCMI_S = crate::Periph<dcmi::RegisterBlock, 0x5802_8400>;
impl core::fmt::Debug for DCMI_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCMI_S").finish()
    }
}
///Digital camera interface
pub use self::dcmi as dcmi_s;
///Digital camera interface pixel pipeline
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DCMIPP)
pub type DCMIPP = crate::Periph<dcmipp::RegisterBlock, 0x4800_2000>;
impl core::fmt::Debug for DCMIPP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCMIPP").finish()
    }
}
///Digital camera interface pixel pipeline
pub mod dcmipp;
///Digital camera interface pixel pipeline
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DCMIPP)
pub type DCMIPP_S = crate::Periph<dcmipp::RegisterBlock, 0x5800_2000>;
impl core::fmt::Debug for DCMIPP_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DCMIPP_S").finish()
    }
}
///Digital camera interface pixel pipeline
pub use self::dcmipp as dcmipp_s;
///DLYBSD address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DLYBSD)
pub type DLYBSD = crate::Periph<dlybsd::RegisterBlock, 0x4802_8000>;
impl core::fmt::Debug for DLYBSD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBSD").finish()
    }
}
///DLYBSD address block description
pub mod dlybsd;
///DLYBSD address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DLYBSD)
pub type DLYBSD_S = crate::Periph<dlybsd::RegisterBlock, 0x5802_8000>;
impl core::fmt::Debug for DLYBSD_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBSD_S").finish()
    }
}
///DLYBSD address block description
pub use self::dlybsd as dlybsd_s;
///DLYBSD address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DLYBSD)
pub type DLYBSD2 = crate::Periph<dlybsd::RegisterBlock, 0x4802_6c00>;
impl core::fmt::Debug for DLYBSD2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBSD2").finish()
    }
}
///DLYBSD address block description
pub use self::dlybsd as dlybsd2;
///DLYBSD address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DLYBSD)
pub type DLYBSD2_S = crate::Periph<dlybsd::RegisterBlock, 0x5802_6c00>;
impl core::fmt::Debug for DLYBSD2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DLYBSD2_S").finish()
    }
}
///DLYBSD address block description
pub use self::dlybsd as dlybsd2_s;
///Chrom-ART Accelerator controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DMA2D)
pub type DMA2D = crate::Periph<dma2d::RegisterBlock, 0x4802_1000>;
impl core::fmt::Debug for DMA2D {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA2D").finish()
    }
}
///Chrom-ART Accelerator controller
pub mod dma2d;
///Chrom-ART Accelerator controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DMA2D)
pub type DMA2D_S = crate::Periph<dma2d::RegisterBlock, 0x5802_1000>;
impl core::fmt::Debug for DMA2D_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA2D_S").finish()
    }
}
///Chrom-ART Accelerator controller
pub use self::dma2d as dma2d_s;
///Digital temperature sensor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DTS)
pub type DTS = crate::Periph<dts::RegisterBlock, 0x4600_a000>;
impl core::fmt::Debug for DTS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DTS").finish()
    }
}
///Digital temperature sensor
pub mod dts;
///Digital temperature sensor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#DTS)
pub type DTS_S = crate::Periph<dts::RegisterBlock, 0x5600_a000>;
impl core::fmt::Debug for DTS_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DTS_S").finish()
    }
}
///Digital temperature sensor
pub use self::dts as dts_s;
///Ethernet address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#ETH)
pub type ETH = crate::Periph<eth::RegisterBlock, 0x4803_6000>;
impl core::fmt::Debug for ETH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ETH").finish()
    }
}
///Ethernet address block description
pub mod eth;
///Ethernet address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#ETH)
pub type ETH_S = crate::Periph<eth::RegisterBlock, 0x5803_6000>;
impl core::fmt::Debug for ETH_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ETH_S").finish()
    }
}
///Ethernet address block description
pub use self::eth as eth_s;
///Extended interrupts and event controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#EXTI)
pub type EXTI = crate::Periph<exti::RegisterBlock, 0x4602_5000>;
impl core::fmt::Debug for EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI").finish()
    }
}
///Extended interrupts and event controller
pub mod exti;
///Extended interrupts and event controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#EXTI)
pub type EXTI_S = crate::Periph<exti::RegisterBlock, 0x5602_5000>;
impl core::fmt::Debug for EXTI_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI_S").finish()
    }
}
///Extended interrupts and event controller
pub use self::exti as exti_s;
///FDCAN register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#FDCAN1)
pub type FDCAN1 = crate::Periph<fdcan1::RegisterBlock, 0x4000_a000>;
impl core::fmt::Debug for FDCAN1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN1").finish()
    }
}
///FDCAN register block
pub mod fdcan1;
///FDCAN register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#FDCAN1)
pub type FDCAN1_S = crate::Periph<fdcan1::RegisterBlock, 0x5000_a000>;
impl core::fmt::Debug for FDCAN1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN1_S").finish()
    }
}
///FDCAN register block
pub use self::fdcan1 as fdcan1_s;
///FDCAN register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#FDCAN1)
pub type FDCAN2 = crate::Periph<fdcan1::RegisterBlock, 0x4000_a400>;
impl core::fmt::Debug for FDCAN2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN2").finish()
    }
}
///FDCAN register block
pub use self::fdcan1 as fdcan2;
///FDCAN register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#FDCAN1)
pub type FDCAN2_S = crate::Periph<fdcan1::RegisterBlock, 0x5000_a400>;
impl core::fmt::Debug for FDCAN2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN2_S").finish()
    }
}
///FDCAN register block
pub use self::fdcan1 as fdcan2_s;
///FDCAN register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#FDCAN1)
pub type FDCAN3 = crate::Periph<fdcan1::RegisterBlock, 0x4000_e800>;
impl core::fmt::Debug for FDCAN3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN3").finish()
    }
}
///FDCAN register block
pub use self::fdcan1 as fdcan3;
///FDCAN register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#FDCAN1)
pub type FDCAN3_S = crate::Periph<fdcan1::RegisterBlock, 0x5000_e800>;
impl core::fmt::Debug for FDCAN3_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FDCAN3_S").finish()
    }
}
///FDCAN register block
pub use self::fdcan1 as fdcan3_s;
///Flexible memory controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#FMC1)
pub type FMC1 = crate::Periph<fmc1::RegisterBlock, 0x4802_4000>;
impl core::fmt::Debug for FMC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FMC1").finish()
    }
}
///Flexible memory controller
pub mod fmc1;
///Flexible memory controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#FMC1)
pub type FMC1_S = crate::Periph<fmc1::RegisterBlock, 0x5802_4000>;
impl core::fmt::Debug for FMC1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FMC1_S").finish()
    }
}
///Flexible memory controller
pub use self::fmc1 as fmc1_s;
///Chrom-GRC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GFXMMU)
pub type GFXMMU = crate::Periph<gfxmmu::RegisterBlock, 0x4803_0000>;
impl core::fmt::Debug for GFXMMU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GFXMMU").finish()
    }
}
///Chrom-GRC
pub mod gfxmmu;
///Chrom-GRC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GFXMMU)
pub type GFXMMU_S = crate::Periph<gfxmmu::RegisterBlock, 0x5803_0000>;
impl core::fmt::Debug for GFXMMU_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GFXMMU_S").finish()
    }
}
///Chrom-GRC
pub use self::gfxmmu as gfxmmu_s;
///Graphic timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GFXTIM)
pub type GFXTIM = crate::Periph<gfxtim::RegisterBlock, 0x4800_4000>;
impl core::fmt::Debug for GFXTIM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GFXTIM").finish()
    }
}
///Graphic timer
pub mod gfxtim;
///Graphic timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GFXTIM)
pub type GFXTIM_S = crate::Periph<gfxtim::RegisterBlock, 0x5800_4000>;
impl core::fmt::Debug for GFXTIM_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GFXTIM_S").finish()
    }
}
///Graphic timer
pub use self::gfxtim as gfxtim_s;
///General purpose direct memory access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPDMA)
pub type GPDMA = crate::Periph<gpdma::RegisterBlock, 0x4002_1000>;
impl core::fmt::Debug for GPDMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA").finish()
    }
}
///General purpose direct memory access controller
pub mod gpdma;
///General purpose direct memory access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPDMA)
pub type GPDMA_S = crate::Periph<gpdma::RegisterBlock, 0x5002_1000>;
impl core::fmt::Debug for GPDMA_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA_S").finish()
    }
}
///General purpose direct memory access controller
pub use self::gpdma as gpdma_s;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOA)
pub type GPIOA = crate::Periph<gpioa::RegisterBlock, 0x4602_0000>;
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
///General-purpose I/Os
pub mod gpioa;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOA)
pub type GPIOA_S = crate::Periph<gpioa::RegisterBlock, 0x5602_0000>;
impl core::fmt::Debug for GPIOA_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA_S").finish()
    }
}
///General-purpose I/Os
pub use self::gpioa as gpioa_s;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOB)
pub type GPIOB = crate::Periph<gpiob::RegisterBlock, 0x4602_0400>;
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
///General-purpose I/Os
pub mod gpiob;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOB)
pub type GPIOB_S = crate::Periph<gpiob::RegisterBlock, 0x5602_0400>;
impl core::fmt::Debug for GPIOB_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB_S").finish()
    }
}
///General-purpose I/Os
pub use self::gpiob as gpiob_s;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOC)
pub type GPIOC = crate::Periph<gpioc::RegisterBlock, 0x4602_0800>;
impl core::fmt::Debug for GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC").finish()
    }
}
///General-purpose I/Os
pub mod gpioc;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOC)
pub type GPIOC_S = crate::Periph<gpioc::RegisterBlock, 0x5602_0800>;
impl core::fmt::Debug for GPIOC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC_S").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as gpioc_s;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOD)
pub type GPIOD = crate::Periph<gpiod::RegisterBlock, 0x4602_0c00>;
impl core::fmt::Debug for GPIOD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOD").finish()
    }
}
///General-purpose I/Os
pub mod gpiod;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOD)
pub type GPIOD_S = crate::Periph<gpiod::RegisterBlock, 0x5602_0c00>;
impl core::fmt::Debug for GPIOD_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOD_S").finish()
    }
}
///General-purpose I/Os
pub use self::gpiod as gpiod_s;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOE)
pub type GPIOE = crate::Periph<gpioe::RegisterBlock, 0x4602_1000>;
impl core::fmt::Debug for GPIOE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOE").finish()
    }
}
///General-purpose I/Os
pub mod gpioe;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOE)
pub type GPIOE_S = crate::Periph<gpioe::RegisterBlock, 0x5602_1000>;
impl core::fmt::Debug for GPIOE_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOE_S").finish()
    }
}
///General-purpose I/Os
pub use self::gpioe as gpioe_s;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOF)
pub type GPIOF = crate::Periph<gpiof::RegisterBlock, 0x4602_1400>;
impl core::fmt::Debug for GPIOF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOF").finish()
    }
}
///General-purpose I/Os
pub mod gpiof;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOF)
pub type GPIOF_S = crate::Periph<gpiof::RegisterBlock, 0x5602_1400>;
impl core::fmt::Debug for GPIOF_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOF_S").finish()
    }
}
///General-purpose I/Os
pub use self::gpiof as gpiof_s;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOG)
pub type GPIOG = crate::Periph<gpiog::RegisterBlock, 0x4602_1800>;
impl core::fmt::Debug for GPIOG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOG").finish()
    }
}
///General-purpose I/Os
pub mod gpiog;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOG)
pub type GPIOG_S = crate::Periph<gpiog::RegisterBlock, 0x5602_1800>;
impl core::fmt::Debug for GPIOG_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOG_S").finish()
    }
}
///General-purpose I/Os
pub use self::gpiog as gpiog_s;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOH)
pub type GPIOH = crate::Periph<gpioh::RegisterBlock, 0x4602_1c00>;
impl core::fmt::Debug for GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOH").finish()
    }
}
///General-purpose I/Os
pub mod gpioh;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOH)
pub type GPIOH_S = crate::Periph<gpioh::RegisterBlock, 0x5602_1c00>;
impl core::fmt::Debug for GPIOH_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOH_S").finish()
    }
}
///General-purpose I/Os
pub use self::gpioh as gpioh_s;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPION)
pub type GPION = crate::Periph<gpion::RegisterBlock, 0x4602_3400>;
impl core::fmt::Debug for GPION {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPION").finish()
    }
}
///General-purpose I/Os
pub mod gpion;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPION)
pub type GPION_S = crate::Periph<gpion::RegisterBlock, 0x5602_3400>;
impl core::fmt::Debug for GPION_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPION_S").finish()
    }
}
///General-purpose I/Os
pub use self::gpion as gpion_s;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOO)
pub type GPIOO = crate::Periph<gpioo::RegisterBlock, 0x4602_3800>;
impl core::fmt::Debug for GPIOO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOO").finish()
    }
}
///General-purpose I/Os
pub mod gpioo;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOO)
pub type GPIOO_S = crate::Periph<gpioo::RegisterBlock, 0x5602_3800>;
impl core::fmt::Debug for GPIOO_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOO_S").finish()
    }
}
///General-purpose I/Os
pub use self::gpioo as gpioo_s;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOP)
pub type GPIOP = crate::Periph<gpiop::RegisterBlock, 0x4602_3c00>;
impl core::fmt::Debug for GPIOP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOP").finish()
    }
}
///General-purpose I/Os
pub mod gpiop;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOP)
pub type GPIOP_S = crate::Periph<gpiop::RegisterBlock, 0x5602_3c00>;
impl core::fmt::Debug for GPIOP_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOP_S").finish()
    }
}
///General-purpose I/Os
pub use self::gpiop as gpiop_s;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOQ)
pub type GPIOQ = crate::Periph<gpioq::RegisterBlock, 0x4602_4000>;
impl core::fmt::Debug for GPIOQ {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOQ").finish()
    }
}
///General-purpose I/Os
pub mod gpioq;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#GPIOQ)
pub type GPIOQ_S = crate::Periph<gpioq::RegisterBlock, 0x5602_4000>;
impl core::fmt::Debug for GPIOQ_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOQ_S").finish()
    }
}
///General-purpose I/Os
pub use self::gpioq as gpioq_s;
///HASH register bank (full SHA-2/SHA-3)
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#HASH)
pub type HASH = crate::Periph<hash::RegisterBlock, 0x4402_0400>;
impl core::fmt::Debug for HASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HASH").finish()
    }
}
///HASH register bank (full SHA-2/SHA-3)
pub mod hash;
///HASH register bank (full SHA-2/SHA-3)
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#HASH)
pub type HASH_S = crate::Periph<hash::RegisterBlock, 0x5402_0400>;
impl core::fmt::Debug for HASH_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HASH_S").finish()
    }
}
///HASH register bank (full SHA-2/SHA-3)
pub use self::hash as hash_s;
///Hardware debug port
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#HDP)
pub type HDP = crate::Periph<hdp::RegisterBlock, 0x4600_0800>;
impl core::fmt::Debug for HDP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HDP").finish()
    }
}
///Hardware debug port
pub mod hdp;
///Hardware debug port
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#HDP)
pub type HDP_S = crate::Periph<hdp::RegisterBlock, 0x5600_0800>;
impl core::fmt::Debug for HDP_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HDP_S").finish()
    }
}
///Hardware debug port
pub use self::hdp as hdp_s;
///High-performance direct memory access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#HPDMA)
pub type HPDMA = crate::Periph<hpdma::RegisterBlock, 0x4802_0000>;
impl core::fmt::Debug for HPDMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HPDMA").finish()
    }
}
///High-performance direct memory access controller
pub mod hpdma;
///High-performance direct memory access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#HPDMA)
pub type HPDMA_S = crate::Periph<hpdma::RegisterBlock, 0x5802_0000>;
impl core::fmt::Debug for HPDMA_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HPDMA_S").finish()
    }
}
///High-performance direct memory access controller
pub use self::hpdma as hpdma_s;
///Illegal access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#IAC)
pub type IAC = crate::Periph<iac::RegisterBlock, 0x4402_5000>;
impl core::fmt::Debug for IAC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IAC").finish()
    }
}
///Illegal access controller
pub mod iac;
///Illegal access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#IAC)
pub type IAC_S = crate::Periph<iac::RegisterBlock, 0x5402_5000>;
impl core::fmt::Debug for IAC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IAC_S").finish()
    }
}
///Illegal access controller
pub use self::iac as iac_s;
///Texture cache
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#ICACHE)
pub type ICACHE = crate::Periph<icache::RegisterBlock, 0x4803_5000>;
impl core::fmt::Debug for ICACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ICACHE").finish()
    }
}
///Texture cache
pub mod icache;
///Texture cache
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#ICACHE)
pub type ICACHE_S = crate::Periph<icache::RegisterBlock, 0x5803_5000>;
impl core::fmt::Debug for ICACHE_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ICACHE_S").finish()
    }
}
///Texture cache
pub use self::icache as icache_s;
///Independent watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#IWDG)
pub type IWDG = crate::Periph<iwdg::RegisterBlock, 0x4600_4800>;
impl core::fmt::Debug for IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG").finish()
    }
}
///Independent watchdog
pub mod iwdg;
///Independent watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#IWDG)
pub type IWDG_S = crate::Periph<iwdg::RegisterBlock, 0x5600_4800>;
impl core::fmt::Debug for IWDG_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG_S").finish()
    }
}
///Independent watchdog
pub use self::iwdg as iwdg_s;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#I2C1)
pub type I2C1 = crate::Periph<i2c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
///Inter-integrated circuit
pub mod i2c1;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#I2C1)
pub type I2C1_S = crate::Periph<i2c1::RegisterBlock, 0x5000_5400>;
impl core::fmt::Debug for I2C1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1_S").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c1_s;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#I2C1)
pub type I2C2 = crate::Periph<i2c1::RegisterBlock, 0x4000_5800>;
impl core::fmt::Debug for I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c2;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#I2C1)
pub type I2C2_S = crate::Periph<i2c1::RegisterBlock, 0x5000_5800>;
impl core::fmt::Debug for I2C2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2_S").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c2_s;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#I2C1)
pub type I2C3 = crate::Periph<i2c1::RegisterBlock, 0x4000_5c00>;
impl core::fmt::Debug for I2C3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C3").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c3;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#I2C1)
pub type I2C3_S = crate::Periph<i2c1::RegisterBlock, 0x5000_5c00>;
impl core::fmt::Debug for I2C3_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C3_S").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c3_s;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#I2C1)
pub type I2C4 = crate::Periph<i2c1::RegisterBlock, 0x4600_1c00>;
impl core::fmt::Debug for I2C4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C4").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c4;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#I2C1)
pub type I2C4_S = crate::Periph<i2c1::RegisterBlock, 0x5600_1c00>;
impl core::fmt::Debug for I2C4_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C4_S").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c1 as i2c4_s;
///Improved inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#I3C1)
pub type I3C1 = crate::Periph<i3c1::RegisterBlock, 0x4000_6000>;
impl core::fmt::Debug for I3C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C1").finish()
    }
}
///Improved inter-integrated circuit
pub mod i3c1;
///Improved inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#I3C1)
pub type I3C1_S = crate::Periph<i3c1::RegisterBlock, 0x5000_6000>;
impl core::fmt::Debug for I3C1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C1_S").finish()
    }
}
///Improved inter-integrated circuit
pub use self::i3c1 as i3c1_s;
///Improved inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#I3C1)
pub type I3C2 = crate::Periph<i3c1::RegisterBlock, 0x4000_6400>;
impl core::fmt::Debug for I3C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C2").finish()
    }
}
///Improved inter-integrated circuit
pub use self::i3c1 as i3c2;
///Improved inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#I3C1)
pub type I3C2_S = crate::Periph<i3c1::RegisterBlock, 0x5000_6400>;
impl core::fmt::Debug for I3C2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I3C2_S").finish()
    }
}
///Improved inter-integrated circuit
pub use self::i3c1 as i3c2_s;
///JPEG codec
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#JPEG)
pub type JPEG = crate::Periph<jpeg::RegisterBlock, 0x4802_3000>;
impl core::fmt::Debug for JPEG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("JPEG").finish()
    }
}
///JPEG codec
pub mod jpeg;
///JPEG codec
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#JPEG)
pub type JPEG_S = crate::Periph<jpeg::RegisterBlock, 0x5802_3000>;
impl core::fmt::Debug for JPEG_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("JPEG_S").finish()
    }
}
///JPEG codec
pub use self::jpeg as jpeg_s;
///LCD-TFT display controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LTDC)
pub type LTDC = crate::Periph<ltdc::RegisterBlock, 0x4800_1000>;
impl core::fmt::Debug for LTDC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LTDC").finish()
    }
}
///LCD-TFT display controller
pub mod ltdc;
///LCD-TFT display controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LTDC)
pub type LTDC_S = crate::Periph<ltdc::RegisterBlock, 0x5800_1000>;
impl core::fmt::Debug for LTDC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LTDC_S").finish()
    }
}
///LCD-TFT display controller
pub use self::ltdc as ltdc_s;
///Low-power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LPTIM1)
pub type LPTIM1 = crate::Periph<lptim1::RegisterBlock, 0x4000_2400>;
impl core::fmt::Debug for LPTIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM1").finish()
    }
}
///Low-power timer
pub mod lptim1;
///Low-power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LPTIM1)
pub type LPTIM1_S = crate::Periph<lptim1::RegisterBlock, 0x5000_2400>;
impl core::fmt::Debug for LPTIM1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM1_S").finish()
    }
}
///Low-power timer
pub use self::lptim1 as lptim1_s;
///Low-power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LPTIM2)
pub type LPTIM2 = crate::Periph<lptim2::RegisterBlock, 0x4600_2400>;
impl core::fmt::Debug for LPTIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM2").finish()
    }
}
///Low-power timer
pub mod lptim2;
///Low-power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LPTIM2)
pub type LPTIM2_S = crate::Periph<lptim2::RegisterBlock, 0x5600_2400>;
impl core::fmt::Debug for LPTIM2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM2_S").finish()
    }
}
///Low-power timer
pub use self::lptim2 as lptim2_s;
///Low-power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LPTIM3)
pub type LPTIM3 = crate::Periph<lptim3::RegisterBlock, 0x4600_2800>;
impl core::fmt::Debug for LPTIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM3").finish()
    }
}
///Low-power timer
pub mod lptim3;
///Low-power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LPTIM3)
pub type LPTIM3_S = crate::Periph<lptim3::RegisterBlock, 0x5600_2800>;
impl core::fmt::Debug for LPTIM3_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM3_S").finish()
    }
}
///Low-power timer
pub use self::lptim3 as lptim3_s;
///Low-power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LPTIM4)
pub type LPTIM4 = crate::Periph<lptim4::RegisterBlock, 0x4600_2c00>;
impl core::fmt::Debug for LPTIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM4").finish()
    }
}
///Low-power timer
pub mod lptim4;
///Low-power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LPTIM4)
pub type LPTIM4_S = crate::Periph<lptim4::RegisterBlock, 0x5600_2c00>;
impl core::fmt::Debug for LPTIM4_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM4_S").finish()
    }
}
///Low-power timer
pub use self::lptim4 as lptim4_s;
///Low-power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LPTIM5)
pub type LPTIM5 = crate::Periph<lptim5::RegisterBlock, 0x4600_3000>;
impl core::fmt::Debug for LPTIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM5").finish()
    }
}
///Low-power timer
pub mod lptim5;
///Low-power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LPTIM5)
pub type LPTIM5_S = crate::Periph<lptim5::RegisterBlock, 0x5600_3000>;
impl core::fmt::Debug for LPTIM5_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM5_S").finish()
    }
}
///Low-power timer
pub use self::lptim5 as lptim5_s;
///Low-power universal asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LPUART1)
pub type LPUART1 = crate::Periph<lpuart1::RegisterBlock, 0x4600_0c00>;
impl core::fmt::Debug for LPUART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART1").finish()
    }
}
///Low-power universal asynchronous receiver transmitter
pub mod lpuart1;
///Low-power universal asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#LPUART1)
pub type LPUART1_S = crate::Periph<lpuart1::RegisterBlock, 0x5600_0c00>;
impl core::fmt::Debug for LPUART1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART1_S").finish()
    }
}
///Low-power universal asynchronous receiver transmitter
pub use self::lpuart1 as lpuart1_s;
///Memory cipher engine
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#MCE1)
pub type MCE1 = crate::Periph<mce1::RegisterBlock, 0x4802_b800>;
impl core::fmt::Debug for MCE1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MCE1").finish()
    }
}
///Memory cipher engine
pub mod mce1;
///Memory cipher engine
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#MCE1)
pub type MCE1_S = crate::Periph<mce1::RegisterBlock, 0x5802_b800>;
impl core::fmt::Debug for MCE1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MCE1_S").finish()
    }
}
///Memory cipher engine
pub use self::mce1 as mce1_s;
///Memory cipher engine
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#MCE1)
pub type MCE2 = crate::Periph<mce1::RegisterBlock, 0x4802_bc00>;
impl core::fmt::Debug for MCE2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MCE2").finish()
    }
}
///Memory cipher engine
pub use self::mce1 as mce2;
///Memory cipher engine
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#MCE1)
pub type MCE2_S = crate::Periph<mce1::RegisterBlock, 0x5802_bc00>;
impl core::fmt::Debug for MCE2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MCE2_S").finish()
    }
}
///Memory cipher engine
pub use self::mce1 as mce2_s;
///Memory cipher engine
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#MCE1)
pub type MCE3 = crate::Periph<mce1::RegisterBlock, 0x4802_c000>;
impl core::fmt::Debug for MCE3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MCE3").finish()
    }
}
///Memory cipher engine
pub use self::mce1 as mce3;
///Memory cipher engine
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#MCE1)
pub type MCE3_S = crate::Periph<mce1::RegisterBlock, 0x5802_c000>;
impl core::fmt::Debug for MCE3_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MCE3_S").finish()
    }
}
///Memory cipher engine
pub use self::mce1 as mce3_s;
///Memory cipher engine
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#MCE1)
pub type MCE4 = crate::Periph<mce1::RegisterBlock, 0x4802_e000>;
impl core::fmt::Debug for MCE4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MCE4").finish()
    }
}
///Memory cipher engine
pub use self::mce1 as mce4;
///Memory cipher engine
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#MCE1)
pub type MCE4_S = crate::Periph<mce1::RegisterBlock, 0x5802_e000>;
impl core::fmt::Debug for MCE4_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MCE4_S").finish()
    }
}
///Memory cipher engine
pub use self::mce1 as mce4_s;
///MDF register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#MDF1)
pub type MDF1 = crate::Periph<mdf1::RegisterBlock, 0x4202_5000>;
impl core::fmt::Debug for MDF1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDF1").finish()
    }
}
///MDF register block
pub mod mdf1;
///MDF register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#MDF1)
pub type MDF1_S = crate::Periph<mdf1::RegisterBlock, 0x5202_5000>;
impl core::fmt::Debug for MDF1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDF1_S").finish()
    }
}
///MDF register block
pub use self::mdf1 as mdf1_s;
///Management data input/output
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#MDIOS)
pub type MDIOS = crate::Periph<mdios::RegisterBlock, 0x4000_9400>;
impl core::fmt::Debug for MDIOS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDIOS").finish()
    }
}
///Management data input/output
pub mod mdios;
///Management data input/output
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#MDIOS)
pub type MDIOS_S = crate::Periph<mdios::RegisterBlock, 0x5000_9400>;
impl core::fmt::Debug for MDIOS_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MDIOS_S").finish()
    }
}
///Management data input/output
pub use self::mdios as mdios_s;
///USB on-the-go high-speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#OTG1)
pub type OTG1 = crate::Periph<otg1::RegisterBlock, 0x4804_0000>;
impl core::fmt::Debug for OTG1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG1").finish()
    }
}
///USB on-the-go high-speed
pub mod otg1;
///USB on-the-go high-speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#OTG1)
pub type OTG1_S = crate::Periph<otg1::RegisterBlock, 0x5804_0000>;
impl core::fmt::Debug for OTG1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG1_S").finish()
    }
}
///USB on-the-go high-speed
pub use self::otg1 as otg1_s;
///USB on-the-go high-speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#OTG1)
pub type OTG2 = crate::Periph<otg1::RegisterBlock, 0x4808_0000>;
impl core::fmt::Debug for OTG2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG2").finish()
    }
}
///USB on-the-go high-speed
pub use self::otg1 as otg2;
///USB on-the-go high-speed
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#OTG1)
pub type OTG2_S = crate::Periph<otg1::RegisterBlock, 0x5808_0000>;
impl core::fmt::Debug for OTG2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("OTG2_S").finish()
    }
}
///USB on-the-go high-speed
pub use self::otg1 as otg2_s;
///Public key accelerator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#PKA)
pub type PKA = crate::Periph<pka::RegisterBlock, 0x4402_2000>;
impl core::fmt::Debug for PKA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PKA").finish()
    }
}
///Public key accelerator
pub mod pka;
///Public key accelerator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#PKA)
pub type PKA_S = crate::Periph<pka::RegisterBlock, 0x5402_2000>;
impl core::fmt::Debug for PKA_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PKA_S").finish()
    }
}
///Public key accelerator
pub use self::pka as pka_s;
///Parallel synchronous slave interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#PSSI)
pub type PSSI = crate::Periph<pssi::RegisterBlock, 0x4802_6400>;
impl core::fmt::Debug for PSSI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PSSI").finish()
    }
}
///Parallel synchronous slave interface
pub mod pssi;
///Parallel synchronous slave interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#PSSI)
pub type PSSI_S = crate::Periph<pssi::RegisterBlock, 0x5802_6400>;
impl core::fmt::Debug for PSSI_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PSSI_S").finish()
    }
}
///Parallel synchronous slave interface
pub use self::pssi as pssi_s;
///Power control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#PWR)
pub type PWR = crate::Periph<pwr::RegisterBlock, 0x4602_4800>;
impl core::fmt::Debug for PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR").finish()
    }
}
///Power control
pub mod pwr;
///Power control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#PWR)
pub type PWR_S = crate::Periph<pwr::RegisterBlock, 0x5602_4800>;
impl core::fmt::Debug for PWR_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR_S").finish()
    }
}
///Power control
pub use self::pwr as pwr_s;
///SRAM configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#RAMCFG)
pub type RAMCFG = crate::Periph<ramcfg::RegisterBlock, 0x4202_3000>;
impl core::fmt::Debug for RAMCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAMCFG").finish()
    }
}
///SRAM configuration controller
pub mod ramcfg;
///SRAM configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#RAMCFG)
pub type RAMCFG_S = crate::Periph<ramcfg::RegisterBlock, 0x5202_3000>;
impl core::fmt::Debug for RAMCFG_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAMCFG_S").finish()
    }
}
///SRAM configuration controller
pub use self::ramcfg as ramcfg_s;
///Reset and clock control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#RCC)
pub type RCC = crate::Periph<rcc::RegisterBlock, 0x4602_8000>;
impl core::fmt::Debug for RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC").finish()
    }
}
///Reset and clock control
pub mod rcc;
///Reset and clock control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#RCC)
pub type RCC_S = crate::Periph<rcc::RegisterBlock, 0x5602_8000>;
impl core::fmt::Debug for RCC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC_S").finish()
    }
}
///Reset and clock control
pub use self::rcc as rcc_s;
///Resource isolation framework security controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#RIFSC)
pub type RIFSC = crate::Periph<rifsc::RegisterBlock, 0x4402_4000>;
impl core::fmt::Debug for RIFSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RIFSC").finish()
    }
}
///Resource isolation framework security controller
pub mod rifsc;
///Resource isolation framework security controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#RIFSC)
pub type RIFSC_S = crate::Periph<rifsc::RegisterBlock, 0x5402_4000>;
impl core::fmt::Debug for RIFSC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RIFSC_S").finish()
    }
}
///Resource isolation framework security controller
pub use self::rifsc as rifsc_s;
///Resource isolation slave unit for address space protection
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#RISAF)
pub type RISAF = crate::Periph<risaf::RegisterBlock, 0x4402_6000>;
impl core::fmt::Debug for RISAF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RISAF").finish()
    }
}
///Resource isolation slave unit for address space protection
pub mod risaf;
///Resource isolation slave unit for address space protection
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#RISAF)
pub type RISAF_S = crate::Periph<risaf::RegisterBlock, 0x5402_6000>;
impl core::fmt::Debug for RISAF_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RISAF_S").finish()
    }
}
///Resource isolation slave unit for address space protection
pub use self::risaf as risaf_s;
///True random number generator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#RNG)
pub type RNG = crate::Periph<rng::RegisterBlock, 0x4402_0000>;
impl core::fmt::Debug for RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG").finish()
    }
}
///True random number generator
pub mod rng;
///True random number generator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#RNG)
pub type RNG_S = crate::Periph<rng::RegisterBlock, 0x5402_0000>;
impl core::fmt::Debug for RNG_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG_S").finish()
    }
}
///True random number generator
pub use self::rng as rng_s;
///Real-time clock
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#RTC)
pub type RTC = crate::Periph<rtc::RegisterBlock, 0x4600_4000>;
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
///Real-time clock
pub mod rtc;
///Real-time clock
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#RTC)
pub type RTC_S = crate::Periph<rtc::RegisterBlock, 0x5600_4000>;
impl core::fmt::Debug for RTC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC_S").finish()
    }
}
///Real-time clock
pub use self::rtc as rtc_s;
///Secure AES coprocessor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SAES)
pub type SAES = crate::Periph<saes::RegisterBlock, 0x4402_1000>;
impl core::fmt::Debug for SAES {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAES").finish()
    }
}
///Secure AES coprocessor
pub mod saes;
///Secure AES coprocessor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SAES)
pub type SAES_S = crate::Periph<saes::RegisterBlock, 0x5402_1000>;
impl core::fmt::Debug for SAES_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAES_S").finish()
    }
}
///Secure AES coprocessor
pub use self::saes as saes_s;
///Serial audio interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SAI1)
pub type SAI1 = crate::Periph<sai1::RegisterBlock, 0x4200_5800>;
impl core::fmt::Debug for SAI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI1").finish()
    }
}
///Serial audio interface
pub mod sai1;
///Serial audio interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SAI1)
pub type SAI1_S = crate::Periph<sai1::RegisterBlock, 0x5200_5800>;
impl core::fmt::Debug for SAI1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI1_S").finish()
    }
}
///Serial audio interface
pub use self::sai1 as sai1_s;
///Serial audio interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SAI1)
pub type SAI2 = crate::Periph<sai1::RegisterBlock, 0x4200_5c00>;
impl core::fmt::Debug for SAI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI2").finish()
    }
}
///Serial audio interface
pub use self::sai1 as sai2;
///Serial audio interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SAI1)
pub type SAI2_S = crate::Periph<sai1::RegisterBlock, 0x5200_5c00>;
impl core::fmt::Debug for SAI2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAI2_S").finish()
    }
}
///Serial audio interface
pub use self::sai1 as sai2_s;
///Secure digital input/output MultiMediaCard interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SDMMC1)
pub type SDMMC1 = crate::Periph<sdmmc1::RegisterBlock, 0x4802_7000>;
impl core::fmt::Debug for SDMMC1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC1").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub mod sdmmc1;
///Secure digital input/output MultiMediaCard interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SDMMC1)
pub type SDMMC1_S = crate::Periph<sdmmc1::RegisterBlock, 0x5802_7000>;
impl core::fmt::Debug for SDMMC1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC1_S").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub use self::sdmmc1 as sdmmc1_s;
///Secure digital input/output MultiMediaCard interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SDMMC1)
pub type SDMMC2 = crate::Periph<sdmmc1::RegisterBlock, 0x4802_6800>;
impl core::fmt::Debug for SDMMC2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC2").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub use self::sdmmc1 as sdmmc2;
///Secure digital input/output MultiMediaCard interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SDMMC1)
pub type SDMMC2_S = crate::Periph<sdmmc1::RegisterBlock, 0x5802_6800>;
impl core::fmt::Debug for SDMMC2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SDMMC2_S").finish()
    }
}
///Secure digital input/output MultiMediaCard interface
pub use self::sdmmc1 as sdmmc2_s;
///SPDIF receiver interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPDIFRX)
pub type SPDIFRX = crate::Periph<spdifrx::RegisterBlock, 0x4000_4000>;
impl core::fmt::Debug for SPDIFRX {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPDIFRX").finish()
    }
}
///SPDIF receiver interface
pub mod spdifrx;
///SPDIF receiver interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPDIFRX)
pub type SPDIFRX_S = crate::Periph<spdifrx::RegisterBlock, 0x5000_4000>;
impl core::fmt::Debug for SPDIFRX_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPDIFRX_S").finish()
    }
}
///SPDIF receiver interface
pub use self::spdifrx as spdifrx_s;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPI1)
pub type SPI1 = crate::Periph<spi1::RegisterBlock, 0x4200_3000>;
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
///Serial peripheral interface
pub mod spi1;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPI1)
pub type SPI1_S = crate::Periph<spi1::RegisterBlock, 0x5200_3000>;
impl core::fmt::Debug for SPI1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1_S").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi1_s;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPI1)
pub type SPI2 = crate::Periph<spi1::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi2;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPI1)
pub type SPI2_S = crate::Periph<spi1::RegisterBlock, 0x5000_3800>;
impl core::fmt::Debug for SPI2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2_S").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi2_s;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPI1)
pub type SPI3 = crate::Periph<spi1::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi3;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPI1)
pub type SPI3_S = crate::Periph<spi1::RegisterBlock, 0x5000_3c00>;
impl core::fmt::Debug for SPI3_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3_S").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi3_s;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPI1)
pub type SPI4 = crate::Periph<spi1::RegisterBlock, 0x4200_3400>;
impl core::fmt::Debug for SPI4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI4").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi4;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPI1)
pub type SPI4_S = crate::Periph<spi1::RegisterBlock, 0x5200_3400>;
impl core::fmt::Debug for SPI4_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI4_S").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi4_s;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPI1)
pub type SPI5 = crate::Periph<spi1::RegisterBlock, 0x4200_5000>;
impl core::fmt::Debug for SPI5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI5").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi5;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPI1)
pub type SPI5_S = crate::Periph<spi1::RegisterBlock, 0x5200_5000>;
impl core::fmt::Debug for SPI5_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI5_S").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi5_s;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPI1)
pub type SPI6 = crate::Periph<spi1::RegisterBlock, 0x4600_1400>;
impl core::fmt::Debug for SPI6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI6").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi6;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SPI1)
pub type SPI6_S = crate::Periph<spi1::RegisterBlock, 0x5600_1400>;
impl core::fmt::Debug for SPI6_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI6_S").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi6_s;
///System configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SYSCFG)
pub type SYSCFG = crate::Periph<syscfg::RegisterBlock, 0x4600_8000>;
impl core::fmt::Debug for SYSCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCFG").finish()
    }
}
///System configuration controller
pub mod syscfg;
///System configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#SYSCFG)
pub type SYSCFG_S = crate::Periph<syscfg::RegisterBlock, 0x5600_8000>;
impl core::fmt::Debug for SYSCFG_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCFG_S").finish()
    }
}
///System configuration controller
pub use self::syscfg as syscfg_s;
///Tamper and backup registers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TAMP)
pub type TAMP = crate::Periph<tamp::RegisterBlock, 0x4600_4400>;
impl core::fmt::Debug for TAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TAMP").finish()
    }
}
///Tamper and backup registers
pub mod tamp;
///Tamper and backup registers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TAMP)
pub type TAMP_S = crate::Periph<tamp::RegisterBlock, 0x5600_4400>;
impl core::fmt::Debug for TAMP_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TAMP_S").finish()
    }
}
///Tamper and backup registers
pub use self::tamp as tamp_s;
///Advanced-control timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM1)
pub type TIM1 = crate::Periph<tim1::RegisterBlock, 0x4200_0000>;
impl core::fmt::Debug for TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1").finish()
    }
}
///Advanced-control timers
pub mod tim1;
///Advanced-control timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM1)
pub type TIM1_S = crate::Periph<tim1::RegisterBlock, 0x5200_0000>;
impl core::fmt::Debug for TIM1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1_S").finish()
    }
}
///Advanced-control timers
pub use self::tim1 as tim1_s;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM2)
pub type TIM2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2").finish()
    }
}
///General-purpose timers
pub mod tim2;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM2)
pub type TIM2_S = crate::Periph<tim2::RegisterBlock, 0x5000_0000>;
impl core::fmt::Debug for TIM2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2_S").finish()
    }
}
///General-purpose timers
pub use self::tim2 as tim2_s;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM3)
pub type TIM3 = crate::Periph<tim3::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3").finish()
    }
}
///General purpose timers
pub mod tim3;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM3)
pub type TIM3_S = crate::Periph<tim3::RegisterBlock, 0x5000_0400>;
impl core::fmt::Debug for TIM3_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3_S").finish()
    }
}
///General purpose timers
pub use self::tim3 as tim3_s;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM4)
pub type TIM4 = crate::Periph<tim4::RegisterBlock, 0x4000_0800>;
impl core::fmt::Debug for TIM4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM4").finish()
    }
}
///General purpose timers
pub mod tim4;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM4)
pub type TIM4_S = crate::Periph<tim4::RegisterBlock, 0x5000_0800>;
impl core::fmt::Debug for TIM4_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM4_S").finish()
    }
}
///General purpose timers
pub use self::tim4 as tim4_s;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM5)
pub type TIM5 = crate::Periph<tim5::RegisterBlock, 0x4000_0c00>;
impl core::fmt::Debug for TIM5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM5").finish()
    }
}
///General purpose timers
pub mod tim5;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM5)
pub type TIM5_S = crate::Periph<tim5::RegisterBlock, 0x5000_0c00>;
impl core::fmt::Debug for TIM5_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM5_S").finish()
    }
}
///General purpose timers
pub use self::tim5 as tim5_s;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM6)
pub type TIM6 = crate::Periph<tim6::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for TIM6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM6").finish()
    }
}
///Basic timers
pub mod tim6;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM6)
pub type TIM6_S = crate::Periph<tim6::RegisterBlock, 0x5000_1000>;
impl core::fmt::Debug for TIM6_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM6_S").finish()
    }
}
///Basic timers
pub use self::tim6 as tim6_s;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM7)
pub type TIM7 = crate::Periph<tim7::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for TIM7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM7").finish()
    }
}
///Basic timers
pub mod tim7;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM7)
pub type TIM7_S = crate::Periph<tim7::RegisterBlock, 0x5000_1400>;
impl core::fmt::Debug for TIM7_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM7_S").finish()
    }
}
///Basic timers
pub use self::tim7 as tim7_s;
///Advanced-control timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM8)
pub type TIM8 = crate::Periph<tim8::RegisterBlock, 0x4200_0400>;
impl core::fmt::Debug for TIM8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM8").finish()
    }
}
///Advanced-control timers
pub mod tim8;
///Advanced-control timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM8)
pub type TIM8_S = crate::Periph<tim8::RegisterBlock, 0x5200_0400>;
impl core::fmt::Debug for TIM8_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM8_S").finish()
    }
}
///Advanced-control timers
pub use self::tim8 as tim8_s;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM9)
pub type TIM9 = crate::Periph<tim9::RegisterBlock, 0x4200_4c00>;
impl core::fmt::Debug for TIM9 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM9").finish()
    }
}
///General-purpose timers
pub mod tim9;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM9)
pub type TIM9_S = crate::Periph<tim9::RegisterBlock, 0x5200_4c00>;
impl core::fmt::Debug for TIM9_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM9_S").finish()
    }
}
///General-purpose timers
pub use self::tim9 as tim9_s;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM10)
pub type TIM10 = crate::Periph<tim10::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for TIM10 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM10").finish()
    }
}
///General-purpose timers
pub mod tim10;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM10)
pub type TIM10_S = crate::Periph<tim10::RegisterBlock, 0x5000_3000>;
impl core::fmt::Debug for TIM10_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM10_S").finish()
    }
}
///General-purpose timers
pub use self::tim10 as tim10_s;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM11)
pub type TIM11 = crate::Periph<tim11::RegisterBlock, 0x4000_3400>;
impl core::fmt::Debug for TIM11 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM11").finish()
    }
}
///General-purpose timers
pub mod tim11;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM11)
pub type TIM11_S = crate::Periph<tim11::RegisterBlock, 0x5000_3400>;
impl core::fmt::Debug for TIM11_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM11_S").finish()
    }
}
///General-purpose timers
pub use self::tim11 as tim11_s;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM12)
pub type TIM12 = crate::Periph<tim12::RegisterBlock, 0x4000_1800>;
impl core::fmt::Debug for TIM12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM12").finish()
    }
}
///General-purpose timers
pub mod tim12;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM12)
pub type TIM12_S = crate::Periph<tim12::RegisterBlock, 0x5000_1800>;
impl core::fmt::Debug for TIM12_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM12_S").finish()
    }
}
///General-purpose timers
pub use self::tim12 as tim12_s;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM13)
pub type TIM13 = crate::Periph<tim13::RegisterBlock, 0x4000_1c00>;
impl core::fmt::Debug for TIM13 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM13").finish()
    }
}
///General-purpose timers
pub mod tim13;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM13)
pub type TIM13_S = crate::Periph<tim13::RegisterBlock, 0x5000_1c00>;
impl core::fmt::Debug for TIM13_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM13_S").finish()
    }
}
///General-purpose timers
pub use self::tim13 as tim13_s;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM14)
pub type TIM14 = crate::Periph<tim14::RegisterBlock, 0x4000_2000>;
impl core::fmt::Debug for TIM14 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM14").finish()
    }
}
///General-purpose timers
pub mod tim14;
///General-purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM14)
pub type TIM14_S = crate::Periph<tim14::RegisterBlock, 0x5000_2000>;
impl core::fmt::Debug for TIM14_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM14_S").finish()
    }
}
///General-purpose timers
pub use self::tim14 as tim14_s;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM15)
pub type TIM15 = crate::Periph<tim15::RegisterBlock, 0x4200_4000>;
impl core::fmt::Debug for TIM15 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM15").finish()
    }
}
///General purpose timers
pub mod tim15;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM15)
pub type TIM15_S = crate::Periph<tim15::RegisterBlock, 0x5200_4000>;
impl core::fmt::Debug for TIM15_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM15_S").finish()
    }
}
///General purpose timers
pub use self::tim15 as tim15_s;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM16)
pub type TIM16 = crate::Periph<tim16::RegisterBlock, 0x4200_4400>;
impl core::fmt::Debug for TIM16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM16").finish()
    }
}
///General purpose timers
pub mod tim16;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM16)
pub type TIM16_S = crate::Periph<tim16::RegisterBlock, 0x5200_4400>;
impl core::fmt::Debug for TIM16_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM16_S").finish()
    }
}
///General purpose timers
pub use self::tim16 as tim16_s;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM17)
pub type TIM17 = crate::Periph<tim17::RegisterBlock, 0x4200_4800>;
impl core::fmt::Debug for TIM17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM17").finish()
    }
}
///General purpose timers
pub mod tim17;
///General purpose timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM17)
pub type TIM17_S = crate::Periph<tim17::RegisterBlock, 0x5200_4800>;
impl core::fmt::Debug for TIM17_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM17_S").finish()
    }
}
///General purpose timers
pub use self::tim17 as tim17_s;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM18)
pub type TIM18 = crate::Periph<tim18::RegisterBlock, 0x4200_3c00>;
impl core::fmt::Debug for TIM18 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM18").finish()
    }
}
///Basic timers
pub mod tim18;
///Basic timers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#TIM18)
pub type TIM18_S = crate::Periph<tim18::RegisterBlock, 0x5200_3c00>;
impl core::fmt::Debug for TIM18_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM18_S").finish()
    }
}
///Basic timers
pub use self::tim18 as tim18_s;
///USB Type-C/USB Power Delivery interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#UCPD)
pub type UCPD = crate::Periph<ucpd::RegisterBlock, 0x4000_fc00>;
impl core::fmt::Debug for UCPD {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UCPD").finish()
    }
}
///USB Type-C/USB Power Delivery interface
pub mod ucpd;
///USB Type-C/USB Power Delivery interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#UCPD)
pub type UCPD_S = crate::Periph<ucpd::RegisterBlock, 0x5000_fc00>;
impl core::fmt::Debug for UCPD_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UCPD_S").finish()
    }
}
///USB Type-C/USB Power Delivery interface
pub use self::ucpd as ucpd_s;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type USART1 = crate::Periph<usart1::RegisterBlock, 0x4200_1000>;
impl core::fmt::Debug for USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub mod usart1;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type USART1_S = crate::Periph<usart1::RegisterBlock, 0x5200_1000>;
impl core::fmt::Debug for USART1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1_S").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as usart1_s;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type USART2 = crate::Periph<usart1::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as usart2;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type USART2_S = crate::Periph<usart1::RegisterBlock, 0x5000_4400>;
impl core::fmt::Debug for USART2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2_S").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as usart2_s;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type USART3 = crate::Periph<usart1::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for USART3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART3").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as usart3;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type USART3_S = crate::Periph<usart1::RegisterBlock, 0x5000_4800>;
impl core::fmt::Debug for USART3_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART3_S").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as usart3_s;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type UART4 = crate::Periph<usart1::RegisterBlock, 0x4000_4c00>;
impl core::fmt::Debug for UART4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART4").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart4;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type UART4_S = crate::Periph<usart1::RegisterBlock, 0x5000_4c00>;
impl core::fmt::Debug for UART4_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART4_S").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart4_s;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type UART5 = crate::Periph<usart1::RegisterBlock, 0x4000_5000>;
impl core::fmt::Debug for UART5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART5").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart5;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type UART5_S = crate::Periph<usart1::RegisterBlock, 0x5000_5000>;
impl core::fmt::Debug for UART5_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART5_S").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart5_s;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type USART6 = crate::Periph<usart1::RegisterBlock, 0x4200_1400>;
impl core::fmt::Debug for USART6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART6").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as usart6;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type USART6_S = crate::Periph<usart1::RegisterBlock, 0x5200_1400>;
impl core::fmt::Debug for USART6_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART6_S").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as usart6_s;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type UART7 = crate::Periph<usart1::RegisterBlock, 0x4000_7800>;
impl core::fmt::Debug for UART7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART7").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart7;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type UART7_S = crate::Periph<usart1::RegisterBlock, 0x5000_7800>;
impl core::fmt::Debug for UART7_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART7_S").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart7_s;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type UART8 = crate::Periph<usart1::RegisterBlock, 0x4000_7c00>;
impl core::fmt::Debug for UART8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART8").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart8;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type UART8_S = crate::Periph<usart1::RegisterBlock, 0x5000_7c00>;
impl core::fmt::Debug for UART8_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART8_S").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart8_s;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type UART9 = crate::Periph<usart1::RegisterBlock, 0x4200_1800>;
impl core::fmt::Debug for UART9 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART9").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart9;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type UART9_S = crate::Periph<usart1::RegisterBlock, 0x5200_1800>;
impl core::fmt::Debug for UART9_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UART9_S").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as uart9_s;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type USART10 = crate::Periph<usart1::RegisterBlock, 0x4200_1c00>;
impl core::fmt::Debug for USART10 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART10").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as usart10;
///Universal synchronous/asynchronous receiver transmitter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#USART1)
pub type USART10_S = crate::Periph<usart1::RegisterBlock, 0x5200_1c00>;
impl core::fmt::Debug for USART10_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART10_S").finish()
    }
}
///Universal synchronous/asynchronous receiver transmitter
pub use self::usart1 as usart10_s;
///Video encoder
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#VENC)
pub type VENC = crate::Periph<venc::RegisterBlock, 0x4800_5000>;
impl core::fmt::Debug for VENC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VENC").finish()
    }
}
///Video encoder
pub mod venc;
///Video encoder
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#VENC)
pub type VENC_S = crate::Periph<venc::RegisterBlock, 0x5800_5000>;
impl core::fmt::Debug for VENC_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VENC_S").finish()
    }
}
///Video encoder
pub use self::venc as venc_s;
///Voltage reference buffer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#VREFBUF)
pub type VREFBUF = crate::Periph<vrefbuf::RegisterBlock, 0x4600_3c00>;
impl core::fmt::Debug for VREFBUF {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VREFBUF").finish()
    }
}
///Voltage reference buffer
pub mod vrefbuf;
///Voltage reference buffer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#VREFBUF)
pub type VREFBUF_S = crate::Periph<vrefbuf::RegisterBlock, 0x5600_3c00>;
impl core::fmt::Debug for VREFBUF_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("VREFBUF_S").finish()
    }
}
///Voltage reference buffer
pub use self::vrefbuf as vrefbuf_s;
///System window watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#WWDG)
pub type WWDG = crate::Periph<wwdg::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG").finish()
    }
}
///System window watchdog
pub mod wwdg;
///System window watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#WWDG)
pub type WWDG_S = crate::Periph<wwdg::RegisterBlock, 0x5000_2c00>;
impl core::fmt::Debug for WWDG_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG_S").finish()
    }
}
///System window watchdog
pub use self::wwdg as wwdg_s;
///XSPI I/O manager
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#XSPIM)
pub type XSPIM = crate::Periph<xspim::RegisterBlock, 0x4802_b400>;
impl core::fmt::Debug for XSPIM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XSPIM").finish()
    }
}
///XSPI I/O manager
pub mod xspim;
///XSPI I/O manager
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#XSPIM)
pub type XSPIM_S = crate::Periph<xspim::RegisterBlock, 0x5802_b400>;
impl core::fmt::Debug for XSPIM_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XSPIM_S").finish()
    }
}
///XSPI I/O manager
pub use self::xspim as xspim_s;
///Extended-SPI interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#XSPI1)
pub type XSPI1 = crate::Periph<xspi1::RegisterBlock, 0x4802_5000>;
impl core::fmt::Debug for XSPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XSPI1").finish()
    }
}
///Extended-SPI interface
pub mod xspi1;
///Extended-SPI interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#XSPI1)
pub type XSPI1_S = crate::Periph<xspi1::RegisterBlock, 0x5802_5000>;
impl core::fmt::Debug for XSPI1_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XSPI1_S").finish()
    }
}
///Extended-SPI interface
pub use self::xspi1 as xspi1_s;
///Extended-SPI interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#XSPI1)
pub type XSPI2 = crate::Periph<xspi1::RegisterBlock, 0x4802_a000>;
impl core::fmt::Debug for XSPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XSPI2").finish()
    }
}
///Extended-SPI interface
pub use self::xspi1 as xspi2;
///Extended-SPI interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#XSPI1)
pub type XSPI2_S = crate::Periph<xspi1::RegisterBlock, 0x5802_a000>;
impl core::fmt::Debug for XSPI2_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XSPI2_S").finish()
    }
}
///Extended-SPI interface
pub use self::xspi1 as xspi2_s;
///Extended-SPI interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#XSPI1)
pub type XSPI3 = crate::Periph<xspi1::RegisterBlock, 0x4802_d000>;
impl core::fmt::Debug for XSPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XSPI3").finish()
    }
}
///Extended-SPI interface
pub use self::xspi1 as xspi3;
///Extended-SPI interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32N655.html#XSPI1)
pub type XSPI3_S = crate::Periph<xspi1::RegisterBlock, 0x5802_d000>;
impl core::fmt::Debug for XSPI3_S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("XSPI3_S").finish()
    }
}
///Extended-SPI interface
pub use self::xspi1 as xspi3_s;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
/// All the peripherals.
#[allow(non_snake_case)]
pub struct Peripherals {
    ///ADC1
    pub ADC1: ADC1,
    ///ADC1_S
    pub ADC1_S: ADC1_S,
    ///ADC2
    pub ADC2: ADC2,
    ///ADC2_S
    pub ADC2_S: ADC2_S,
    ///ADC12
    pub ADC12: ADC12,
    ///ADC12_S
    pub ADC12_S: ADC12_S,
    ///ADF
    pub ADF: ADF,
    ///ADF_S
    pub ADF_S: ADF_S,
    ///BSEC
    pub BSEC: BSEC,
    ///BSEC_S
    pub BSEC_S: BSEC_S,
    ///CACHEAXI
    pub CACHEAXI: CACHEAXI,
    ///CACHEAXI_S
    pub CACHEAXI_S: CACHEAXI_S,
    ///CRC
    pub CRC: CRC,
    ///CRC_S
    pub CRC_S: CRC_S,
    ///CRYP
    pub CRYP: CRYP,
    ///CRYP_S
    pub CRYP_S: CRYP_S,
    ///CSI
    pub CSI: CSI,
    ///CSI_S
    pub CSI_S: CSI_S,
    ///DBGMCU
    pub DBGMCU: DBGMCU,
    ///DBGMCU_S
    pub DBGMCU_S: DBGMCU_S,
    ///DCMI
    pub DCMI: DCMI,
    ///DCMI_S
    pub DCMI_S: DCMI_S,
    ///DCMIPP
    pub DCMIPP: DCMIPP,
    ///DCMIPP_S
    pub DCMIPP_S: DCMIPP_S,
    ///DLYBSD
    pub DLYBSD: DLYBSD,
    ///DLYBSD_S
    pub DLYBSD_S: DLYBSD_S,
    ///DLYBSD2
    pub DLYBSD2: DLYBSD2,
    ///DLYBSD2_S
    pub DLYBSD2_S: DLYBSD2_S,
    ///DMA2D
    pub DMA2D: DMA2D,
    ///DMA2D_S
    pub DMA2D_S: DMA2D_S,
    ///DTS
    pub DTS: DTS,
    ///DTS_S
    pub DTS_S: DTS_S,
    ///ETH
    pub ETH: ETH,
    ///ETH_S
    pub ETH_S: ETH_S,
    ///EXTI
    pub EXTI: EXTI,
    ///EXTI_S
    pub EXTI_S: EXTI_S,
    ///FDCAN1
    pub FDCAN1: FDCAN1,
    ///FDCAN1_S
    pub FDCAN1_S: FDCAN1_S,
    ///FDCAN2
    pub FDCAN2: FDCAN2,
    ///FDCAN2_S
    pub FDCAN2_S: FDCAN2_S,
    ///FDCAN3
    pub FDCAN3: FDCAN3,
    ///FDCAN3_S
    pub FDCAN3_S: FDCAN3_S,
    ///FMC1
    pub FMC1: FMC1,
    ///FMC1_S
    pub FMC1_S: FMC1_S,
    ///GFXMMU
    pub GFXMMU: GFXMMU,
    ///GFXMMU_S
    pub GFXMMU_S: GFXMMU_S,
    ///GFXTIM
    pub GFXTIM: GFXTIM,
    ///GFXTIM_S
    pub GFXTIM_S: GFXTIM_S,
    ///GPDMA
    pub GPDMA: GPDMA,
    ///GPDMA_S
    pub GPDMA_S: GPDMA_S,
    ///GPIOA
    pub GPIOA: GPIOA,
    ///GPIOA_S
    pub GPIOA_S: GPIOA_S,
    ///GPIOB
    pub GPIOB: GPIOB,
    ///GPIOB_S
    pub GPIOB_S: GPIOB_S,
    ///GPIOC
    pub GPIOC: GPIOC,
    ///GPIOC_S
    pub GPIOC_S: GPIOC_S,
    ///GPIOD
    pub GPIOD: GPIOD,
    ///GPIOD_S
    pub GPIOD_S: GPIOD_S,
    ///GPIOE
    pub GPIOE: GPIOE,
    ///GPIOE_S
    pub GPIOE_S: GPIOE_S,
    ///GPIOF
    pub GPIOF: GPIOF,
    ///GPIOF_S
    pub GPIOF_S: GPIOF_S,
    ///GPIOG
    pub GPIOG: GPIOG,
    ///GPIOG_S
    pub GPIOG_S: GPIOG_S,
    ///GPIOH
    pub GPIOH: GPIOH,
    ///GPIOH_S
    pub GPIOH_S: GPIOH_S,
    ///GPION
    pub GPION: GPION,
    ///GPION_S
    pub GPION_S: GPION_S,
    ///GPIOO
    pub GPIOO: GPIOO,
    ///GPIOO_S
    pub GPIOO_S: GPIOO_S,
    ///GPIOP
    pub GPIOP: GPIOP,
    ///GPIOP_S
    pub GPIOP_S: GPIOP_S,
    ///GPIOQ
    pub GPIOQ: GPIOQ,
    ///GPIOQ_S
    pub GPIOQ_S: GPIOQ_S,
    ///HASH
    pub HASH: HASH,
    ///HASH_S
    pub HASH_S: HASH_S,
    ///HDP
    pub HDP: HDP,
    ///HDP_S
    pub HDP_S: HDP_S,
    ///HPDMA
    pub HPDMA: HPDMA,
    ///HPDMA_S
    pub HPDMA_S: HPDMA_S,
    ///IAC
    pub IAC: IAC,
    ///IAC_S
    pub IAC_S: IAC_S,
    ///ICACHE
    pub ICACHE: ICACHE,
    ///ICACHE_S
    pub ICACHE_S: ICACHE_S,
    ///IWDG
    pub IWDG: IWDG,
    ///IWDG_S
    pub IWDG_S: IWDG_S,
    ///I2C1
    pub I2C1: I2C1,
    ///I2C1_S
    pub I2C1_S: I2C1_S,
    ///I2C2
    pub I2C2: I2C2,
    ///I2C2_S
    pub I2C2_S: I2C2_S,
    ///I2C3
    pub I2C3: I2C3,
    ///I2C3_S
    pub I2C3_S: I2C3_S,
    ///I2C4
    pub I2C4: I2C4,
    ///I2C4_S
    pub I2C4_S: I2C4_S,
    ///I3C1
    pub I3C1: I3C1,
    ///I3C1_S
    pub I3C1_S: I3C1_S,
    ///I3C2
    pub I3C2: I3C2,
    ///I3C2_S
    pub I3C2_S: I3C2_S,
    ///JPEG
    pub JPEG: JPEG,
    ///JPEG_S
    pub JPEG_S: JPEG_S,
    ///LTDC
    pub LTDC: LTDC,
    ///LTDC_S
    pub LTDC_S: LTDC_S,
    ///LPTIM1
    pub LPTIM1: LPTIM1,
    ///LPTIM1_S
    pub LPTIM1_S: LPTIM1_S,
    ///LPTIM2
    pub LPTIM2: LPTIM2,
    ///LPTIM2_S
    pub LPTIM2_S: LPTIM2_S,
    ///LPTIM3
    pub LPTIM3: LPTIM3,
    ///LPTIM3_S
    pub LPTIM3_S: LPTIM3_S,
    ///LPTIM4
    pub LPTIM4: LPTIM4,
    ///LPTIM4_S
    pub LPTIM4_S: LPTIM4_S,
    ///LPTIM5
    pub LPTIM5: LPTIM5,
    ///LPTIM5_S
    pub LPTIM5_S: LPTIM5_S,
    ///LPUART1
    pub LPUART1: LPUART1,
    ///LPUART1_S
    pub LPUART1_S: LPUART1_S,
    ///MCE1
    pub MCE1: MCE1,
    ///MCE1_S
    pub MCE1_S: MCE1_S,
    ///MCE2
    pub MCE2: MCE2,
    ///MCE2_S
    pub MCE2_S: MCE2_S,
    ///MCE3
    pub MCE3: MCE3,
    ///MCE3_S
    pub MCE3_S: MCE3_S,
    ///MCE4
    pub MCE4: MCE4,
    ///MCE4_S
    pub MCE4_S: MCE4_S,
    ///MDF1
    pub MDF1: MDF1,
    ///MDF1_S
    pub MDF1_S: MDF1_S,
    ///MDIOS
    pub MDIOS: MDIOS,
    ///MDIOS_S
    pub MDIOS_S: MDIOS_S,
    ///OTG1
    pub OTG1: OTG1,
    ///OTG1_S
    pub OTG1_S: OTG1_S,
    ///OTG2
    pub OTG2: OTG2,
    ///OTG2_S
    pub OTG2_S: OTG2_S,
    ///PKA
    pub PKA: PKA,
    ///PKA_S
    pub PKA_S: PKA_S,
    ///PSSI
    pub PSSI: PSSI,
    ///PSSI_S
    pub PSSI_S: PSSI_S,
    ///PWR
    pub PWR: PWR,
    ///PWR_S
    pub PWR_S: PWR_S,
    ///RAMCFG
    pub RAMCFG: RAMCFG,
    ///RAMCFG_S
    pub RAMCFG_S: RAMCFG_S,
    ///RCC
    pub RCC: RCC,
    ///RCC_S
    pub RCC_S: RCC_S,
    ///RIFSC
    pub RIFSC: RIFSC,
    ///RIFSC_S
    pub RIFSC_S: RIFSC_S,
    ///RISAF
    pub RISAF: RISAF,
    ///RISAF_S
    pub RISAF_S: RISAF_S,
    ///RNG
    pub RNG: RNG,
    ///RNG_S
    pub RNG_S: RNG_S,
    ///RTC
    pub RTC: RTC,
    ///RTC_S
    pub RTC_S: RTC_S,
    ///SAES
    pub SAES: SAES,
    ///SAES_S
    pub SAES_S: SAES_S,
    ///SAI1
    pub SAI1: SAI1,
    ///SAI1_S
    pub SAI1_S: SAI1_S,
    ///SAI2
    pub SAI2: SAI2,
    ///SAI2_S
    pub SAI2_S: SAI2_S,
    ///SDMMC1
    pub SDMMC1: SDMMC1,
    ///SDMMC1_S
    pub SDMMC1_S: SDMMC1_S,
    ///SDMMC2
    pub SDMMC2: SDMMC2,
    ///SDMMC2_S
    pub SDMMC2_S: SDMMC2_S,
    ///SPDIFRX
    pub SPDIFRX: SPDIFRX,
    ///SPDIFRX_S
    pub SPDIFRX_S: SPDIFRX_S,
    ///SPI1
    pub SPI1: SPI1,
    ///SPI1_S
    pub SPI1_S: SPI1_S,
    ///SPI2
    pub SPI2: SPI2,
    ///SPI2_S
    pub SPI2_S: SPI2_S,
    ///SPI3
    pub SPI3: SPI3,
    ///SPI3_S
    pub SPI3_S: SPI3_S,
    ///SPI4
    pub SPI4: SPI4,
    ///SPI4_S
    pub SPI4_S: SPI4_S,
    ///SPI5
    pub SPI5: SPI5,
    ///SPI5_S
    pub SPI5_S: SPI5_S,
    ///SPI6
    pub SPI6: SPI6,
    ///SPI6_S
    pub SPI6_S: SPI6_S,
    ///SYSCFG
    pub SYSCFG: SYSCFG,
    ///SYSCFG_S
    pub SYSCFG_S: SYSCFG_S,
    ///TAMP
    pub TAMP: TAMP,
    ///TAMP_S
    pub TAMP_S: TAMP_S,
    ///TIM1
    pub TIM1: TIM1,
    ///TIM1_S
    pub TIM1_S: TIM1_S,
    ///TIM2
    pub TIM2: TIM2,
    ///TIM2_S
    pub TIM2_S: TIM2_S,
    ///TIM3
    pub TIM3: TIM3,
    ///TIM3_S
    pub TIM3_S: TIM3_S,
    ///TIM4
    pub TIM4: TIM4,
    ///TIM4_S
    pub TIM4_S: TIM4_S,
    ///TIM5
    pub TIM5: TIM5,
    ///TIM5_S
    pub TIM5_S: TIM5_S,
    ///TIM6
    pub TIM6: TIM6,
    ///TIM6_S
    pub TIM6_S: TIM6_S,
    ///TIM7
    pub TIM7: TIM7,
    ///TIM7_S
    pub TIM7_S: TIM7_S,
    ///TIM8
    pub TIM8: TIM8,
    ///TIM8_S
    pub TIM8_S: TIM8_S,
    ///TIM9
    pub TIM9: TIM9,
    ///TIM9_S
    pub TIM9_S: TIM9_S,
    ///TIM10
    pub TIM10: TIM10,
    ///TIM10_S
    pub TIM10_S: TIM10_S,
    ///TIM11
    pub TIM11: TIM11,
    ///TIM11_S
    pub TIM11_S: TIM11_S,
    ///TIM12
    pub TIM12: TIM12,
    ///TIM12_S
    pub TIM12_S: TIM12_S,
    ///TIM13
    pub TIM13: TIM13,
    ///TIM13_S
    pub TIM13_S: TIM13_S,
    ///TIM14
    pub TIM14: TIM14,
    ///TIM14_S
    pub TIM14_S: TIM14_S,
    ///TIM15
    pub TIM15: TIM15,
    ///TIM15_S
    pub TIM15_S: TIM15_S,
    ///TIM16
    pub TIM16: TIM16,
    ///TIM16_S
    pub TIM16_S: TIM16_S,
    ///TIM17
    pub TIM17: TIM17,
    ///TIM17_S
    pub TIM17_S: TIM17_S,
    ///TIM18
    pub TIM18: TIM18,
    ///TIM18_S
    pub TIM18_S: TIM18_S,
    ///UCPD
    pub UCPD: UCPD,
    ///UCPD_S
    pub UCPD_S: UCPD_S,
    ///USART1
    pub USART1: USART1,
    ///USART1_S
    pub USART1_S: USART1_S,
    ///USART2
    pub USART2: USART2,
    ///USART2_S
    pub USART2_S: USART2_S,
    ///USART3
    pub USART3: USART3,
    ///USART3_S
    pub USART3_S: USART3_S,
    ///UART4
    pub UART4: UART4,
    ///UART4_S
    pub UART4_S: UART4_S,
    ///UART5
    pub UART5: UART5,
    ///UART5_S
    pub UART5_S: UART5_S,
    ///USART6
    pub USART6: USART6,
    ///USART6_S
    pub USART6_S: USART6_S,
    ///UART7
    pub UART7: UART7,
    ///UART7_S
    pub UART7_S: UART7_S,
    ///UART8
    pub UART8: UART8,
    ///UART8_S
    pub UART8_S: UART8_S,
    ///UART9
    pub UART9: UART9,
    ///UART9_S
    pub UART9_S: UART9_S,
    ///USART10
    pub USART10: USART10,
    ///USART10_S
    pub USART10_S: USART10_S,
    ///VENC
    pub VENC: VENC,
    ///VENC_S
    pub VENC_S: VENC_S,
    ///VREFBUF
    pub VREFBUF: VREFBUF,
    ///VREFBUF_S
    pub VREFBUF_S: VREFBUF_S,
    ///WWDG
    pub WWDG: WWDG,
    ///WWDG_S
    pub WWDG_S: WWDG_S,
    ///XSPIM
    pub XSPIM: XSPIM,
    ///XSPIM_S
    pub XSPIM_S: XSPIM_S,
    ///XSPI1
    pub XSPI1: XSPI1,
    ///XSPI1_S
    pub XSPI1_S: XSPI1_S,
    ///XSPI2
    pub XSPI2: XSPI2,
    ///XSPI2_S
    pub XSPI2_S: XSPI2_S,
    ///XSPI3
    pub XSPI3: XSPI3,
    ///XSPI3_S
    pub XSPI3_S: XSPI3_S,
}
impl Peripherals {
    /// Returns all the peripherals *once*.
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    /// Unchecked version of `Peripherals::take`.
    ///
    /// # Safety
    ///
    /// Each of the returned peripherals must be used at most once.
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            ADC1: ADC1::steal(),
            ADC1_S: ADC1_S::steal(),
            ADC2: ADC2::steal(),
            ADC2_S: ADC2_S::steal(),
            ADC12: ADC12::steal(),
            ADC12_S: ADC12_S::steal(),
            ADF: ADF::steal(),
            ADF_S: ADF_S::steal(),
            BSEC: BSEC::steal(),
            BSEC_S: BSEC_S::steal(),
            CACHEAXI: CACHEAXI::steal(),
            CACHEAXI_S: CACHEAXI_S::steal(),
            CRC: CRC::steal(),
            CRC_S: CRC_S::steal(),
            CRYP: CRYP::steal(),
            CRYP_S: CRYP_S::steal(),
            CSI: CSI::steal(),
            CSI_S: CSI_S::steal(),
            DBGMCU: DBGMCU::steal(),
            DBGMCU_S: DBGMCU_S::steal(),
            DCMI: DCMI::steal(),
            DCMI_S: DCMI_S::steal(),
            DCMIPP: DCMIPP::steal(),
            DCMIPP_S: DCMIPP_S::steal(),
            DLYBSD: DLYBSD::steal(),
            DLYBSD_S: DLYBSD_S::steal(),
            DLYBSD2: DLYBSD2::steal(),
            DLYBSD2_S: DLYBSD2_S::steal(),
            DMA2D: DMA2D::steal(),
            DMA2D_S: DMA2D_S::steal(),
            DTS: DTS::steal(),
            DTS_S: DTS_S::steal(),
            ETH: ETH::steal(),
            ETH_S: ETH_S::steal(),
            EXTI: EXTI::steal(),
            EXTI_S: EXTI_S::steal(),
            FDCAN1: FDCAN1::steal(),
            FDCAN1_S: FDCAN1_S::steal(),
            FDCAN2: FDCAN2::steal(),
            FDCAN2_S: FDCAN2_S::steal(),
            FDCAN3: FDCAN3::steal(),
            FDCAN3_S: FDCAN3_S::steal(),
            FMC1: FMC1::steal(),
            FMC1_S: FMC1_S::steal(),
            GFXMMU: GFXMMU::steal(),
            GFXMMU_S: GFXMMU_S::steal(),
            GFXTIM: GFXTIM::steal(),
            GFXTIM_S: GFXTIM_S::steal(),
            GPDMA: GPDMA::steal(),
            GPDMA_S: GPDMA_S::steal(),
            GPIOA: GPIOA::steal(),
            GPIOA_S: GPIOA_S::steal(),
            GPIOB: GPIOB::steal(),
            GPIOB_S: GPIOB_S::steal(),
            GPIOC: GPIOC::steal(),
            GPIOC_S: GPIOC_S::steal(),
            GPIOD: GPIOD::steal(),
            GPIOD_S: GPIOD_S::steal(),
            GPIOE: GPIOE::steal(),
            GPIOE_S: GPIOE_S::steal(),
            GPIOF: GPIOF::steal(),
            GPIOF_S: GPIOF_S::steal(),
            GPIOG: GPIOG::steal(),
            GPIOG_S: GPIOG_S::steal(),
            GPIOH: GPIOH::steal(),
            GPIOH_S: GPIOH_S::steal(),
            GPION: GPION::steal(),
            GPION_S: GPION_S::steal(),
            GPIOO: GPIOO::steal(),
            GPIOO_S: GPIOO_S::steal(),
            GPIOP: GPIOP::steal(),
            GPIOP_S: GPIOP_S::steal(),
            GPIOQ: GPIOQ::steal(),
            GPIOQ_S: GPIOQ_S::steal(),
            HASH: HASH::steal(),
            HASH_S: HASH_S::steal(),
            HDP: HDP::steal(),
            HDP_S: HDP_S::steal(),
            HPDMA: HPDMA::steal(),
            HPDMA_S: HPDMA_S::steal(),
            IAC: IAC::steal(),
            IAC_S: IAC_S::steal(),
            ICACHE: ICACHE::steal(),
            ICACHE_S: ICACHE_S::steal(),
            IWDG: IWDG::steal(),
            IWDG_S: IWDG_S::steal(),
            I2C1: I2C1::steal(),
            I2C1_S: I2C1_S::steal(),
            I2C2: I2C2::steal(),
            I2C2_S: I2C2_S::steal(),
            I2C3: I2C3::steal(),
            I2C3_S: I2C3_S::steal(),
            I2C4: I2C4::steal(),
            I2C4_S: I2C4_S::steal(),
            I3C1: I3C1::steal(),
            I3C1_S: I3C1_S::steal(),
            I3C2: I3C2::steal(),
            I3C2_S: I3C2_S::steal(),
            JPEG: JPEG::steal(),
            JPEG_S: JPEG_S::steal(),
            LTDC: LTDC::steal(),
            LTDC_S: LTDC_S::steal(),
            LPTIM1: LPTIM1::steal(),
            LPTIM1_S: LPTIM1_S::steal(),
            LPTIM2: LPTIM2::steal(),
            LPTIM2_S: LPTIM2_S::steal(),
            LPTIM3: LPTIM3::steal(),
            LPTIM3_S: LPTIM3_S::steal(),
            LPTIM4: LPTIM4::steal(),
            LPTIM4_S: LPTIM4_S::steal(),
            LPTIM5: LPTIM5::steal(),
            LPTIM5_S: LPTIM5_S::steal(),
            LPUART1: LPUART1::steal(),
            LPUART1_S: LPUART1_S::steal(),
            MCE1: MCE1::steal(),
            MCE1_S: MCE1_S::steal(),
            MCE2: MCE2::steal(),
            MCE2_S: MCE2_S::steal(),
            MCE3: MCE3::steal(),
            MCE3_S: MCE3_S::steal(),
            MCE4: MCE4::steal(),
            MCE4_S: MCE4_S::steal(),
            MDF1: MDF1::steal(),
            MDF1_S: MDF1_S::steal(),
            MDIOS: MDIOS::steal(),
            MDIOS_S: MDIOS_S::steal(),
            OTG1: OTG1::steal(),
            OTG1_S: OTG1_S::steal(),
            OTG2: OTG2::steal(),
            OTG2_S: OTG2_S::steal(),
            PKA: PKA::steal(),
            PKA_S: PKA_S::steal(),
            PSSI: PSSI::steal(),
            PSSI_S: PSSI_S::steal(),
            PWR: PWR::steal(),
            PWR_S: PWR_S::steal(),
            RAMCFG: RAMCFG::steal(),
            RAMCFG_S: RAMCFG_S::steal(),
            RCC: RCC::steal(),
            RCC_S: RCC_S::steal(),
            RIFSC: RIFSC::steal(),
            RIFSC_S: RIFSC_S::steal(),
            RISAF: RISAF::steal(),
            RISAF_S: RISAF_S::steal(),
            RNG: RNG::steal(),
            RNG_S: RNG_S::steal(),
            RTC: RTC::steal(),
            RTC_S: RTC_S::steal(),
            SAES: SAES::steal(),
            SAES_S: SAES_S::steal(),
            SAI1: SAI1::steal(),
            SAI1_S: SAI1_S::steal(),
            SAI2: SAI2::steal(),
            SAI2_S: SAI2_S::steal(),
            SDMMC1: SDMMC1::steal(),
            SDMMC1_S: SDMMC1_S::steal(),
            SDMMC2: SDMMC2::steal(),
            SDMMC2_S: SDMMC2_S::steal(),
            SPDIFRX: SPDIFRX::steal(),
            SPDIFRX_S: SPDIFRX_S::steal(),
            SPI1: SPI1::steal(),
            SPI1_S: SPI1_S::steal(),
            SPI2: SPI2::steal(),
            SPI2_S: SPI2_S::steal(),
            SPI3: SPI3::steal(),
            SPI3_S: SPI3_S::steal(),
            SPI4: SPI4::steal(),
            SPI4_S: SPI4_S::steal(),
            SPI5: SPI5::steal(),
            SPI5_S: SPI5_S::steal(),
            SPI6: SPI6::steal(),
            SPI6_S: SPI6_S::steal(),
            SYSCFG: SYSCFG::steal(),
            SYSCFG_S: SYSCFG_S::steal(),
            TAMP: TAMP::steal(),
            TAMP_S: TAMP_S::steal(),
            TIM1: TIM1::steal(),
            TIM1_S: TIM1_S::steal(),
            TIM2: TIM2::steal(),
            TIM2_S: TIM2_S::steal(),
            TIM3: TIM3::steal(),
            TIM3_S: TIM3_S::steal(),
            TIM4: TIM4::steal(),
            TIM4_S: TIM4_S::steal(),
            TIM5: TIM5::steal(),
            TIM5_S: TIM5_S::steal(),
            TIM6: TIM6::steal(),
            TIM6_S: TIM6_S::steal(),
            TIM7: TIM7::steal(),
            TIM7_S: TIM7_S::steal(),
            TIM8: TIM8::steal(),
            TIM8_S: TIM8_S::steal(),
            TIM9: TIM9::steal(),
            TIM9_S: TIM9_S::steal(),
            TIM10: TIM10::steal(),
            TIM10_S: TIM10_S::steal(),
            TIM11: TIM11::steal(),
            TIM11_S: TIM11_S::steal(),
            TIM12: TIM12::steal(),
            TIM12_S: TIM12_S::steal(),
            TIM13: TIM13::steal(),
            TIM13_S: TIM13_S::steal(),
            TIM14: TIM14::steal(),
            TIM14_S: TIM14_S::steal(),
            TIM15: TIM15::steal(),
            TIM15_S: TIM15_S::steal(),
            TIM16: TIM16::steal(),
            TIM16_S: TIM16_S::steal(),
            TIM17: TIM17::steal(),
            TIM17_S: TIM17_S::steal(),
            TIM18: TIM18::steal(),
            TIM18_S: TIM18_S::steal(),
            UCPD: UCPD::steal(),
            UCPD_S: UCPD_S::steal(),
            USART1: USART1::steal(),
            USART1_S: USART1_S::steal(),
            USART2: USART2::steal(),
            USART2_S: USART2_S::steal(),
            USART3: USART3::steal(),
            USART3_S: USART3_S::steal(),
            UART4: UART4::steal(),
            UART4_S: UART4_S::steal(),
            UART5: UART5::steal(),
            UART5_S: UART5_S::steal(),
            USART6: USART6::steal(),
            USART6_S: USART6_S::steal(),
            UART7: UART7::steal(),
            UART7_S: UART7_S::steal(),
            UART8: UART8::steal(),
            UART8_S: UART8_S::steal(),
            UART9: UART9::steal(),
            UART9_S: UART9_S::steal(),
            USART10: USART10::steal(),
            USART10_S: USART10_S::steal(),
            VENC: VENC::steal(),
            VENC_S: VENC_S::steal(),
            VREFBUF: VREFBUF::steal(),
            VREFBUF_S: VREFBUF_S::steal(),
            WWDG: WWDG::steal(),
            WWDG_S: WWDG_S::steal(),
            XSPIM: XSPIM::steal(),
            XSPIM_S: XSPIM_S::steal(),
            XSPI1: XSPI1::steal(),
            XSPI1_S: XSPI1_S::steal(),
            XSPI2: XSPI2::steal(),
            XSPI2_S: XSPI2_S::steal(),
            XSPI3: XSPI3::steal(),
            XSPI3_S: XSPI3_S::steal(),
        }
    }
}
