///Register `CONF` reader
pub type R = crate::R<CONFrs>;
///Register `CONF` writer
pub type W = crate::W<CONFrs>;
///Field `CONT` reader - CONT: regular sequence runs continuously when ADC mode is enabled: 0: enable the single conversion: when the sequence is over, the conversion stops 1: enable the continuous conversion: when the sequence is over, the sequence starts again until the software sets the CTRL.STOP_OP_MODE bit.
pub type CONT_R = crate::BitReader;
///Field `CONT` writer - CONT: regular sequence runs continuously when ADC mode is enabled: 0: enable the single conversion: when the sequence is over, the conversion stops 1: enable the continuous conversion: when the sequence is over, the sequence starts again until the software sets the CTRL.STOP_OP_MODE bit.
pub type CONT_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `SEQUENCE` reader - SEQUENCE: enable the sequence mode (active by default): 0: sequence mode is disabled, only SEQ0 is selected 1: sequence mode is enabled, conversions from SEQ0 to SEQx with x=SEQ_LEN Note: clearing this bit is equivalent to SEQUENCE=1 and SEQ_LEN=0000. Ideally, this bit can be kept high as redundant with keeping high and setting SEQ_LEN=0000.
pub type SEQUENCE_R = crate::BitReader;
///Field `SEQUENCE` writer - SEQUENCE: enable the sequence mode (active by default): 0: sequence mode is disabled, only SEQ0 is selected 1: sequence mode is enabled, conversions from SEQ0 to SEQx with x=SEQ_LEN Note: clearing this bit is equivalent to SEQUENCE=1 and SEQ_LEN=0000. Ideally, this bit can be kept high as redundant with keeping high and setting SEQ_LEN=0000.
pub type SEQUENCE_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `SEQ_LEN` reader - SEQ_LEN\[3:0\]: number of conversions in a regular sequence: 0000: 1 conversion, starting from SEQ0 0001: 2 conversions, starting from SEQ0 ... 1111: 16 conversions, starting from SEQ0
pub type SEQ_LEN_R = crate::FieldReader;
///Field `SEQ_LEN` writer - SEQ_LEN\[3:0\]: number of conversions in a regular sequence: 0000: 1 conversion, starting from SEQ0 0001: 2 conversions, starting from SEQ0 ... 1111: 16 conversions, starting from SEQ0
pub type SEQ_LEN_W<'a, REG> = crate::FieldWriter<'a, REG, 4>;
///Field `SMPS_SYNCHRO_ENA` reader - SMPS_SYNCHRO_ENA: synchronize the ADC start conversion with a pulse generated by the SMPS: 0: SMPS synchronization is disabled for all ADC clock frequencies 1: SMPS synchronization is enabled (only when ADC clock is 8 MHz or 16 MHz) Note: SMPS_SYNCHRO_ENA must be 0 when the ADC analog clock is 32 MHz or when PWRC_CR5.NOSMPS = 1.
pub type SMPS_SYNCHRO_ENA_R = crate::BitReader;
///Field `SMPS_SYNCHRO_ENA` writer - SMPS_SYNCHRO_ENA: synchronize the ADC start conversion with a pulse generated by the SMPS: 0: SMPS synchronization is disabled for all ADC clock frequencies 1: SMPS synchronization is enabled (only when ADC clock is 8 MHz or 16 MHz) Note: SMPS_SYNCHRO_ENA must be 0 when the ADC analog clock is 32 MHz or when PWRC_CR5.NOSMPS = 1.
pub type SMPS_SYNCHRO_ENA_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `SAMPLE_RATE_LSB` reader - SAMPLE_RATE_LSB: Sample Rate LSB This field is an extension of SAMPLE_RATE definition in bits 12,11 of CONF register. It impacts the conversion rate of ADC (F_ADC). See SAMPLE_RATE bits for the full description. When this field is set to a value different than 0, SMPS synchronization is not feasible. This value is hidden to the user
pub type SAMPLE_RATE_LSB_R = crate::FieldReader;
///Field `SAMPLE_RATE_LSB` writer - SAMPLE_RATE_LSB: Sample Rate LSB This field is an extension of SAMPLE_RATE definition in bits 12,11 of CONF register. It impacts the conversion rate of ADC (F_ADC). See SAMPLE_RATE bits for the full description. When this field is set to a value different than 0, SMPS synchronization is not feasible. This value is hidden to the user
pub type SAMPLE_RATE_LSB_W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
///Field `SAMPLE_RATE` reader - SAMPLE_RATE\[1:0\]: conversion rate of ADC (F_ADC): F_ADC = F_ADC_CLK/(16 + 16*SAMPLE_RATE_MSB + 4*SAMPLE_RATE + SAMPLE_RATE_LSB),where F_ADC_CLK is the analog ADC clock frequency. By default F_ADC_CLK is 16MHz frequency.
pub type SAMPLE_RATE_R = crate::FieldReader;
///Field `SAMPLE_RATE` writer - SAMPLE_RATE\[1:0\]: conversion rate of ADC (F_ADC): F_ADC = F_ADC_CLK/(16 + 16*SAMPLE_RATE_MSB + 4*SAMPLE_RATE + SAMPLE_RATE_LSB),where F_ADC_CLK is the analog ADC clock frequency. By default F_ADC_CLK is 16MHz frequency.
pub type SAMPLE_RATE_W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
///Field `DMA_DS_ENA` reader - DMA_DS_EN: enable the DMA mode for the Down Sampler data path: 0: DMA mode is disabled 1: DMA mode is enabled
pub type DMA_DS_ENA_R = crate::BitReader;
///Field `DMA_DS_ENA` writer - DMA_DS_EN: enable the DMA mode for the Down Sampler data path: 0: DMA mode is disabled 1: DMA mode is enabled
pub type DMA_DS_ENA_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `OVR_DS_CFG` reader - OVR_DS_CFG: Down Sampler overrun configuration: 0: the previous data is kept, the new one is lost 1: the previous data is lost, the new one is kept
pub type OVR_DS_CFG_R = crate::BitReader;
///Field `OVR_DS_CFG` writer - OVR_DS_CFG: Down Sampler overrun configuration: 0: the previous data is kept, the new one is lost 1: the previous data is lost, the new one is kept
pub type OVR_DS_CFG_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `BIT_INVERT_SN` reader - BIT_INVERT_SN: invert bit to bit the ADC data output (1's complement) when a single negative input is connected to the ADC: 0: no inversion (default) 1: enable the inversion
pub type BIT_INVERT_SN_R = crate::BitReader;
///Field `BIT_INVERT_SN` writer - BIT_INVERT_SN: invert bit to bit the ADC data output (1's complement) when a single negative input is connected to the ADC: 0: no inversion (default) 1: enable the inversion
pub type BIT_INVERT_SN_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `BIT_INVERT_DIFF` reader - BIT_INVERT_DIFF: invert bit to bit the ADC data output (1's complement) when a differential input is connected to the ADC: 0: no inversion (default) 1: enable the inversion
pub type BIT_INVERT_DIFF_R = crate::BitReader;
///Field `BIT_INVERT_DIFF` writer - BIT_INVERT_DIFF: invert bit to bit the ADC data output (1's complement) when a differential input is connected to the ADC: 0: no inversion (default) 1: enable the inversion
pub type BIT_INVERT_DIFF_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `ADC_CONT_1V2` reader - ADC_CONT_1V2: select the input sampling method: 0: sampling only at conversion start (default) 1: sampling starts at the end of conversion
pub type ADC_CONT_1V2_R = crate::BitReader;
///Field `ADC_CONT_1V2` writer - ADC_CONT_1V2: select the input sampling method: 0: sampling only at conversion start (default) 1: sampling starts at the end of conversion
pub type ADC_CONT_1V2_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `SAMPLE_RATE_MSB` reader - SAMPLE_RATE_MSB: Sample Rate MSB This field is an extension of SAMPLE_RATE definition in bits 12,11 of CONF register. It impacts the conversion rate of ADC (F_ADC). See SAMPLE_RATE bits for the full description
pub type SAMPLE_RATE_MSB_R = crate::FieldReader;
///Field `SAMPLE_RATE_MSB` writer - SAMPLE_RATE_MSB: Sample Rate MSB This field is an extension of SAMPLE_RATE definition in bits 12,11 of CONF register. It impacts the conversion rate of ADC (F_ADC). See SAMPLE_RATE bits for the full description
pub type SAMPLE_RATE_MSB_W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
impl R {
    ///Bit 0 - CONT: regular sequence runs continuously when ADC mode is enabled: 0: enable the single conversion: when the sequence is over, the conversion stops 1: enable the continuous conversion: when the sequence is over, the sequence starts again until the software sets the CTRL.STOP_OP_MODE bit.
    #[inline(always)]
    pub fn cont(&self) -> CONT_R {
        CONT_R::new((self.bits & 1) != 0)
    }
    ///Bit 1 - SEQUENCE: enable the sequence mode (active by default): 0: sequence mode is disabled, only SEQ0 is selected 1: sequence mode is enabled, conversions from SEQ0 to SEQx with x=SEQ_LEN Note: clearing this bit is equivalent to SEQUENCE=1 and SEQ_LEN=0000. Ideally, this bit can be kept high as redundant with keeping high and setting SEQ_LEN=0000.
    #[inline(always)]
    pub fn sequence(&self) -> SEQUENCE_R {
        SEQUENCE_R::new(((self.bits >> 1) & 1) != 0)
    }
    ///Bits 2:5 - SEQ_LEN\[3:0\]: number of conversions in a regular sequence: 0000: 1 conversion, starting from SEQ0 0001: 2 conversions, starting from SEQ0 ... 1111: 16 conversions, starting from SEQ0
    #[inline(always)]
    pub fn seq_len(&self) -> SEQ_LEN_R {
        SEQ_LEN_R::new(((self.bits >> 2) & 0x0f) as u8)
    }
    ///Bit 6 - SMPS_SYNCHRO_ENA: synchronize the ADC start conversion with a pulse generated by the SMPS: 0: SMPS synchronization is disabled for all ADC clock frequencies 1: SMPS synchronization is enabled (only when ADC clock is 8 MHz or 16 MHz) Note: SMPS_SYNCHRO_ENA must be 0 when the ADC analog clock is 32 MHz or when PWRC_CR5.NOSMPS = 1.
    #[inline(always)]
    pub fn smps_synchro_ena(&self) -> SMPS_SYNCHRO_ENA_R {
        SMPS_SYNCHRO_ENA_R::new(((self.bits >> 6) & 1) != 0)
    }
    ///Bits 9:10 - SAMPLE_RATE_LSB: Sample Rate LSB This field is an extension of SAMPLE_RATE definition in bits 12,11 of CONF register. It impacts the conversion rate of ADC (F_ADC). See SAMPLE_RATE bits for the full description. When this field is set to a value different than 0, SMPS synchronization is not feasible. This value is hidden to the user
    #[inline(always)]
    pub fn sample_rate_lsb(&self) -> SAMPLE_RATE_LSB_R {
        SAMPLE_RATE_LSB_R::new(((self.bits >> 9) & 3) as u8)
    }
    ///Bits 11:12 - SAMPLE_RATE\[1:0\]: conversion rate of ADC (F_ADC): F_ADC = F_ADC_CLK/(16 + 16*SAMPLE_RATE_MSB + 4*SAMPLE_RATE + SAMPLE_RATE_LSB),where F_ADC_CLK is the analog ADC clock frequency. By default F_ADC_CLK is 16MHz frequency.
    #[inline(always)]
    pub fn sample_rate(&self) -> SAMPLE_RATE_R {
        SAMPLE_RATE_R::new(((self.bits >> 11) & 3) as u8)
    }
    ///Bit 13 - DMA_DS_EN: enable the DMA mode for the Down Sampler data path: 0: DMA mode is disabled 1: DMA mode is enabled
    #[inline(always)]
    pub fn dma_ds_ena(&self) -> DMA_DS_ENA_R {
        DMA_DS_ENA_R::new(((self.bits >> 13) & 1) != 0)
    }
    ///Bit 15 - OVR_DS_CFG: Down Sampler overrun configuration: 0: the previous data is kept, the new one is lost 1: the previous data is lost, the new one is kept
    #[inline(always)]
    pub fn ovr_ds_cfg(&self) -> OVR_DS_CFG_R {
        OVR_DS_CFG_R::new(((self.bits >> 15) & 1) != 0)
    }
    ///Bit 17 - BIT_INVERT_SN: invert bit to bit the ADC data output (1's complement) when a single negative input is connected to the ADC: 0: no inversion (default) 1: enable the inversion
    #[inline(always)]
    pub fn bit_invert_sn(&self) -> BIT_INVERT_SN_R {
        BIT_INVERT_SN_R::new(((self.bits >> 17) & 1) != 0)
    }
    ///Bit 18 - BIT_INVERT_DIFF: invert bit to bit the ADC data output (1's complement) when a differential input is connected to the ADC: 0: no inversion (default) 1: enable the inversion
    #[inline(always)]
    pub fn bit_invert_diff(&self) -> BIT_INVERT_DIFF_R {
        BIT_INVERT_DIFF_R::new(((self.bits >> 18) & 1) != 0)
    }
    ///Bit 19 - ADC_CONT_1V2: select the input sampling method: 0: sampling only at conversion start (default) 1: sampling starts at the end of conversion
    #[inline(always)]
    pub fn adc_cont_1v2(&self) -> ADC_CONT_1V2_R {
        ADC_CONT_1V2_R::new(((self.bits >> 19) & 1) != 0)
    }
    ///Bits 21:23 - SAMPLE_RATE_MSB: Sample Rate MSB This field is an extension of SAMPLE_RATE definition in bits 12,11 of CONF register. It impacts the conversion rate of ADC (F_ADC). See SAMPLE_RATE bits for the full description
    #[inline(always)]
    pub fn sample_rate_msb(&self) -> SAMPLE_RATE_MSB_R {
        SAMPLE_RATE_MSB_R::new(((self.bits >> 21) & 7) as u8)
    }
}
impl core::fmt::Debug for R {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CONF")
            .field("cont", &self.cont())
            .field("sequence", &self.sequence())
            .field("seq_len", &self.seq_len())
            .field("smps_synchro_ena", &self.smps_synchro_ena())
            .field("sample_rate_lsb", &self.sample_rate_lsb())
            .field("sample_rate", &self.sample_rate())
            .field("dma_ds_ena", &self.dma_ds_ena())
            .field("ovr_ds_cfg", &self.ovr_ds_cfg())
            .field("bit_invert_sn", &self.bit_invert_sn())
            .field("bit_invert_diff", &self.bit_invert_diff())
            .field("adc_cont_1v2", &self.adc_cont_1v2())
            .field("sample_rate_msb", &self.sample_rate_msb())
            .finish()
    }
}
impl W {
    ///Bit 0 - CONT: regular sequence runs continuously when ADC mode is enabled: 0: enable the single conversion: when the sequence is over, the conversion stops 1: enable the continuous conversion: when the sequence is over, the sequence starts again until the software sets the CTRL.STOP_OP_MODE bit.
    #[inline(always)]
    pub fn cont(&mut self) -> CONT_W<CONFrs> {
        CONT_W::new(self, 0)
    }
    ///Bit 1 - SEQUENCE: enable the sequence mode (active by default): 0: sequence mode is disabled, only SEQ0 is selected 1: sequence mode is enabled, conversions from SEQ0 to SEQx with x=SEQ_LEN Note: clearing this bit is equivalent to SEQUENCE=1 and SEQ_LEN=0000. Ideally, this bit can be kept high as redundant with keeping high and setting SEQ_LEN=0000.
    #[inline(always)]
    pub fn sequence(&mut self) -> SEQUENCE_W<CONFrs> {
        SEQUENCE_W::new(self, 1)
    }
    ///Bits 2:5 - SEQ_LEN\[3:0\]: number of conversions in a regular sequence: 0000: 1 conversion, starting from SEQ0 0001: 2 conversions, starting from SEQ0 ... 1111: 16 conversions, starting from SEQ0
    #[inline(always)]
    pub fn seq_len(&mut self) -> SEQ_LEN_W<CONFrs> {
        SEQ_LEN_W::new(self, 2)
    }
    ///Bit 6 - SMPS_SYNCHRO_ENA: synchronize the ADC start conversion with a pulse generated by the SMPS: 0: SMPS synchronization is disabled for all ADC clock frequencies 1: SMPS synchronization is enabled (only when ADC clock is 8 MHz or 16 MHz) Note: SMPS_SYNCHRO_ENA must be 0 when the ADC analog clock is 32 MHz or when PWRC_CR5.NOSMPS = 1.
    #[inline(always)]
    pub fn smps_synchro_ena(&mut self) -> SMPS_SYNCHRO_ENA_W<CONFrs> {
        SMPS_SYNCHRO_ENA_W::new(self, 6)
    }
    ///Bits 9:10 - SAMPLE_RATE_LSB: Sample Rate LSB This field is an extension of SAMPLE_RATE definition in bits 12,11 of CONF register. It impacts the conversion rate of ADC (F_ADC). See SAMPLE_RATE bits for the full description. When this field is set to a value different than 0, SMPS synchronization is not feasible. This value is hidden to the user
    #[inline(always)]
    pub fn sample_rate_lsb(&mut self) -> SAMPLE_RATE_LSB_W<CONFrs> {
        SAMPLE_RATE_LSB_W::new(self, 9)
    }
    ///Bits 11:12 - SAMPLE_RATE\[1:0\]: conversion rate of ADC (F_ADC): F_ADC = F_ADC_CLK/(16 + 16*SAMPLE_RATE_MSB + 4*SAMPLE_RATE + SAMPLE_RATE_LSB),where F_ADC_CLK is the analog ADC clock frequency. By default F_ADC_CLK is 16MHz frequency.
    #[inline(always)]
    pub fn sample_rate(&mut self) -> SAMPLE_RATE_W<CONFrs> {
        SAMPLE_RATE_W::new(self, 11)
    }
    ///Bit 13 - DMA_DS_EN: enable the DMA mode for the Down Sampler data path: 0: DMA mode is disabled 1: DMA mode is enabled
    #[inline(always)]
    pub fn dma_ds_ena(&mut self) -> DMA_DS_ENA_W<CONFrs> {
        DMA_DS_ENA_W::new(self, 13)
    }
    ///Bit 15 - OVR_DS_CFG: Down Sampler overrun configuration: 0: the previous data is kept, the new one is lost 1: the previous data is lost, the new one is kept
    #[inline(always)]
    pub fn ovr_ds_cfg(&mut self) -> OVR_DS_CFG_W<CONFrs> {
        OVR_DS_CFG_W::new(self, 15)
    }
    ///Bit 17 - BIT_INVERT_SN: invert bit to bit the ADC data output (1's complement) when a single negative input is connected to the ADC: 0: no inversion (default) 1: enable the inversion
    #[inline(always)]
    pub fn bit_invert_sn(&mut self) -> BIT_INVERT_SN_W<CONFrs> {
        BIT_INVERT_SN_W::new(self, 17)
    }
    ///Bit 18 - BIT_INVERT_DIFF: invert bit to bit the ADC data output (1's complement) when a differential input is connected to the ADC: 0: no inversion (default) 1: enable the inversion
    #[inline(always)]
    pub fn bit_invert_diff(&mut self) -> BIT_INVERT_DIFF_W<CONFrs> {
        BIT_INVERT_DIFF_W::new(self, 18)
    }
    ///Bit 19 - ADC_CONT_1V2: select the input sampling method: 0: sampling only at conversion start (default) 1: sampling starts at the end of conversion
    #[inline(always)]
    pub fn adc_cont_1v2(&mut self) -> ADC_CONT_1V2_W<CONFrs> {
        ADC_CONT_1V2_W::new(self, 19)
    }
    ///Bits 21:23 - SAMPLE_RATE_MSB: Sample Rate MSB This field is an extension of SAMPLE_RATE definition in bits 12,11 of CONF register. It impacts the conversion rate of ADC (F_ADC). See SAMPLE_RATE bits for the full description
    #[inline(always)]
    pub fn sample_rate_msb(&mut self) -> SAMPLE_RATE_MSB_W<CONFrs> {
        SAMPLE_RATE_MSB_W::new(self, 21)
    }
}
/**CONF register

You can [`read`](crate::Reg::read) this register and get [`conf::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`conf::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).

See register [structure](https://stm32-rs.github.io/stm32-rs/STM32WB05.html#ADC:CONF)*/
pub struct CONFrs;
impl crate::RegisterSpec for CONFrs {
    type Ux = u32;
}
///`read()` method returns [`conf::R`](R) reader structure
impl crate::Readable for CONFrs {}
///`write(|w| ..)` method takes [`conf::W`](W) writer structure
impl crate::Writable for CONFrs {
    type Safety = crate::Unsafe;
}
///`reset()` method sets CONF to value 0x0002_0002
impl crate::Resettable for CONFrs {
    const RESET_VALUE: u32 = 0x0002_0002;
}
