///Register `CONF` reader
pub type R = crate::R<CONFrs>;
///Register `CONF` writer
pub type W = crate::W<CONFrs>;
///Field `CONT` reader - regular sequence runs continuously when ADC mode is enabled
pub type CONT_R = crate::BitReader;
///Field `CONT` writer - regular sequence runs continuously when ADC mode is enabled
pub type CONT_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `SEQUENCE` reader - enable the sequence mode (active by default)
pub type SEQUENCE_R = crate::BitReader;
///Field `SEQUENCE` writer - enable the sequence mode (active by default)
pub type SEQUENCE_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `SEQ_LEN` reader - number of conversions in a regular sequence
pub type SEQ_LEN_R = crate::FieldReader;
///Field `SEQ_LEN` writer - number of conversions in a regular sequence
pub type SEQ_LEN_W<'a, REG> = crate::FieldWriter<'a, REG, 4>;
///Field `SMPS_SYNCHRO_ENA` reader - synchronize the ADC start conversion with a pulse generated by the
pub type SMPS_SYNCHRO_ENA_R = crate::BitReader;
///Field `SMPS_SYNCHRO_ENA` writer - synchronize the ADC start conversion with a pulse generated by the
pub type SMPS_SYNCHRO_ENA_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `OP_MODE` reader - ADC mode selection (= data path selection)
pub type OP_MODE_R = crate::FieldReader;
///Field `OP_MODE` writer - ADC mode selection (= data path selection)
pub type OP_MODE_W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
///Field `SAMPLE_RATE` reader - conversion rate of ADC
pub type SAMPLE_RATE_R = crate::FieldReader;
///Field `SAMPLE_RATE` writer - conversion rate of ADC
pub type SAMPLE_RATE_W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
///Field `DMA_DS_ENA` reader - enable DMA mode for Down Sampler data path
pub type DMA_DS_ENA_R = crate::BitReader;
///Field `DMA_DS_ENA` writer - enable DMA mode for Down Sampler data path
pub type DMA_DS_ENA_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `DMA_DF_ENA` reader - enable DMA mode for Decimation Filter data path
pub type DMA_DF_ENA_R = crate::BitReader;
///Field `DMA_DF_ENA` writer - enable DMA mode for Decimation Filter data path
pub type DMA_DF_ENA_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `OVR_DS_CFG` reader - Down Sampler overrun configuration
pub type OVR_DS_CFG_R = crate::BitReader;
///Field `OVR_DS_CFG` writer - Down Sampler overrun configuration
pub type OVR_DS_CFG_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `OVR_DF_CFG` reader - decimation overrun configuration
pub type OVR_DF_CFG_R = crate::BitReader;
///Field `OVR_DF_CFG` writer - decimation overrun configuration
pub type OVR_DF_CFG_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `BIT_INVERT_SN` reader - invert bit to bit the ADC data output when a single
pub type BIT_INVERT_SN_R = crate::BitReader;
///Field `BIT_INVERT_SN` writer - invert bit to bit the ADC data output when a single
pub type BIT_INVERT_SN_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `BIT_INVERT_DIFF` reader - invert bit to bit the ADC data output when a differential
pub type BIT_INVERT_DIFF_R = crate::BitReader;
///Field `BIT_INVERT_DIFF` writer - invert bit to bit the ADC data output when a differential
pub type BIT_INVERT_DIFF_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `ADC_CONT_1V2` reader - select the input sampling method
pub type ADC_CONT_1V2_R = crate::BitReader;
///Field `ADC_CONT_1V2` writer - select the input sampling method
pub type ADC_CONT_1V2_W<'a, REG> = crate::BitWriter<'a, REG>;
///Field `VBIAS_PRECH_FORCE` reader - possibility to keep the VBIAS_PRECH enabled to deactivate the filter
pub type VBIAS_PRECH_FORCE_R = crate::BitReader;
///Field `VBIAS_PRECH_FORCE` writer - possibility to keep the VBIAS_PRECH enabled to deactivate the filter
pub type VBIAS_PRECH_FORCE_W<'a, REG> = crate::BitWriter<'a, REG>;
impl R {
    ///Bit 0 - regular sequence runs continuously when ADC mode is enabled
    #[inline(always)]
    pub fn cont(&self) -> CONT_R {
        CONT_R::new((self.bits & 1) != 0)
    }
    ///Bit 1 - enable the sequence mode (active by default)
    #[inline(always)]
    pub fn sequence(&self) -> SEQUENCE_R {
        SEQUENCE_R::new(((self.bits >> 1) & 1) != 0)
    }
    ///Bits 2:5 - number of conversions in a regular sequence
    #[inline(always)]
    pub fn seq_len(&self) -> SEQ_LEN_R {
        SEQ_LEN_R::new(((self.bits >> 2) & 0x0f) as u8)
    }
    ///Bit 6 - synchronize the ADC start conversion with a pulse generated by the
    #[inline(always)]
    pub fn smps_synchro_ena(&self) -> SMPS_SYNCHRO_ENA_R {
        SMPS_SYNCHRO_ENA_R::new(((self.bits >> 6) & 1) != 0)
    }
    ///Bits 7:8 - ADC mode selection (= data path selection)
    #[inline(always)]
    pub fn op_mode(&self) -> OP_MODE_R {
        OP_MODE_R::new(((self.bits >> 7) & 3) as u8)
    }
    ///Bits 11:12 - conversion rate of ADC
    #[inline(always)]
    pub fn sample_rate(&self) -> SAMPLE_RATE_R {
        SAMPLE_RATE_R::new(((self.bits >> 11) & 3) as u8)
    }
    ///Bit 13 - enable DMA mode for Down Sampler data path
    #[inline(always)]
    pub fn dma_ds_ena(&self) -> DMA_DS_ENA_R {
        DMA_DS_ENA_R::new(((self.bits >> 13) & 1) != 0)
    }
    ///Bit 14 - enable DMA mode for Decimation Filter data path
    #[inline(always)]
    pub fn dma_df_ena(&self) -> DMA_DF_ENA_R {
        DMA_DF_ENA_R::new(((self.bits >> 14) & 1) != 0)
    }
    ///Bit 15 - Down Sampler overrun configuration
    #[inline(always)]
    pub fn ovr_ds_cfg(&self) -> OVR_DS_CFG_R {
        OVR_DS_CFG_R::new(((self.bits >> 15) & 1) != 0)
    }
    ///Bit 16 - decimation overrun configuration
    #[inline(always)]
    pub fn ovr_df_cfg(&self) -> OVR_DF_CFG_R {
        OVR_DF_CFG_R::new(((self.bits >> 16) & 1) != 0)
    }
    ///Bit 17 - invert bit to bit the ADC data output when a single
    #[inline(always)]
    pub fn bit_invert_sn(&self) -> BIT_INVERT_SN_R {
        BIT_INVERT_SN_R::new(((self.bits >> 17) & 1) != 0)
    }
    ///Bit 18 - invert bit to bit the ADC data output when a differential
    #[inline(always)]
    pub fn bit_invert_diff(&self) -> BIT_INVERT_DIFF_R {
        BIT_INVERT_DIFF_R::new(((self.bits >> 18) & 1) != 0)
    }
    ///Bit 19 - select the input sampling method
    #[inline(always)]
    pub fn adc_cont_1v2(&self) -> ADC_CONT_1V2_R {
        ADC_CONT_1V2_R::new(((self.bits >> 19) & 1) != 0)
    }
    ///Bit 20 - possibility to keep the VBIAS_PRECH enabled to deactivate the filter
    #[inline(always)]
    pub fn vbias_prech_force(&self) -> VBIAS_PRECH_FORCE_R {
        VBIAS_PRECH_FORCE_R::new(((self.bits >> 20) & 1) != 0)
    }
}
impl core::fmt::Debug for R {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CONF")
            .field("vbias_prech_force", &self.vbias_prech_force())
            .field("adc_cont_1v2", &self.adc_cont_1v2())
            .field("bit_invert_diff", &self.bit_invert_diff())
            .field("bit_invert_sn", &self.bit_invert_sn())
            .field("ovr_df_cfg", &self.ovr_df_cfg())
            .field("ovr_ds_cfg", &self.ovr_ds_cfg())
            .field("dma_df_ena", &self.dma_df_ena())
            .field("dma_ds_ena", &self.dma_ds_ena())
            .field("sample_rate", &self.sample_rate())
            .field("op_mode", &self.op_mode())
            .field("smps_synchro_ena", &self.smps_synchro_ena())
            .field("seq_len", &self.seq_len())
            .field("sequence", &self.sequence())
            .field("cont", &self.cont())
            .finish()
    }
}
impl W {
    ///Bit 0 - regular sequence runs continuously when ADC mode is enabled
    #[inline(always)]
    pub fn cont(&mut self) -> CONT_W<CONFrs> {
        CONT_W::new(self, 0)
    }
    ///Bit 1 - enable the sequence mode (active by default)
    #[inline(always)]
    pub fn sequence(&mut self) -> SEQUENCE_W<CONFrs> {
        SEQUENCE_W::new(self, 1)
    }
    ///Bits 2:5 - number of conversions in a regular sequence
    #[inline(always)]
    pub fn seq_len(&mut self) -> SEQ_LEN_W<CONFrs> {
        SEQ_LEN_W::new(self, 2)
    }
    ///Bit 6 - synchronize the ADC start conversion with a pulse generated by the
    #[inline(always)]
    pub fn smps_synchro_ena(&mut self) -> SMPS_SYNCHRO_ENA_W<CONFrs> {
        SMPS_SYNCHRO_ENA_W::new(self, 6)
    }
    ///Bits 7:8 - ADC mode selection (= data path selection)
    #[inline(always)]
    pub fn op_mode(&mut self) -> OP_MODE_W<CONFrs> {
        OP_MODE_W::new(self, 7)
    }
    ///Bits 11:12 - conversion rate of ADC
    #[inline(always)]
    pub fn sample_rate(&mut self) -> SAMPLE_RATE_W<CONFrs> {
        SAMPLE_RATE_W::new(self, 11)
    }
    ///Bit 13 - enable DMA mode for Down Sampler data path
    #[inline(always)]
    pub fn dma_ds_ena(&mut self) -> DMA_DS_ENA_W<CONFrs> {
        DMA_DS_ENA_W::new(self, 13)
    }
    ///Bit 14 - enable DMA mode for Decimation Filter data path
    #[inline(always)]
    pub fn dma_df_ena(&mut self) -> DMA_DF_ENA_W<CONFrs> {
        DMA_DF_ENA_W::new(self, 14)
    }
    ///Bit 15 - Down Sampler overrun configuration
    #[inline(always)]
    pub fn ovr_ds_cfg(&mut self) -> OVR_DS_CFG_W<CONFrs> {
        OVR_DS_CFG_W::new(self, 15)
    }
    ///Bit 16 - decimation overrun configuration
    #[inline(always)]
    pub fn ovr_df_cfg(&mut self) -> OVR_DF_CFG_W<CONFrs> {
        OVR_DF_CFG_W::new(self, 16)
    }
    ///Bit 17 - invert bit to bit the ADC data output when a single
    #[inline(always)]
    pub fn bit_invert_sn(&mut self) -> BIT_INVERT_SN_W<CONFrs> {
        BIT_INVERT_SN_W::new(self, 17)
    }
    ///Bit 18 - invert bit to bit the ADC data output when a differential
    #[inline(always)]
    pub fn bit_invert_diff(&mut self) -> BIT_INVERT_DIFF_W<CONFrs> {
        BIT_INVERT_DIFF_W::new(self, 18)
    }
    ///Bit 19 - select the input sampling method
    #[inline(always)]
    pub fn adc_cont_1v2(&mut self) -> ADC_CONT_1V2_W<CONFrs> {
        ADC_CONT_1V2_W::new(self, 19)
    }
    ///Bit 20 - possibility to keep the VBIAS_PRECH enabled to deactivate the filter
    #[inline(always)]
    pub fn vbias_prech_force(&mut self) -> VBIAS_PRECH_FORCE_W<CONFrs> {
        VBIAS_PRECH_FORCE_W::new(self, 20)
    }
}
/**ADC configuration register

You can [`read`](crate::Reg::read) this register and get [`conf::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`conf::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).

See register [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#ADC:CONF)*/
pub struct CONFrs;
impl crate::RegisterSpec for CONFrs {
    type Ux = u32;
}
///`read()` method returns [`conf::R`](R) reader structure
impl crate::Readable for CONFrs {}
///`write(|w| ..)` method takes [`conf::W`](W) writer structure
impl crate::Writable for CONFrs {
    type Safety = crate::Unsafe;
}
///`reset()` method sets CONF to value 0x0002_0002
impl crate::Resettable for CONFrs {
    const RESET_VALUE: u32 = 0x0002_0002;
}
