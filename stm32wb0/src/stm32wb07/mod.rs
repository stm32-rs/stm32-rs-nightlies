/*!Peripheral access API for STM32WB07 microcontrollers (generated using svd2rust v0.36.1 (4052ce6 2025-04-04))

You can find an overview of the generated API [here].

API features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.

[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api
[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased
[repository]: https://github.com/rust-embedded/svd2rust*/
///Number available in the NVIC for configuring priority
pub const NVIC_PRIO_BITS: u8 = 2;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn FLASH();
    fn RCC();
    fn BATTERY();
    fn I2C1();
    fn I2C2();
    fn SPI1();
    fn SPI2();
    fn SPI3();
    fn USART();
    fn LPUART();
    fn TIM1();
    fn RTC();
    fn ADC();
    fn PKA();
    fn GPIOA();
    fn GPIOB();
    fn DMA();
    fn BLE_TX_RX_IRQN();
    fn RADIO_ERROR();
    fn RADIO_CPU_WKUP();
    fn RADIO_TXRX_WKUP();
    fn RADIO_TXRX_SEQ();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 26] = [
    Vector { _handler: FLASH },
    Vector { _handler: RCC },
    Vector { _handler: BATTERY },
    Vector { _handler: I2C1 },
    Vector { _handler: I2C2 },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: SPI3 },
    Vector { _handler: USART },
    Vector { _handler: LPUART },
    Vector { _handler: TIM1 },
    Vector { _handler: RTC },
    Vector { _handler: ADC },
    Vector { _handler: PKA },
    Vector { _reserved: 0 },
    Vector { _handler: GPIOA },
    Vector { _handler: GPIOB },
    Vector { _handler: DMA },
    Vector {
        _handler: BLE_TX_RX_IRQN,
    },
    Vector { _reserved: 0 },
    Vector {
        _handler: RADIO_ERROR,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: RADIO_CPU_WKUP,
    },
    Vector {
        _handler: RADIO_TXRX_WKUP,
    },
    Vector {
        _handler: RADIO_TXRX_SEQ,
    },
];
///Enumeration of all the interrupts.
#[cfg_attr(feature = "defmt", derive(defmt::Format))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    ///0 - Non-volatile memory (flash) controller
    FLASH = 0,
    ///1 - Reset and Clock Controller
    RCC = 1,
    ///2 - PVD
    BATTERY = 2,
    ///3 - I2C1 interrupt
    I2C1 = 3,
    ///4 - I2C2 interrupt
    I2C2 = 4,
    ///5 - SPI1 interrupt
    SPI1 = 5,
    ///6 - SPI2 interrupt
    SPI2 = 6,
    ///7 - SPI3 interrupt
    SPI3 = 7,
    ///8 - USART interrupt
    USART = 8,
    ///9 - LPUART interrupt
    LPUART = 9,
    ///10 - TIM1 interrupt
    TIM1 = 10,
    ///11 - RTC interrupt
    RTC = 11,
    ///12 - ADC interrupt
    ADC = 12,
    ///13 - PKA interrupt
    PKA = 13,
    ///15 - GPIOA interrupt
    GPIOA = 15,
    ///16 - GPIOB interrupt
    GPIOB = 16,
    ///17 - DMA interrupt
    DMA = 17,
    ///18 - BLE Tx/Rx interrupt
    BLE_TX_RX_IRQN = 18,
    ///20 - RADIO Error interrupt
    RADIO_ERROR = 20,
    ///23 - RADIO CPU Wakeup interrupt
    RADIO_CPU_WKUP = 23,
    ///24 - RADIO Wakeup interrupt
    RADIO_TXRX_WKUP = 24,
    ///25 - RADIO RX/TX sequence interrupt
    RADIO_TXRX_SEQ = 25,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
///ADC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#ADC)
pub type ADC = crate::Periph<adc::RegisterBlock, 0x4100_6000>;
impl core::fmt::Debug for ADC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC").finish()
    }
}
///ADC address block description
pub mod adc;
///CRC address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#CRC)
pub type CRC = crate::Periph<crc::RegisterBlock, 0x4820_0000>;
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
///CRC address block description
pub mod crc;
///DMA
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#DMA)
pub type DMA = crate::Periph<dma::RegisterBlock, 0x4870_0000>;
impl core::fmt::Debug for DMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMA").finish()
    }
}
///DMA
pub mod dma;
///DMAMUX
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#DMAMUX)
pub type DMAMUX = crate::Periph<dmamux::RegisterBlock, 0x4880_0000>;
impl core::fmt::Debug for DMAMUX {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DMAMUX").finish()
    }
}
///DMAMUX
pub mod dmamux;
///GPIOA address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#GPIOA)
pub type GPIOA = crate::Periph<gpioa::RegisterBlock, 0x4800_0000>;
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
///GPIOA address block description
pub mod gpioa;
///I2C address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#I2C1)
pub type I2C1 = crate::Periph<i2c1::RegisterBlock, 0x4100_0000>;
impl core::fmt::Debug for I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C1").finish()
    }
}
///I2C address block description
pub mod i2c1;
///RCC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#RCC)
pub type RCC = crate::Periph<rcc::RegisterBlock, 0x4840_0000>;
impl core::fmt::Debug for RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC").finish()
    }
}
///RCC
pub mod rcc;
///SPI1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#SPI1)
pub type SPI1 = crate::Periph<spi1::RegisterBlock, 0x4100_2000>;
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
///SPI1
pub mod spi1;
///SPI address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#SPI1)
pub type SPI3 = crate::Periph<spi1::RegisterBlock, 0x4100_7000>;
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
///SPI address block description
pub use self::spi1 as spi3;
///USART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#USART)
pub type USART = crate::Periph<usart::RegisterBlock, 0x4100_4000>;
impl core::fmt::Debug for USART {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART").finish()
    }
}
///USART address block description
pub mod usart;
///BLUE
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#BLUE)
pub type BLUE = crate::Periph<blue::RegisterBlock, 0x6000_0000>;
impl core::fmt::Debug for BLUE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BLUE").finish()
    }
}
///BLUE
pub mod blue;
///GLOBALSTATMACH
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#GLOBALSTATMACH)
pub type GLOBALSTATMACH = crate::Periph<globalstatmach::RegisterBlock, 0x2000_00c0>;
impl core::fmt::Debug for GLOBALSTATMACH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GLOBALSTATMACH").finish()
    }
}
///GLOBALSTATMACH
pub mod globalstatmach;
///RADIO_CONTROL
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#RADIO_CONTROL)
pub type RADIO_CONTROL = crate::Periph<radio_control::RegisterBlock, 0x6000_1000>;
impl core::fmt::Debug for RADIO_CONTROL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RADIO_CONTROL").finish()
    }
}
///RADIO_CONTROL
pub mod radio_control;
///RADIO
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#RADIO)
pub type RADIO = crate::Periph<radio::RegisterBlock, 0x6000_1500>;
impl core::fmt::Debug for RADIO {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RADIO").finish()
    }
}
///RADIO
pub mod radio;
///RRM
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#RRM)
pub type RRM = crate::Periph<rrm::RegisterBlock, 0x6000_1400>;
impl core::fmt::Debug for RRM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RRM").finish()
    }
}
///RRM
pub mod rrm;
///WAKEUP
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#WAKEUP)
pub type WAKEUP = crate::Periph<wakeup::RegisterBlock, 0x6000_1800>;
impl core::fmt::Debug for WAKEUP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WAKEUP").finish()
    }
}
///WAKEUP
pub mod wakeup;
///4kb addressable space
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#FLASH_CTRL)
pub type FLASH_CTRL = crate::Periph<flash_ctrl::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for FLASH_CTRL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH_CTRL").finish()
    }
}
///4kb addressable space
pub mod flash_ctrl;
///RNG
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#RNG)
pub type RNG = crate::Periph<rng::RegisterBlock, 0x4860_0000>;
impl core::fmt::Debug for RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG").finish()
    }
}
///RNG
pub mod rng;
///PWRC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#PWRC)
pub type PWRC = crate::Periph<pwrc::RegisterBlock, 0x4850_0000>;
impl core::fmt::Debug for PWRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWRC").finish()
    }
}
///PWRC
pub mod pwrc;
///PKA
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#PKA)
pub type PKA = crate::Periph<pka::RegisterBlock, 0x4830_0000>;
impl core::fmt::Debug for PKA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PKA").finish()
    }
}
///PKA
pub mod pka;
///GPIOB
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#GPIOB)
pub type GPIOB = crate::Periph<gpiob::RegisterBlock, 0x4810_0000>;
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
///GPIOB
pub mod gpiob;
///LPUART
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#LPUART)
pub type LPUART = crate::Periph<lpuart::RegisterBlock, 0x4100_5000>;
impl core::fmt::Debug for LPUART {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART").finish()
    }
}
///LPUART
pub mod lpuart;
///SPI2
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#SPI1)
pub type SPI2 = crate::Periph<spi1::RegisterBlock, 0x4100_3000>;
impl core::fmt::Debug for SPI2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI2").finish()
    }
}
///SPI2
pub use self::spi1 as spi2;
///I2C address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#I2C1)
pub type I2C2 = crate::Periph<i2c1::RegisterBlock, 0x4100_1000>;
impl core::fmt::Debug for I2C2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C2").finish()
    }
}
///I2C address block description
pub use self::i2c1 as i2c2;
///RTC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#RTC)
pub type RTC = crate::Periph<rtc::RegisterBlock, 0x4000_4000>;
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
///RTC
pub mod rtc;
///IWDG
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#IWDG)
pub type IWDG = crate::Periph<iwdg::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG").finish()
    }
}
///IWDG
pub mod iwdg;
///TIM1
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#TIM1)
pub type TIM1 = crate::Periph<tim1::RegisterBlock, 0x4000_2000>;
impl core::fmt::Debug for TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1").finish()
    }
}
///TIM1
pub mod tim1;
///SYSTEM_CTRL
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WB07.html#SYSTEM_CTRL)
pub type SYSTEM_CTRL = crate::Periph<system_ctrl::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for SYSTEM_CTRL {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSTEM_CTRL").finish()
    }
}
///SYSTEM_CTRL
pub mod system_ctrl;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
/// All the peripherals.
#[allow(non_snake_case)]
pub struct Peripherals {
    ///ADC
    pub ADC: ADC,
    ///CRC
    pub CRC: CRC,
    ///DMA
    pub DMA: DMA,
    ///DMAMUX
    pub DMAMUX: DMAMUX,
    ///GPIOA
    pub GPIOA: GPIOA,
    ///I2C1
    pub I2C1: I2C1,
    ///RCC
    pub RCC: RCC,
    ///SPI1
    pub SPI1: SPI1,
    ///SPI3
    pub SPI3: SPI3,
    ///USART
    pub USART: USART,
    ///BLUE
    pub BLUE: BLUE,
    ///GLOBALSTATMACH
    pub GLOBALSTATMACH: GLOBALSTATMACH,
    ///RADIO_CONTROL
    pub RADIO_CONTROL: RADIO_CONTROL,
    ///RADIO
    pub RADIO: RADIO,
    ///RRM
    pub RRM: RRM,
    ///WAKEUP
    pub WAKEUP: WAKEUP,
    ///FLASH_CTRL
    pub FLASH_CTRL: FLASH_CTRL,
    ///RNG
    pub RNG: RNG,
    ///PWRC
    pub PWRC: PWRC,
    ///PKA
    pub PKA: PKA,
    ///GPIOB
    pub GPIOB: GPIOB,
    ///LPUART
    pub LPUART: LPUART,
    ///SPI2
    pub SPI2: SPI2,
    ///I2C2
    pub I2C2: I2C2,
    ///RTC
    pub RTC: RTC,
    ///IWDG
    pub IWDG: IWDG,
    ///TIM1
    pub TIM1: TIM1,
    ///SYSTEM_CTRL
    pub SYSTEM_CTRL: SYSTEM_CTRL,
}
impl Peripherals {
    /// Returns all the peripherals *once*.
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    /// Unchecked version of `Peripherals::take`.
    ///
    /// # Safety
    ///
    /// Each of the returned peripherals must be used at most once.
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            ADC: ADC::steal(),
            CRC: CRC::steal(),
            DMA: DMA::steal(),
            DMAMUX: DMAMUX::steal(),
            GPIOA: GPIOA::steal(),
            I2C1: I2C1::steal(),
            RCC: RCC::steal(),
            SPI1: SPI1::steal(),
            SPI3: SPI3::steal(),
            USART: USART::steal(),
            BLUE: BLUE::steal(),
            GLOBALSTATMACH: GLOBALSTATMACH::steal(),
            RADIO_CONTROL: RADIO_CONTROL::steal(),
            RADIO: RADIO::steal(),
            RRM: RRM::steal(),
            WAKEUP: WAKEUP::steal(),
            FLASH_CTRL: FLASH_CTRL::steal(),
            RNG: RNG::steal(),
            PWRC: PWRC::steal(),
            PKA: PKA::steal(),
            GPIOB: GPIOB::steal(),
            LPUART: LPUART::steal(),
            SPI2: SPI2::steal(),
            I2C2: I2C2::steal(),
            RTC: RTC::steal(),
            IWDG: IWDG::steal(),
            TIM1: TIM1::steal(),
            SYSTEM_CTRL: SYSTEM_CTRL::steal(),
        }
    }
}
