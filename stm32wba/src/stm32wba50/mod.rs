/*!Peripheral access API for STM32WBA50 microcontrollers (generated using svd2rust v0.36.1 (4052ce6 2025-04-04))

You can find an overview of the generated API [here].

API features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.

[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api
[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased
[repository]: https://github.com/rust-embedded/svd2rust*/
///Number available in the NVIC for configuring priority
pub const NVIC_PRIO_BITS: u8 = 4;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn PDV();
    fn RTC();
    fn RTC_S();
    fn TAMP();
    fn RAMCFG();
    fn FLASH();
    fn RCC();
    fn RCC_S();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn EXTI5();
    fn EXTI6();
    fn EXTI7();
    fn EXTI8();
    fn EXTI9();
    fn EXTI10();
    fn EXTI11();
    fn EXTI12();
    fn EXTI13();
    fn EXTI14();
    fn EXTI15();
    fn GPDMA1_CH0();
    fn GPDMA1_CH1();
    fn GPDMA1_CH2();
    fn GPDMA1_CH3();
    fn GPDMA1_CH4();
    fn GPDMA1_CH5();
    fn GPDMA1_CH6();
    fn GPDMA1_CH7();
    fn TIM1_BRK_TERR_IERR();
    fn TIM1_UP();
    fn TIM1_TRG_COM_DIR_IDX();
    fn TIM1_CC();
    fn TIM2();
    fn USART1();
    fn LPUART1();
    fn LPTIM1();
    fn TIM16();
    fn I2C3_EV();
    fn I2C3_ER();
    fn TSC();
    fn AES();
    fn RNG();
    fn HASH();
    fn PKA();
    fn SPI3();
    fn ICACHE();
    fn ADC4();
    fn WKUP();
    fn HSEM();
    fn HSEM_S();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 70] = [
    Vector { _handler: WWDG },
    Vector { _handler: PDV },
    Vector { _handler: RTC },
    Vector { _handler: RTC_S },
    Vector { _handler: TAMP },
    Vector { _handler: RAMCFG },
    Vector { _handler: FLASH },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: RCC },
    Vector { _handler: RCC_S },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector { _handler: EXTI5 },
    Vector { _handler: EXTI6 },
    Vector { _handler: EXTI7 },
    Vector { _handler: EXTI8 },
    Vector { _handler: EXTI9 },
    Vector { _handler: EXTI10 },
    Vector { _handler: EXTI11 },
    Vector { _handler: EXTI12 },
    Vector { _handler: EXTI13 },
    Vector { _handler: EXTI14 },
    Vector { _handler: EXTI15 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: GPDMA1_CH0,
    },
    Vector {
        _handler: GPDMA1_CH1,
    },
    Vector {
        _handler: GPDMA1_CH2,
    },
    Vector {
        _handler: GPDMA1_CH3,
    },
    Vector {
        _handler: GPDMA1_CH4,
    },
    Vector {
        _handler: GPDMA1_CH5,
    },
    Vector {
        _handler: GPDMA1_CH6,
    },
    Vector {
        _handler: GPDMA1_CH7,
    },
    Vector {
        _handler: TIM1_BRK_TERR_IERR,
    },
    Vector { _handler: TIM1_UP },
    Vector {
        _handler: TIM1_TRG_COM_DIR_IDX,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: USART1 },
    Vector { _reserved: 0 },
    Vector { _handler: LPUART1 },
    Vector { _handler: LPTIM1 },
    Vector { _reserved: 0 },
    Vector { _handler: TIM16 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: I2C3_EV },
    Vector { _handler: I2C3_ER },
    Vector { _reserved: 0 },
    Vector { _handler: TSC },
    Vector { _handler: AES },
    Vector { _handler: RNG },
    Vector { _reserved: 0 },
    Vector { _handler: HASH },
    Vector { _handler: PKA },
    Vector { _handler: SPI3 },
    Vector { _handler: ICACHE },
    Vector { _handler: ADC4 },
    Vector { _reserved: 0 },
    Vector { _handler: WKUP },
    Vector { _handler: HSEM },
    Vector { _handler: HSEM_S },
];
///Enumeration of all the interrupts.
#[cfg_attr(feature = "defmt", derive(defmt::Format))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    ///0 - Window Watchdog interrupt
    WWDG = 0,
    ///1 - Power voltage monitor
    PDV = 1,
    ///2 - RTC non-secure global interrupts
    RTC = 2,
    ///3 - RTC secure global interrupts
    RTC_S = 3,
    ///4 - Tamper global interrupts
    TAMP = 4,
    ///5 - RAM configuration global interrupt
    RAMCFG = 5,
    ///6 - Flash interface non-secure global interrupt,Flash ECC single error correction interrupt
    FLASH = 6,
    ///9 - RCC non-secure global interrupt
    RCC = 9,
    ///10 - RCC Ssecure global interrupt
    RCC_S = 10,
    ///11 - EXTI line0 interrupt
    EXTI0 = 11,
    ///12 - EXTI line1 interrupt
    EXTI1 = 12,
    ///13 - EXTI line2 interrupt
    EXTI2 = 13,
    ///14 - EXTI line3 interrupt
    EXTI3 = 14,
    ///15 - EXTI line4 interrupt
    EXTI4 = 15,
    ///16 - EXTI line5 interrupt
    EXTI5 = 16,
    ///17 - EXTI line6 interrupt
    EXTI6 = 17,
    ///18 - EXTI line7 interrupt
    EXTI7 = 18,
    ///19 - EXTI line8 interrupt
    EXTI8 = 19,
    ///20 - EXTI line9 interrupt
    EXTI9 = 20,
    ///21 - EXTI line10 interrupt
    EXTI10 = 21,
    ///22 - EXTI line11 interrupt
    EXTI11 = 22,
    ///23 - EXTI line12 interrupt
    EXTI12 = 23,
    ///24 - EXTI line13 interrupt
    EXTI13 = 24,
    ///25 - EXTI line14 interrupt
    EXTI14 = 25,
    ///26 - EXTI line15 interrupt
    EXTI15 = 26,
    ///29 - GPDMA1 channel 0 global interrupt
    GPDMA1_CH0 = 29,
    ///30 - GPDMA1 channel 1 global interrupt
    GPDMA1_CH1 = 30,
    ///31 - GPDMA1 channel 2 global interrupt
    GPDMA1_CH2 = 31,
    ///32 - GPDMA1 channel 3 global interrupt
    GPDMA1_CH3 = 32,
    ///33 - GPDMA1 channel 4 global interrupt
    GPDMA1_CH4 = 33,
    ///34 - GPDMA1 channel 5 global interrupt
    GPDMA1_CH5 = 34,
    ///35 - GPDMA1 channel 6 global interrupt
    GPDMA1_CH6 = 35,
    ///36 - GPDMA1 channel 7 global interrupt
    GPDMA1_CH7 = 36,
    ///37 - TIM1 Break - transition error -index error
    TIM1_BRK_TERR_IERR = 37,
    ///38 - TIM1 Update
    TIM1_UP = 38,
    ///39 - TIM1 Trigger and Commutation - direction change interrupt -index
    TIM1_TRG_COM_DIR_IDX = 39,
    ///40 - TIM1 Capture Compare interrupt
    TIM1_CC = 40,
    ///41 - TIM2 global interrupt
    TIM2 = 41,
    ///46 - USART1 global interrupt
    USART1 = 46,
    ///48 - LPUART1 global interrupt
    LPUART1 = 48,
    ///49 - LPTIM1 global interrupt
    LPTIM1 = 49,
    ///51 - TIM16 global interrupt
    TIM16 = 51,
    ///54 - I2C3 event interrupt
    I2C3_EV = 54,
    ///55 - I2C3 error interrupt
    I2C3_ER = 55,
    ///57 - TSC global interrupt
    TSC = 57,
    ///58 - AES global interrupt
    AES = 58,
    ///59 - RNG global interrupt
    RNG = 59,
    ///61 - HASH interrupt
    HASH = 61,
    ///62 - PKA global interrupt
    PKA = 62,
    ///63 - SPI3 global interrupt
    SPI3 = 63,
    ///64 - Instruction cache global interrupt
    ICACHE = 64,
    ///65 - ADC4 global interrupt
    ADC4 = 65,
    ///67 - PWR global WKUP pin interrupt
    WKUP = 67,
    ///68 - HSEM non-secure interrupt
    HSEM = 68,
    ///69 - HSEM secure interrupt
    HSEM_S = 69,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
///ADC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#ADC4)
pub type ADC4 = crate::Periph<adc4::RegisterBlock, 0x4602_1000>;
impl core::fmt::Debug for ADC4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC4").finish()
    }
}
///ADC register block
pub mod adc4;
///Advanced encryption standard hardware accelerator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#AES)
pub type AES = crate::Periph<aes::RegisterBlock, 0x420c_0000>;
impl core::fmt::Debug for AES {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AES").finish()
    }
}
///Advanced encryption standard hardware accelerator
pub mod aes;
///CRC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#CRC)
pub type CRC = crate::Periph<crc::RegisterBlock, 0x4002_3000>;
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
///CRC register block
pub mod crc;
///DBGMCU address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#DBGMCU)
pub type DBGMCU = crate::Periph<dbgmcu::RegisterBlock, 0xe004_4000>;
impl core::fmt::Debug for DBGMCU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBGMCU").finish()
    }
}
///DBGMCU address block description
pub mod dbgmcu;
///External interrupt/event controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#EXTI)
pub type EXTI = crate::Periph<exti::RegisterBlock, 0x4602_2000>;
impl core::fmt::Debug for EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI").finish()
    }
}
///External interrupt/event controller
pub mod exti;
///Embedded Flash memory
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#FLASH)
pub type FLASH = crate::Periph<flash::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
///Embedded Flash memory
pub mod flash;
///General purpose direct memory access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#GPDMA)
pub type GPDMA = crate::Periph<gpdma::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for GPDMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA").finish()
    }
}
///General purpose direct memory access controller
pub mod gpdma;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#GPIOA)
pub type GPIOA = crate::Periph<gpioa::RegisterBlock, 0x4202_0000>;
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
///General-purpose I/Os
pub mod gpioa;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#GPIOB)
pub type GPIOB = crate::Periph<gpiob::RegisterBlock, 0x4202_0400>;
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
///General-purpose I/Os
pub mod gpiob;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#GPIOC)
pub type GPIOC = crate::Periph<gpioc::RegisterBlock, 0x4202_0800>;
impl core::fmt::Debug for GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC").finish()
    }
}
///General-purpose I/Os
pub mod gpioc;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#GPIOH)
pub type GPIOH = crate::Periph<gpioh::RegisterBlock, 0x4202_1c00>;
impl core::fmt::Debug for GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOH").finish()
    }
}
///General-purpose I/Os
pub mod gpioh;
///HASH register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#HASH)
pub type HASH = crate::Periph<hash::RegisterBlock, 0x420c_0400>;
impl core::fmt::Debug for HASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HASH").finish()
    }
}
///HASH register block
pub mod hash;
///Hardware semaphore
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#HSEM)
pub type HSEM = crate::Periph<hsem::RegisterBlock, 0x420c_1c00>;
impl core::fmt::Debug for HSEM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HSEM").finish()
    }
}
///Hardware semaphore
pub mod hsem;
///Instruction cache
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#ICACHE)
pub type ICACHE = crate::Periph<icache::RegisterBlock, 0x4003_0400>;
impl core::fmt::Debug for ICACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ICACHE").finish()
    }
}
///Instruction cache
pub mod icache;
///Independent watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#IWDG)
pub type IWDG = crate::Periph<iwdg::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG").finish()
    }
}
///Independent watchdog
pub mod iwdg;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#I2C3)
pub type I2C3 = crate::Periph<i2c3::RegisterBlock, 0x4600_2800>;
impl core::fmt::Debug for I2C3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C3").finish()
    }
}
///Inter-integrated circuit
pub mod i2c3;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#LPTIM1)
pub type LPTIM1 = crate::Periph<lptim1::RegisterBlock, 0x4600_4400>;
impl core::fmt::Debug for LPTIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM1").finish()
    }
}
///Low power timer
pub mod lptim1;
///LPUART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#LPUART1)
pub type LPUART1 = crate::Periph<lpuart1::RegisterBlock, 0x4600_2400>;
impl core::fmt::Debug for LPUART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART1").finish()
    }
}
///LPUART address block description
pub mod lpuart1;
///Private key accelerator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#PKA)
pub type PKA = crate::Periph<pka::RegisterBlock, 0x420c_2000>;
impl core::fmt::Debug for PKA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PKA").finish()
    }
}
///Private key accelerator
pub mod pka;
///Power control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#PWR)
pub type PWR = crate::Periph<pwr::RegisterBlock, 0x4602_0800>;
impl core::fmt::Debug for PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR").finish()
    }
}
///Power control
pub mod pwr;
///RAMs configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#RAMCFG)
pub type RAMCFG = crate::Periph<ramcfg::RegisterBlock, 0x4002_6000>;
impl core::fmt::Debug for RAMCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAMCFG").finish()
    }
}
///RAMs configuration controller
pub mod ramcfg;
///Reset and clock control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#RCC)
pub type RCC = crate::Periph<rcc::RegisterBlock, 0x4602_0c00>;
impl core::fmt::Debug for RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC").finish()
    }
}
///Reset and clock control
pub mod rcc;
///RNG register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#RNG)
pub type RNG = crate::Periph<rng::RegisterBlock, 0x420c_0800>;
impl core::fmt::Debug for RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG").finish()
    }
}
///RNG register block
pub mod rng;
///Real-time clock
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#RTC)
pub type RTC = crate::Periph<rtc::RegisterBlock, 0x4600_7800>;
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
///Real-time clock
pub mod rtc;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#SPI3)
pub type SPI3 = crate::Periph<spi3::RegisterBlock, 0x4600_2000>;
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
///Serial peripheral interface
pub mod spi3;
///System configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#SYSCFG)
pub type SYSCFG = crate::Periph<syscfg::RegisterBlock, 0x4600_0400>;
impl core::fmt::Debug for SYSCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCFG").finish()
    }
}
///System configuration controller
pub mod syscfg;
///Tamper and backup registers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#TAMP)
pub type TAMP = crate::Periph<tamp::RegisterBlock, 0x4600_7c00>;
impl core::fmt::Debug for TAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TAMP").finish()
    }
}
///Tamper and backup registers
pub mod tamp;
///TIM1 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#TIM1)
pub type TIM1 = crate::Periph<tim1::RegisterBlock, 0x4001_2c00>;
impl core::fmt::Debug for TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1").finish()
    }
}
///TIM1 address block description
pub mod tim1;
///TIM2 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#TIM2)
pub type TIM2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2").finish()
    }
}
///TIM2 address block description
pub mod tim2;
///TIM16 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#TIM16)
pub type TIM16 = crate::Periph<tim16::RegisterBlock, 0x4001_4400>;
impl core::fmt::Debug for TIM16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM16").finish()
    }
}
///TIM16 address block description
pub mod tim16;
///Touch sensing controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#TSC)
pub type TSC = crate::Periph<tsc::RegisterBlock, 0x4002_4000>;
impl core::fmt::Debug for TSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TSC").finish()
    }
}
///Touch sensing controller
pub mod tsc;
///USART register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#USART1)
pub type USART1 = crate::Periph<usart1::RegisterBlock, 0x4001_3800>;
impl core::fmt::Debug for USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1").finish()
    }
}
///USART register block
pub mod usart1;
///System window watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA50.html#WWDG)
pub type WWDG = crate::Periph<wwdg::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG").finish()
    }
}
///System window watchdog
pub mod wwdg;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
/// All the peripherals.
#[allow(non_snake_case)]
pub struct Peripherals {
    ///ADC4
    pub ADC4: ADC4,
    ///AES
    pub AES: AES,
    ///CRC
    pub CRC: CRC,
    ///DBGMCU
    pub DBGMCU: DBGMCU,
    ///EXTI
    pub EXTI: EXTI,
    ///FLASH
    pub FLASH: FLASH,
    ///GPDMA
    pub GPDMA: GPDMA,
    ///GPIOA
    pub GPIOA: GPIOA,
    ///GPIOB
    pub GPIOB: GPIOB,
    ///GPIOC
    pub GPIOC: GPIOC,
    ///GPIOH
    pub GPIOH: GPIOH,
    ///HASH
    pub HASH: HASH,
    ///HSEM
    pub HSEM: HSEM,
    ///ICACHE
    pub ICACHE: ICACHE,
    ///IWDG
    pub IWDG: IWDG,
    ///I2C3
    pub I2C3: I2C3,
    ///LPTIM1
    pub LPTIM1: LPTIM1,
    ///LPUART1
    pub LPUART1: LPUART1,
    ///PKA
    pub PKA: PKA,
    ///PWR
    pub PWR: PWR,
    ///RAMCFG
    pub RAMCFG: RAMCFG,
    ///RCC
    pub RCC: RCC,
    ///RNG
    pub RNG: RNG,
    ///RTC
    pub RTC: RTC,
    ///SPI3
    pub SPI3: SPI3,
    ///SYSCFG
    pub SYSCFG: SYSCFG,
    ///TAMP
    pub TAMP: TAMP,
    ///TIM1
    pub TIM1: TIM1,
    ///TIM2
    pub TIM2: TIM2,
    ///TIM16
    pub TIM16: TIM16,
    ///TSC
    pub TSC: TSC,
    ///USART1
    pub USART1: USART1,
    ///WWDG
    pub WWDG: WWDG,
}
impl Peripherals {
    /// Returns all the peripherals *once*.
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    /// Unchecked version of `Peripherals::take`.
    ///
    /// # Safety
    ///
    /// Each of the returned peripherals must be used at most once.
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            ADC4: ADC4::steal(),
            AES: AES::steal(),
            CRC: CRC::steal(),
            DBGMCU: DBGMCU::steal(),
            EXTI: EXTI::steal(),
            FLASH: FLASH::steal(),
            GPDMA: GPDMA::steal(),
            GPIOA: GPIOA::steal(),
            GPIOB: GPIOB::steal(),
            GPIOC: GPIOC::steal(),
            GPIOH: GPIOH::steal(),
            HASH: HASH::steal(),
            HSEM: HSEM::steal(),
            ICACHE: ICACHE::steal(),
            IWDG: IWDG::steal(),
            I2C3: I2C3::steal(),
            LPTIM1: LPTIM1::steal(),
            LPUART1: LPUART1::steal(),
            PKA: PKA::steal(),
            PWR: PWR::steal(),
            RAMCFG: RAMCFG::steal(),
            RCC: RCC::steal(),
            RNG: RNG::steal(),
            RTC: RTC::steal(),
            SPI3: SPI3::steal(),
            SYSCFG: SYSCFG::steal(),
            TAMP: TAMP::steal(),
            TIM1: TIM1::steal(),
            TIM2: TIM2::steal(),
            TIM16: TIM16::steal(),
            TSC: TSC::steal(),
            USART1: USART1::steal(),
            WWDG: WWDG::steal(),
        }
    }
}
