/*!Peripheral access API for STM32WBA54 microcontrollers (generated using svd2rust v0.36.1 (4052ce6 2025-04-04))

You can find an overview of the generated API [here].

API features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.

[here]: https://docs.rs/svd2rust/0.36.1/svd2rust/#peripheral-api
[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased
[repository]: https://github.com/rust-embedded/svd2rust*/
///Number available in the NVIC for configuring priority
pub const NVIC_PRIO_BITS: u8 = 4;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, FPU, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[cfg(feature = "rt")]
extern "C" {
    fn WWDG();
    fn PDV();
    fn RTC();
    fn RTC_S();
    fn TAMP();
    fn RAMCFG();
    fn FLASH();
    fn RCC();
    fn RCC_S();
    fn EXTI0();
    fn EXTI1();
    fn EXTI2();
    fn EXTI3();
    fn EXTI4();
    fn EXTI5();
    fn EXTI6();
    fn EXTI7();
    fn EXTI8();
    fn EXTI9();
    fn EXTI10();
    fn EXTI11();
    fn EXTI12();
    fn EXTI13();
    fn EXTI14();
    fn EXTI15();
    fn SAES();
    fn GPDMA1_CH0();
    fn GPDMA1_CH1();
    fn GPDMA1_CH2();
    fn GPDMA1_CH3();
    fn GPDMA1_CH4();
    fn GPDMA1_CH5();
    fn GPDMA1_CH6();
    fn GPDMA1_CH7();
    fn TIM1_BRK_TERR_IERR();
    fn TIM1_UP();
    fn TIM1_TRG_COM_DIR_IDX();
    fn TIM1_CC();
    fn TIM2();
    fn TIM3();
    fn I2C1_EV();
    fn I2C1_ER();
    fn SPI1();
    fn USART1();
    fn USART2();
    fn LPUART1();
    fn LPTIM1();
    fn LPTIM2();
    fn TIM16();
    fn TIM17();
    fn I2C3_EV();
    fn I2C3_ER();
    fn TSC();
    fn AES();
    fn RNG();
    fn HASH();
    fn PKA();
    fn SPI3();
    fn ICACHE();
    fn ADC4();
    fn WKUP();
    fn HSEM();
    fn HSEM_S();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 70] = [
    Vector { _handler: WWDG },
    Vector { _handler: PDV },
    Vector { _handler: RTC },
    Vector { _handler: RTC_S },
    Vector { _handler: TAMP },
    Vector { _handler: RAMCFG },
    Vector { _handler: FLASH },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: RCC },
    Vector { _handler: RCC_S },
    Vector { _handler: EXTI0 },
    Vector { _handler: EXTI1 },
    Vector { _handler: EXTI2 },
    Vector { _handler: EXTI3 },
    Vector { _handler: EXTI4 },
    Vector { _handler: EXTI5 },
    Vector { _handler: EXTI6 },
    Vector { _handler: EXTI7 },
    Vector { _handler: EXTI8 },
    Vector { _handler: EXTI9 },
    Vector { _handler: EXTI10 },
    Vector { _handler: EXTI11 },
    Vector { _handler: EXTI12 },
    Vector { _handler: EXTI13 },
    Vector { _handler: EXTI14 },
    Vector { _handler: EXTI15 },
    Vector { _reserved: 0 },
    Vector { _handler: SAES },
    Vector {
        _handler: GPDMA1_CH0,
    },
    Vector {
        _handler: GPDMA1_CH1,
    },
    Vector {
        _handler: GPDMA1_CH2,
    },
    Vector {
        _handler: GPDMA1_CH3,
    },
    Vector {
        _handler: GPDMA1_CH4,
    },
    Vector {
        _handler: GPDMA1_CH5,
    },
    Vector {
        _handler: GPDMA1_CH6,
    },
    Vector {
        _handler: GPDMA1_CH7,
    },
    Vector {
        _handler: TIM1_BRK_TERR_IERR,
    },
    Vector { _handler: TIM1_UP },
    Vector {
        _handler: TIM1_TRG_COM_DIR_IDX,
    },
    Vector { _handler: TIM1_CC },
    Vector { _handler: TIM2 },
    Vector { _handler: TIM3 },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: SPI1 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: LPUART1 },
    Vector { _handler: LPTIM1 },
    Vector { _handler: LPTIM2 },
    Vector { _handler: TIM16 },
    Vector { _handler: TIM17 },
    Vector { _reserved: 0 },
    Vector { _handler: I2C3_EV },
    Vector { _handler: I2C3_ER },
    Vector { _reserved: 0 },
    Vector { _handler: TSC },
    Vector { _handler: AES },
    Vector { _handler: RNG },
    Vector { _reserved: 0 },
    Vector { _handler: HASH },
    Vector { _handler: PKA },
    Vector { _handler: SPI3 },
    Vector { _handler: ICACHE },
    Vector { _handler: ADC4 },
    Vector { _reserved: 0 },
    Vector { _handler: WKUP },
    Vector { _handler: HSEM },
    Vector { _handler: HSEM_S },
];
///Enumeration of all the interrupts.
#[cfg_attr(feature = "defmt", derive(defmt::Format))]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    ///0 - Window Watchdog interrupt
    WWDG = 0,
    ///1 - Power voltage monitor
    PDV = 1,
    ///2 - RTC non-secure global interrupts
    RTC = 2,
    ///3 - RTC secure global interrupts
    RTC_S = 3,
    ///4 - Tamper global interrupts
    TAMP = 4,
    ///5 - RAM configuration global interrupt
    RAMCFG = 5,
    ///6 - Flash interface non-secure global interrupt,Flash ECC single error correction interrupt
    FLASH = 6,
    ///9 - RCC non-secure global interrupt
    RCC = 9,
    ///10 - RCC Ssecure global interrupt
    RCC_S = 10,
    ///11 - EXTI line0 interrupt
    EXTI0 = 11,
    ///12 - EXTI line1 interrupt
    EXTI1 = 12,
    ///13 - EXTI line2 interrupt
    EXTI2 = 13,
    ///14 - EXTI line3 interrupt
    EXTI3 = 14,
    ///15 - EXTI line4 interrupt
    EXTI4 = 15,
    ///16 - EXTI line5 interrupt
    EXTI5 = 16,
    ///17 - EXTI line6 interrupt
    EXTI6 = 17,
    ///18 - EXTI line7 interrupt
    EXTI7 = 18,
    ///19 - EXTI line8 interrupt
    EXTI8 = 19,
    ///20 - EXTI line9 interrupt
    EXTI9 = 20,
    ///21 - EXTI line10 interrupt
    EXTI10 = 21,
    ///22 - EXTI line11 interrupt
    EXTI11 = 22,
    ///23 - EXTI line12 interrupt
    EXTI12 = 23,
    ///24 - EXTI line13 interrupt
    EXTI13 = 24,
    ///25 - EXTI line14 interrupt
    EXTI14 = 25,
    ///26 - EXTI line15 interrupt
    EXTI15 = 26,
    ///28 - Secure AES interrupt
    SAES = 28,
    ///29 - GPDMA1 channel 0 global interrupt
    GPDMA1_CH0 = 29,
    ///30 - GPDMA1 channel 1 global interrupt
    GPDMA1_CH1 = 30,
    ///31 - GPDMA1 channel 2 global interrupt
    GPDMA1_CH2 = 31,
    ///32 - GPDMA1 channel 3 global interrupt
    GPDMA1_CH3 = 32,
    ///33 - GPDMA1 channel 4 global interrupt
    GPDMA1_CH4 = 33,
    ///34 - GPDMA1 channel 5 global interrupt
    GPDMA1_CH5 = 34,
    ///35 - GPDMA1 channel 6 global interrupt
    GPDMA1_CH6 = 35,
    ///36 - GPDMA1 channel 7 global interrupt
    GPDMA1_CH7 = 36,
    ///37 - TIM1 Break - transition error -index error
    TIM1_BRK_TERR_IERR = 37,
    ///38 - TIM1 Update
    TIM1_UP = 38,
    ///39 - TIM1 Trigger and Commutation - direction change interrupt -index
    TIM1_TRG_COM_DIR_IDX = 39,
    ///40 - TIM1 Capture Compare interrupt
    TIM1_CC = 40,
    ///41 - TIM2 global interrupt
    TIM2 = 41,
    ///42 - TIM3 global interrupt
    TIM3 = 42,
    ///43 - I2C1 event interrupt
    I2C1_EV = 43,
    ///44 - I2C1 error interrupt
    I2C1_ER = 44,
    ///45 - SPI1 global interrupt
    SPI1 = 45,
    ///46 - USART1 global interrupt
    USART1 = 46,
    ///47 - USART2 global interrupt
    USART2 = 47,
    ///48 - LPUART1 global interrupt
    LPUART1 = 48,
    ///49 - LPTIM1 global interrupt
    LPTIM1 = 49,
    ///50 - LPTIM2 global interrupt
    LPTIM2 = 50,
    ///51 - TIM16 global interrupt
    TIM16 = 51,
    ///52 - TIM17 global interrupt
    TIM17 = 52,
    ///54 - I2C3 event interrupt
    I2C3_EV = 54,
    ///55 - I2C3 error interrupt
    I2C3_ER = 55,
    ///57 - TSC global interrupt
    TSC = 57,
    ///58 - AES global interrupt
    AES = 58,
    ///59 - RNG global interrupt
    RNG = 59,
    ///61 - HASH interrupt
    HASH = 61,
    ///62 - PKA global interrupt
    PKA = 62,
    ///63 - SPI3 global interrupt
    SPI3 = 63,
    ///64 - Instruction cache global interrupt
    ICACHE = 64,
    ///65 - ADC4 global interrupt
    ADC4 = 65,
    ///67 - PWR global WKUP pin interrupt
    WKUP = 67,
    ///68 - HSEM non-secure interrupt
    HSEM = 68,
    ///69 - HSEM secure interrupt
    HSEM_S = 69,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
///ADC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#ADC4)
pub type ADC4 = crate::Periph<adc4::RegisterBlock, 0x4602_1000>;
impl core::fmt::Debug for ADC4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ADC4").finish()
    }
}
///ADC register block
pub mod adc4;
///ADC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#ADC4)
pub type SEC_ADC4 = crate::Periph<adc4::RegisterBlock, 0x5602_1000>;
impl core::fmt::Debug for SEC_ADC4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_ADC4").finish()
    }
}
///ADC register block
pub use self::adc4 as sec_adc4;
///Advanced encryption standard hardware accelerator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#AES)
pub type AES = crate::Periph<aes::RegisterBlock, 0x420c_0000>;
impl core::fmt::Debug for AES {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("AES").finish()
    }
}
///Advanced encryption standard hardware accelerator
pub mod aes;
///Advanced encryption standard hardware accelerator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#AES)
pub type SEC_AES = crate::Periph<aes::RegisterBlock, 0x520c_0000>;
impl core::fmt::Debug for SEC_AES {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_AES").finish()
    }
}
///Advanced encryption standard hardware accelerator
pub use self::aes as sec_aes;
///CRC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#CRC)
pub type CRC = crate::Periph<crc::RegisterBlock, 0x4002_3000>;
impl core::fmt::Debug for CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CRC").finish()
    }
}
///CRC register block
pub mod crc;
///CRC register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#CRC)
pub type SEC_CRC = crate::Periph<crc::RegisterBlock, 0x5002_3000>;
impl core::fmt::Debug for SEC_CRC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_CRC").finish()
    }
}
///CRC register block
pub use self::crc as sec_crc;
///Comparator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#COMP)
pub type COMP = crate::Periph<comp::RegisterBlock, 0x4600_5400>;
impl core::fmt::Debug for COMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("COMP").finish()
    }
}
///Comparator
pub mod comp;
///Comparator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#COMP)
pub type SEC_COMP = crate::Periph<comp::RegisterBlock, 0x5600_5400>;
impl core::fmt::Debug for SEC_COMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_COMP").finish()
    }
}
///Comparator
pub use self::comp as sec_comp;
///DBGMCU address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#DBGMCU)
pub type DBGMCU = crate::Periph<dbgmcu::RegisterBlock, 0xe004_4000>;
impl core::fmt::Debug for DBGMCU {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DBGMCU").finish()
    }
}
///DBGMCU address block description
pub mod dbgmcu;
///External interrupt/event controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#EXTI)
pub type EXTI = crate::Periph<exti::RegisterBlock, 0x4602_2000>;
impl core::fmt::Debug for EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EXTI").finish()
    }
}
///External interrupt/event controller
pub mod exti;
///External interrupt/event controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#EXTI)
pub type SEC_EXTI = crate::Periph<exti::RegisterBlock, 0x5602_2000>;
impl core::fmt::Debug for SEC_EXTI {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_EXTI").finish()
    }
}
///External interrupt/event controller
pub use self::exti as sec_exti;
///Embedded Flash memory
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#FLASH)
pub type FLASH = crate::Periph<flash::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FLASH").finish()
    }
}
///Embedded Flash memory
pub mod flash;
///Embedded Flash memory
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#FLASH)
pub type SEC_FLASH = crate::Periph<flash::RegisterBlock, 0x5002_2000>;
impl core::fmt::Debug for SEC_FLASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_FLASH").finish()
    }
}
///Embedded Flash memory
pub use self::flash as sec_flash;
///General purpose direct memory access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GPDMA)
pub type GPDMA = crate::Periph<gpdma::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for GPDMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPDMA").finish()
    }
}
///General purpose direct memory access controller
pub mod gpdma;
///General purpose direct memory access controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GPDMA)
pub type SEC_GPDMA = crate::Periph<gpdma::RegisterBlock, 0x5002_0000>;
impl core::fmt::Debug for SEC_GPDMA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPDMA").finish()
    }
}
///General purpose direct memory access controller
pub use self::gpdma as sec_gpdma;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GPIOA)
pub type GPIOA = crate::Periph<gpioa::RegisterBlock, 0x4202_0000>;
impl core::fmt::Debug for GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOA").finish()
    }
}
///General-purpose I/Os
pub mod gpioa;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GPIOA)
pub type SEC_GPIOA = crate::Periph<gpioa::RegisterBlock, 0x5202_0000>;
impl core::fmt::Debug for SEC_GPIOA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOA").finish()
    }
}
///General-purpose I/Os
pub use self::gpioa as sec_gpioa;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GPIOB)
pub type GPIOB = crate::Periph<gpiob::RegisterBlock, 0x4202_0400>;
impl core::fmt::Debug for GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOB").finish()
    }
}
///General-purpose I/Os
pub mod gpiob;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GPIOB)
pub type SEC_GPIOB = crate::Periph<gpiob::RegisterBlock, 0x5202_0400>;
impl core::fmt::Debug for SEC_GPIOB {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOB").finish()
    }
}
///General-purpose I/Os
pub use self::gpiob as sec_gpiob;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GPIOC)
pub type GPIOC = crate::Periph<gpioc::RegisterBlock, 0x4202_0800>;
impl core::fmt::Debug for GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOC").finish()
    }
}
///General-purpose I/Os
pub mod gpioc;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GPIOC)
pub type SEC_GPIOC = crate::Periph<gpioc::RegisterBlock, 0x5202_0800>;
impl core::fmt::Debug for SEC_GPIOC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOC").finish()
    }
}
///General-purpose I/Os
pub use self::gpioc as sec_gpioc;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GPIOH)
pub type GPIOH = crate::Periph<gpioh::RegisterBlock, 0x4202_1c00>;
impl core::fmt::Debug for GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GPIOH").finish()
    }
}
///General-purpose I/Os
pub mod gpioh;
///General-purpose I/Os
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GPIOH)
pub type SEC_GPIOH = crate::Periph<gpioh::RegisterBlock, 0x5202_1c00>;
impl core::fmt::Debug for SEC_GPIOH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GPIOH").finish()
    }
}
///General-purpose I/Os
pub use self::gpioh as sec_gpioh;
///GTZC1_TZSC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GTZC1_TZSC)
pub type GTZC1_TZSC = crate::Periph<gtzc1_tzsc::RegisterBlock, 0x4003_2400>;
impl core::fmt::Debug for GTZC1_TZSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_TZSC").finish()
    }
}
///GTZC1_TZSC
pub mod gtzc1_tzsc;
///GTZC1_TZSC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GTZC1_TZSC)
pub type SEC_GTZC1_TZSC = crate::Periph<gtzc1_tzsc::RegisterBlock, 0x5003_2400>;
impl core::fmt::Debug for SEC_GTZC1_TZSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_TZSC").finish()
    }
}
///GTZC1_TZSC
pub use self::gtzc1_tzsc as sec_gtzc1_tzsc;
///GTZC1_TZIC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GTZC1_TZIC)
pub type GTZC1_TZIC = crate::Periph<gtzc1_tzic::RegisterBlock, 0x4003_2800>;
impl core::fmt::Debug for GTZC1_TZIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_TZIC").finish()
    }
}
///GTZC1_TZIC
pub mod gtzc1_tzic;
///GTZC1_TZIC
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GTZC1_TZIC)
pub type SEC_GTZC1_TZIC = crate::Periph<gtzc1_tzic::RegisterBlock, 0x5003_2800>;
impl core::fmt::Debug for SEC_GTZC1_TZIC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_TZIC").finish()
    }
}
///GTZC1_TZIC
pub use self::gtzc1_tzic as sec_gtzc1_tzic;
///GTZC1_MPCBB1 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GTZC1_MPCBB1)
pub type GTZC1_MPCBB1 = crate::Periph<gtzc1_mpcbb1::RegisterBlock, 0x4003_2c00>;
impl core::fmt::Debug for GTZC1_MPCBB1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_MPCBB1").finish()
    }
}
///GTZC1_MPCBB1 address block description
pub mod gtzc1_mpcbb1;
///GTZC1_MPCBB1 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GTZC1_MPCBB1)
pub type SEC_GTZC1_MPCBB1 = crate::Periph<gtzc1_mpcbb1::RegisterBlock, 0x5003_2c00>;
impl core::fmt::Debug for SEC_GTZC1_MPCBB1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_MPCBB1").finish()
    }
}
///GTZC1_MPCBB1 address block description
pub use self::gtzc1_mpcbb1 as sec_gtzc1_mpcbb1;
///GTZC1_MPCBB1 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GTZC1_MPCBB1)
pub type GTZC1_MPCBB2 = crate::Periph<gtzc1_mpcbb1::RegisterBlock, 0x4003_3000>;
impl core::fmt::Debug for GTZC1_MPCBB2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_MPCBB2").finish()
    }
}
///GTZC1_MPCBB1 address block description
pub use self::gtzc1_mpcbb1 as gtzc1_mpcbb2;
///GTZC1_MPCBB1 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GTZC1_MPCBB1)
pub type SEC_GTZC1_MPCBB2 = crate::Periph<gtzc1_mpcbb1::RegisterBlock, 0x5003_3000>;
impl core::fmt::Debug for SEC_GTZC1_MPCBB2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_MPCBB2").finish()
    }
}
///GTZC1_MPCBB1 address block description
pub use self::gtzc1_mpcbb1 as sec_gtzc1_mpcbb2;
///GTZC1_MPCBB6 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GTZC1_MPCBB6)
pub type GTZC1_MPCBB6 = crate::Periph<gtzc1_mpcbb6::RegisterBlock, 0x4003_4000>;
impl core::fmt::Debug for GTZC1_MPCBB6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GTZC1_MPCBB6").finish()
    }
}
///GTZC1_MPCBB6 address block description
pub mod gtzc1_mpcbb6;
///GTZC1_MPCBB6 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#GTZC1_MPCBB6)
pub type SEC_GTZC1_MPCBB6 = crate::Periph<gtzc1_mpcbb6::RegisterBlock, 0x5003_4000>;
impl core::fmt::Debug for SEC_GTZC1_MPCBB6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_GTZC1_MPCBB6").finish()
    }
}
///GTZC1_MPCBB6 address block description
pub use self::gtzc1_mpcbb6 as sec_gtzc1_mpcbb6;
///HASH register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#HASH)
pub type HASH = crate::Periph<hash::RegisterBlock, 0x420c_0400>;
impl core::fmt::Debug for HASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HASH").finish()
    }
}
///HASH register block
pub mod hash;
///HASH register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#HASH)
pub type SEC_HASH = crate::Periph<hash::RegisterBlock, 0x520c_0400>;
impl core::fmt::Debug for SEC_HASH {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_HASH").finish()
    }
}
///HASH register block
pub use self::hash as sec_hash;
///Hardware semaphore
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#HSEM)
pub type HSEM = crate::Periph<hsem::RegisterBlock, 0x420c_1c00>;
impl core::fmt::Debug for HSEM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HSEM").finish()
    }
}
///Hardware semaphore
pub mod hsem;
///Hardware semaphore
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#HSEM)
pub type SEC_HSEM = crate::Periph<hsem::RegisterBlock, 0x520c_1c00>;
impl core::fmt::Debug for SEC_HSEM {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_HSEM").finish()
    }
}
///Hardware semaphore
pub use self::hsem as sec_hsem;
///Instruction cache
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#ICACHE)
pub type ICACHE = crate::Periph<icache::RegisterBlock, 0x4003_0400>;
impl core::fmt::Debug for ICACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ICACHE").finish()
    }
}
///Instruction cache
pub mod icache;
///Instruction cache
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#ICACHE)
pub type SEC_ICACHE = crate::Periph<icache::RegisterBlock, 0x5003_0400>;
impl core::fmt::Debug for SEC_ICACHE {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_ICACHE").finish()
    }
}
///Instruction cache
pub use self::icache as sec_icache;
///Independent watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#IWDG)
pub type IWDG = crate::Periph<iwdg::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("IWDG").finish()
    }
}
///Independent watchdog
pub mod iwdg;
///Independent watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#IWDG)
pub type SEC_IWDG = crate::Periph<iwdg::RegisterBlock, 0x5000_3000>;
impl core::fmt::Debug for SEC_IWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_IWDG").finish()
    }
}
///Independent watchdog
pub use self::iwdg as sec_iwdg;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#I2C)
pub type I2C = crate::Periph<i2c::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2C {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C").finish()
    }
}
///Inter-integrated circuit
pub mod i2c;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#I2C)
pub type SEC_I2C1 = crate::Periph<i2c::RegisterBlock, 0x5000_5400>;
impl core::fmt::Debug for SEC_I2C1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_I2C1").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c as sec_i2c1;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#I2C)
pub type I2C3 = crate::Periph<i2c::RegisterBlock, 0x4600_2800>;
impl core::fmt::Debug for I2C3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2C3").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c as i2c3;
///Inter-integrated circuit
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#I2C)
pub type SEC_I2C3 = crate::Periph<i2c::RegisterBlock, 0x5600_2800>;
impl core::fmt::Debug for SEC_I2C3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_I2C3").finish()
    }
}
///Inter-integrated circuit
pub use self::i2c as sec_i2c3;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#LPTIM1)
pub type LPTIM1 = crate::Periph<lptim1::RegisterBlock, 0x4600_4400>;
impl core::fmt::Debug for LPTIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM1").finish()
    }
}
///Low power timer
pub mod lptim1;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#LPTIM1)
pub type SEC_LPTIM1 = crate::Periph<lptim1::RegisterBlock, 0x5600_4400>;
impl core::fmt::Debug for SEC_LPTIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPTIM1").finish()
    }
}
///Low power timer
pub use self::lptim1 as sec_lptim1;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#LPTIM1)
pub type LPTIM2 = crate::Periph<lptim1::RegisterBlock, 0x4000_9400>;
impl core::fmt::Debug for LPTIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPTIM2").finish()
    }
}
///Low power timer
pub use self::lptim1 as lptim2;
///Low power timer
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#LPTIM1)
pub type SEC_LPTIM2 = crate::Periph<lptim1::RegisterBlock, 0x5000_9400>;
impl core::fmt::Debug for SEC_LPTIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPTIM2").finish()
    }
}
///Low power timer
pub use self::lptim1 as sec_lptim2;
///LPUART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#LPUART1)
pub type LPUART1 = crate::Periph<lpuart1::RegisterBlock, 0x4600_2400>;
impl core::fmt::Debug for LPUART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LPUART1").finish()
    }
}
///LPUART address block description
pub mod lpuart1;
///LPUART address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#LPUART1)
pub type SEC_LPUART1 = crate::Periph<lpuart1::RegisterBlock, 0x5600_2400>;
impl core::fmt::Debug for SEC_LPUART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_LPUART1").finish()
    }
}
///LPUART address block description
pub use self::lpuart1 as sec_lpuart1;
///Private key accelerator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#PKA)
pub type PKA = crate::Periph<pka::RegisterBlock, 0x420c_2000>;
impl core::fmt::Debug for PKA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PKA").finish()
    }
}
///Private key accelerator
pub mod pka;
///Private key accelerator
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#PKA)
pub type SEC_PKA = crate::Periph<pka::RegisterBlock, 0x520c_2000>;
impl core::fmt::Debug for SEC_PKA {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_PKA").finish()
    }
}
///Private key accelerator
pub use self::pka as sec_pka;
///Power control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#PWR)
pub type PWR = crate::Periph<pwr::RegisterBlock, 0x4602_0800>;
impl core::fmt::Debug for PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PWR").finish()
    }
}
///Power control
pub mod pwr;
///Power control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#PWR)
pub type SEC_PWR = crate::Periph<pwr::RegisterBlock, 0x5602_0800>;
impl core::fmt::Debug for SEC_PWR {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_PWR").finish()
    }
}
///Power control
pub use self::pwr as sec_pwr;
///RAMs configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#RAMCFG)
pub type RAMCFG = crate::Periph<ramcfg::RegisterBlock, 0x4002_6000>;
impl core::fmt::Debug for RAMCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RAMCFG").finish()
    }
}
///RAMs configuration controller
pub mod ramcfg;
///RAMs configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#RAMCFG)
pub type SEC_RAMCFG = crate::Periph<ramcfg::RegisterBlock, 0x5002_6000>;
impl core::fmt::Debug for SEC_RAMCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_RAMCFG").finish()
    }
}
///RAMs configuration controller
pub use self::ramcfg as sec_ramcfg;
///Reset and clock control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#RCC)
pub type RCC = crate::Periph<rcc::RegisterBlock, 0x4602_0c00>;
impl core::fmt::Debug for RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RCC").finish()
    }
}
///Reset and clock control
pub mod rcc;
///Reset and clock control
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#RCC)
pub type SEC_RCC = crate::Periph<rcc::RegisterBlock, 0x5602_0c00>;
impl core::fmt::Debug for SEC_RCC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_RCC").finish()
    }
}
///Reset and clock control
pub use self::rcc as sec_rcc;
///RNG register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#RNG)
pub type RNG = crate::Periph<rng::RegisterBlock, 0x420c_0800>;
impl core::fmt::Debug for RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RNG").finish()
    }
}
///RNG register block
pub mod rng;
///RNG register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#RNG)
pub type SEC_RNG = crate::Periph<rng::RegisterBlock, 0x520c_0800>;
impl core::fmt::Debug for SEC_RNG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_RNG").finish()
    }
}
///RNG register block
pub use self::rng as sec_rng;
///Real-time clock
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#RTC)
pub type RTC = crate::Periph<rtc::RegisterBlock, 0x4600_7800>;
impl core::fmt::Debug for RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RTC").finish()
    }
}
///Real-time clock
pub mod rtc;
///Real-time clock
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#RTC)
pub type SEC_RTC = crate::Periph<rtc::RegisterBlock, 0x5600_7800>;
impl core::fmt::Debug for SEC_RTC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_RTC").finish()
    }
}
///Real-time clock
pub use self::rtc as sec_rtc;
///Secure AES coprocessor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#SAES)
pub type SAES = crate::Periph<saes::RegisterBlock, 0x420c_0c00>;
impl core::fmt::Debug for SAES {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SAES").finish()
    }
}
///Secure AES coprocessor
pub mod saes;
///Secure AES coprocessor
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#SAES)
pub type SEC_SAES = crate::Periph<saes::RegisterBlock, 0x520c_0c00>;
impl core::fmt::Debug for SEC_SAES {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SAES").finish()
    }
}
///Secure AES coprocessor
pub use self::saes as sec_saes;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#SPI1)
pub type SPI1 = crate::Periph<spi1::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI1").finish()
    }
}
///Serial peripheral interface
pub mod spi1;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#SPI1)
pub type SEC_SPI1 = crate::Periph<spi1::RegisterBlock, 0x5001_3000>;
impl core::fmt::Debug for SEC_SPI1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SPI1").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as sec_spi1;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#SPI1)
pub type SPI3 = crate::Periph<spi1::RegisterBlock, 0x4600_2000>;
impl core::fmt::Debug for SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SPI3").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as spi3;
///Serial peripheral interface
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#SPI1)
pub type SEC_SPI3 = crate::Periph<spi1::RegisterBlock, 0x5600_2000>;
impl core::fmt::Debug for SEC_SPI3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SPI3").finish()
    }
}
///Serial peripheral interface
pub use self::spi1 as sec_spi3;
///System configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#SYSCFG)
pub type SYSCFG = crate::Periph<syscfg::RegisterBlock, 0x4600_0400>;
impl core::fmt::Debug for SYSCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SYSCFG").finish()
    }
}
///System configuration controller
pub mod syscfg;
///System configuration controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#SYSCFG)
pub type SEC_SYSCFG = crate::Periph<syscfg::RegisterBlock, 0x5600_0400>;
impl core::fmt::Debug for SEC_SYSCFG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_SYSCFG").finish()
    }
}
///System configuration controller
pub use self::syscfg as sec_syscfg;
///Tamper and backup registers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TAMP)
pub type TAMP = crate::Periph<tamp::RegisterBlock, 0x4600_7c00>;
impl core::fmt::Debug for TAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TAMP").finish()
    }
}
///Tamper and backup registers
pub mod tamp;
///Tamper and backup registers
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TAMP)
pub type SEC_TAMP = crate::Periph<tamp::RegisterBlock, 0x5600_7c00>;
impl core::fmt::Debug for SEC_TAMP {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TAMP").finish()
    }
}
///Tamper and backup registers
pub use self::tamp as sec_tamp;
///TIM1 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TIM1)
pub type TIM1 = crate::Periph<tim1::RegisterBlock, 0x4001_2c00>;
impl core::fmt::Debug for TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM1").finish()
    }
}
///TIM1 address block description
pub mod tim1;
///TIM1 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TIM1)
pub type SEC_TIM1 = crate::Periph<tim1::RegisterBlock, 0x5001_2c00>;
impl core::fmt::Debug for SEC_TIM1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM1").finish()
    }
}
///TIM1 address block description
pub use self::tim1 as sec_tim1;
///TIM2 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TIM2)
pub type TIM2 = crate::Periph<tim2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM2").finish()
    }
}
///TIM2 address block description
pub mod tim2;
///TIM2 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TIM2)
pub type SEC_TIM2 = crate::Periph<tim2::RegisterBlock, 0x5000_0000>;
impl core::fmt::Debug for SEC_TIM2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM2").finish()
    }
}
///TIM2 address block description
pub use self::tim2 as sec_tim2;
///TIM2 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TIM2)
pub type TIM3 = crate::Periph<tim2::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM3").finish()
    }
}
///TIM2 address block description
pub use self::tim2 as tim3;
///TIM2 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TIM2)
pub type SEC_TIM3 = crate::Periph<tim2::RegisterBlock, 0x5000_0400>;
impl core::fmt::Debug for SEC_TIM3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM3").finish()
    }
}
///TIM2 address block description
pub use self::tim2 as sec_tim3;
///TIM16 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TIM16)
pub type TIM16 = crate::Periph<tim16::RegisterBlock, 0x4001_4400>;
impl core::fmt::Debug for TIM16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM16").finish()
    }
}
///TIM16 address block description
pub mod tim16;
///TIM16 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TIM16)
pub type SEC_TIM16 = crate::Periph<tim16::RegisterBlock, 0x5001_4400>;
impl core::fmt::Debug for SEC_TIM16 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM16").finish()
    }
}
///TIM16 address block description
pub use self::tim16 as sec_tim16;
///TIM16 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TIM16)
pub type TIM17 = crate::Periph<tim16::RegisterBlock, 0x4001_4800>;
impl core::fmt::Debug for TIM17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TIM17").finish()
    }
}
///TIM16 address block description
pub use self::tim16 as tim17;
///TIM16 address block description
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TIM16)
pub type SEC_TIM17 = crate::Periph<tim16::RegisterBlock, 0x5001_4800>;
impl core::fmt::Debug for SEC_TIM17 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TIM17").finish()
    }
}
///TIM16 address block description
pub use self::tim16 as sec_tim17;
///Touch sensing controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TSC)
pub type TSC = crate::Periph<tsc::RegisterBlock, 0x4002_4000>;
impl core::fmt::Debug for TSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("TSC").finish()
    }
}
///Touch sensing controller
pub mod tsc;
///Touch sensing controller
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#TSC)
pub type SEC_TSC = crate::Periph<tsc::RegisterBlock, 0x5002_4000>;
impl core::fmt::Debug for SEC_TSC {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_TSC").finish()
    }
}
///Touch sensing controller
pub use self::tsc as sec_tsc;
///USART register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#USART1)
pub type USART1 = crate::Periph<usart1::RegisterBlock, 0x4001_3800>;
impl core::fmt::Debug for USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART1").finish()
    }
}
///USART register block
pub mod usart1;
///USART register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#USART1)
pub type SEC_USART1 = crate::Periph<usart1::RegisterBlock, 0x5001_3800>;
impl core::fmt::Debug for SEC_USART1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_USART1").finish()
    }
}
///USART register block
pub use self::usart1 as sec_usart1;
///USART register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#USART1)
pub type USART2 = crate::Periph<usart1::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("USART2").finish()
    }
}
///USART register block
pub use self::usart1 as usart2;
///USART register block
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#USART1)
pub type SEC_USART2 = crate::Periph<usart1::RegisterBlock, 0x5000_4400>;
impl core::fmt::Debug for SEC_USART2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_USART2").finish()
    }
}
///USART register block
pub use self::usart1 as sec_usart2;
///System window watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#WWDG)
pub type WWDG = crate::Periph<wwdg::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("WWDG").finish()
    }
}
///System window watchdog
pub mod wwdg;
///System window watchdog
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#WWDG)
pub type SEC_WWDG = crate::Periph<wwdg::RegisterBlock, 0x5000_2c00>;
impl core::fmt::Debug for SEC_WWDG {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_WWDG").finish()
    }
}
///System window watchdog
pub use self::wwdg as sec_wwdg;
///PTA converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#PTACONV)
pub type PTACONV = crate::Periph<ptaconv::RegisterBlock, 0x4803_8000>;
impl core::fmt::Debug for PTACONV {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PTACONV").finish()
    }
}
///PTA converter
pub mod ptaconv;
///PTA converter
///
///See peripheral [structure](https://stm32-rs.github.io/stm32-rs/STM32WBA54.html#PTACONV)
pub type SEC_PTACONV = crate::Periph<ptaconv::RegisterBlock, 0x5803_8000>;
impl core::fmt::Debug for SEC_PTACONV {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SEC_PTACONV").finish()
    }
}
///PTA converter
pub use self::ptaconv as sec_ptaconv;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
/// All the peripherals.
#[allow(non_snake_case)]
pub struct Peripherals {
    ///ADC4
    pub ADC4: ADC4,
    ///SEC_ADC4
    pub SEC_ADC4: SEC_ADC4,
    ///AES
    pub AES: AES,
    ///SEC_AES
    pub SEC_AES: SEC_AES,
    ///CRC
    pub CRC: CRC,
    ///SEC_CRC
    pub SEC_CRC: SEC_CRC,
    ///COMP
    pub COMP: COMP,
    ///SEC_COMP
    pub SEC_COMP: SEC_COMP,
    ///DBGMCU
    pub DBGMCU: DBGMCU,
    ///EXTI
    pub EXTI: EXTI,
    ///SEC_EXTI
    pub SEC_EXTI: SEC_EXTI,
    ///FLASH
    pub FLASH: FLASH,
    ///SEC_FLASH
    pub SEC_FLASH: SEC_FLASH,
    ///GPDMA
    pub GPDMA: GPDMA,
    ///SEC_GPDMA
    pub SEC_GPDMA: SEC_GPDMA,
    ///GPIOA
    pub GPIOA: GPIOA,
    ///SEC_GPIOA
    pub SEC_GPIOA: SEC_GPIOA,
    ///GPIOB
    pub GPIOB: GPIOB,
    ///SEC_GPIOB
    pub SEC_GPIOB: SEC_GPIOB,
    ///GPIOC
    pub GPIOC: GPIOC,
    ///SEC_GPIOC
    pub SEC_GPIOC: SEC_GPIOC,
    ///GPIOH
    pub GPIOH: GPIOH,
    ///SEC_GPIOH
    pub SEC_GPIOH: SEC_GPIOH,
    ///GTZC1_TZSC
    pub GTZC1_TZSC: GTZC1_TZSC,
    ///SEC_GTZC1_TZSC
    pub SEC_GTZC1_TZSC: SEC_GTZC1_TZSC,
    ///GTZC1_TZIC
    pub GTZC1_TZIC: GTZC1_TZIC,
    ///SEC_GTZC1_TZIC
    pub SEC_GTZC1_TZIC: SEC_GTZC1_TZIC,
    ///GTZC1_MPCBB1
    pub GTZC1_MPCBB1: GTZC1_MPCBB1,
    ///SEC_GTZC1_MPCBB1
    pub SEC_GTZC1_MPCBB1: SEC_GTZC1_MPCBB1,
    ///GTZC1_MPCBB2
    pub GTZC1_MPCBB2: GTZC1_MPCBB2,
    ///SEC_GTZC1_MPCBB2
    pub SEC_GTZC1_MPCBB2: SEC_GTZC1_MPCBB2,
    ///GTZC1_MPCBB6
    pub GTZC1_MPCBB6: GTZC1_MPCBB6,
    ///SEC_GTZC1_MPCBB6
    pub SEC_GTZC1_MPCBB6: SEC_GTZC1_MPCBB6,
    ///HASH
    pub HASH: HASH,
    ///SEC_HASH
    pub SEC_HASH: SEC_HASH,
    ///HSEM
    pub HSEM: HSEM,
    ///SEC_HSEM
    pub SEC_HSEM: SEC_HSEM,
    ///ICACHE
    pub ICACHE: ICACHE,
    ///SEC_ICache
    pub SEC_ICACHE: SEC_ICACHE,
    ///IWDG
    pub IWDG: IWDG,
    ///SEC_IWDG
    pub SEC_IWDG: SEC_IWDG,
    ///I2C
    pub I2C: I2C,
    ///SEC_I2C1
    pub SEC_I2C1: SEC_I2C1,
    ///I2C3
    pub I2C3: I2C3,
    ///SEC_I2C3
    pub SEC_I2C3: SEC_I2C3,
    ///LPTIM1
    pub LPTIM1: LPTIM1,
    ///SEC_LPTIM1
    pub SEC_LPTIM1: SEC_LPTIM1,
    ///LPTIM2
    pub LPTIM2: LPTIM2,
    ///SEC_LPTIM2
    pub SEC_LPTIM2: SEC_LPTIM2,
    ///LPUART1
    pub LPUART1: LPUART1,
    ///SEC_LPUART1
    pub SEC_LPUART1: SEC_LPUART1,
    ///PKA
    pub PKA: PKA,
    ///SEC_PKA
    pub SEC_PKA: SEC_PKA,
    ///PWR
    pub PWR: PWR,
    ///SEC_PWR
    pub SEC_PWR: SEC_PWR,
    ///RAMCFG
    pub RAMCFG: RAMCFG,
    ///SEC_RAMCFG
    pub SEC_RAMCFG: SEC_RAMCFG,
    ///RCC
    pub RCC: RCC,
    ///SEC_RCC
    pub SEC_RCC: SEC_RCC,
    ///RNG
    pub RNG: RNG,
    ///SEC_RNG
    pub SEC_RNG: SEC_RNG,
    ///RTC
    pub RTC: RTC,
    ///SEC_RTC
    pub SEC_RTC: SEC_RTC,
    ///SAES
    pub SAES: SAES,
    ///SEC_SAES
    pub SEC_SAES: SEC_SAES,
    ///SPI1
    pub SPI1: SPI1,
    ///SEC_SPI1
    pub SEC_SPI1: SEC_SPI1,
    ///SPI3
    pub SPI3: SPI3,
    ///SEC_SPI3
    pub SEC_SPI3: SEC_SPI3,
    ///SYSCFG
    pub SYSCFG: SYSCFG,
    ///SEC_SYSCFG
    pub SEC_SYSCFG: SEC_SYSCFG,
    ///TAMP
    pub TAMP: TAMP,
    ///SEC_TAMP
    pub SEC_TAMP: SEC_TAMP,
    ///TIM1
    pub TIM1: TIM1,
    ///SEC_TIM1
    pub SEC_TIM1: SEC_TIM1,
    ///TIM2
    pub TIM2: TIM2,
    ///SEC_TIM2
    pub SEC_TIM2: SEC_TIM2,
    ///TIM3
    pub TIM3: TIM3,
    ///SEC_TIM3
    pub SEC_TIM3: SEC_TIM3,
    ///TIM16
    pub TIM16: TIM16,
    ///SEC_TIM16
    pub SEC_TIM16: SEC_TIM16,
    ///TIM17
    pub TIM17: TIM17,
    ///SEC_TIM17
    pub SEC_TIM17: SEC_TIM17,
    ///TSC
    pub TSC: TSC,
    ///SEC_TSC
    pub SEC_TSC: SEC_TSC,
    ///USART1
    pub USART1: USART1,
    ///SEC_USART1
    pub SEC_USART1: SEC_USART1,
    ///USART2
    pub USART2: USART2,
    ///SEC_USART2
    pub SEC_USART2: SEC_USART2,
    ///WWDG
    pub WWDG: WWDG,
    ///SEC_WWDG
    pub SEC_WWDG: SEC_WWDG,
    ///PTACONV
    pub PTACONV: PTACONV,
    ///SEC_PTACONV
    pub SEC_PTACONV: SEC_PTACONV,
}
impl Peripherals {
    /// Returns all the peripherals *once*.
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    /// Unchecked version of `Peripherals::take`.
    ///
    /// # Safety
    ///
    /// Each of the returned peripherals must be used at most once.
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            ADC4: ADC4::steal(),
            SEC_ADC4: SEC_ADC4::steal(),
            AES: AES::steal(),
            SEC_AES: SEC_AES::steal(),
            CRC: CRC::steal(),
            SEC_CRC: SEC_CRC::steal(),
            COMP: COMP::steal(),
            SEC_COMP: SEC_COMP::steal(),
            DBGMCU: DBGMCU::steal(),
            EXTI: EXTI::steal(),
            SEC_EXTI: SEC_EXTI::steal(),
            FLASH: FLASH::steal(),
            SEC_FLASH: SEC_FLASH::steal(),
            GPDMA: GPDMA::steal(),
            SEC_GPDMA: SEC_GPDMA::steal(),
            GPIOA: GPIOA::steal(),
            SEC_GPIOA: SEC_GPIOA::steal(),
            GPIOB: GPIOB::steal(),
            SEC_GPIOB: SEC_GPIOB::steal(),
            GPIOC: GPIOC::steal(),
            SEC_GPIOC: SEC_GPIOC::steal(),
            GPIOH: GPIOH::steal(),
            SEC_GPIOH: SEC_GPIOH::steal(),
            GTZC1_TZSC: GTZC1_TZSC::steal(),
            SEC_GTZC1_TZSC: SEC_GTZC1_TZSC::steal(),
            GTZC1_TZIC: GTZC1_TZIC::steal(),
            SEC_GTZC1_TZIC: SEC_GTZC1_TZIC::steal(),
            GTZC1_MPCBB1: GTZC1_MPCBB1::steal(),
            SEC_GTZC1_MPCBB1: SEC_GTZC1_MPCBB1::steal(),
            GTZC1_MPCBB2: GTZC1_MPCBB2::steal(),
            SEC_GTZC1_MPCBB2: SEC_GTZC1_MPCBB2::steal(),
            GTZC1_MPCBB6: GTZC1_MPCBB6::steal(),
            SEC_GTZC1_MPCBB6: SEC_GTZC1_MPCBB6::steal(),
            HASH: HASH::steal(),
            SEC_HASH: SEC_HASH::steal(),
            HSEM: HSEM::steal(),
            SEC_HSEM: SEC_HSEM::steal(),
            ICACHE: ICACHE::steal(),
            SEC_ICACHE: SEC_ICACHE::steal(),
            IWDG: IWDG::steal(),
            SEC_IWDG: SEC_IWDG::steal(),
            I2C: I2C::steal(),
            SEC_I2C1: SEC_I2C1::steal(),
            I2C3: I2C3::steal(),
            SEC_I2C3: SEC_I2C3::steal(),
            LPTIM1: LPTIM1::steal(),
            SEC_LPTIM1: SEC_LPTIM1::steal(),
            LPTIM2: LPTIM2::steal(),
            SEC_LPTIM2: SEC_LPTIM2::steal(),
            LPUART1: LPUART1::steal(),
            SEC_LPUART1: SEC_LPUART1::steal(),
            PKA: PKA::steal(),
            SEC_PKA: SEC_PKA::steal(),
            PWR: PWR::steal(),
            SEC_PWR: SEC_PWR::steal(),
            RAMCFG: RAMCFG::steal(),
            SEC_RAMCFG: SEC_RAMCFG::steal(),
            RCC: RCC::steal(),
            SEC_RCC: SEC_RCC::steal(),
            RNG: RNG::steal(),
            SEC_RNG: SEC_RNG::steal(),
            RTC: RTC::steal(),
            SEC_RTC: SEC_RTC::steal(),
            SAES: SAES::steal(),
            SEC_SAES: SEC_SAES::steal(),
            SPI1: SPI1::steal(),
            SEC_SPI1: SEC_SPI1::steal(),
            SPI3: SPI3::steal(),
            SEC_SPI3: SEC_SPI3::steal(),
            SYSCFG: SYSCFG::steal(),
            SEC_SYSCFG: SEC_SYSCFG::steal(),
            TAMP: TAMP::steal(),
            SEC_TAMP: SEC_TAMP::steal(),
            TIM1: TIM1::steal(),
            SEC_TIM1: SEC_TIM1::steal(),
            TIM2: TIM2::steal(),
            SEC_TIM2: SEC_TIM2::steal(),
            TIM3: TIM3::steal(),
            SEC_TIM3: SEC_TIM3::steal(),
            TIM16: TIM16::steal(),
            SEC_TIM16: SEC_TIM16::steal(),
            TIM17: TIM17::steal(),
            SEC_TIM17: SEC_TIM17::steal(),
            TSC: TSC::steal(),
            SEC_TSC: SEC_TSC::steal(),
            USART1: USART1::steal(),
            SEC_USART1: SEC_USART1::steal(),
            USART2: USART2::steal(),
            SEC_USART2: SEC_USART2::steal(),
            WWDG: WWDG::steal(),
            SEC_WWDG: SEC_WWDG::steal(),
            PTACONV: PTACONV::steal(),
            SEC_PTACONV: SEC_PTACONV::steal(),
        }
    }
}
